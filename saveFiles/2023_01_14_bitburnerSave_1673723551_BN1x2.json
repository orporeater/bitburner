{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"max\":10,\"current\":10},\"skills\":{\"hacking\":661,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":414869233.6992755,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.2789,\"hacking_speed\":1.21893264,\"hacking_money\":1.16,\"hacking_grow\":1.16,\"hacking\":1.5201224640000004,\"strength\":1.16,\"defense\":1.16,\"dexterity\":1.16,\"agility\":1.16,\"charisma\":1.16,\"hacking_exp\":1.9259625000000002,\"strength_exp\":1.276,\"defense_exp\":1.276,\"dexterity_exp\":1.276,\"agility_exp\":1.276,\"charisma_exp\":1.276,\"company_rep\":1.16,\"faction_rep\":1.16,\"crime_money\":1.16,\"crime_success\":1.16,\"hacknet_node_money\":2.9256287499999996,\"hacknet_node_purchase_cost\":0.6426,\"hacknet_node_ram_cost\":0.84,\"hacknet_node_core_cost\":0.84,\"hacknet_node_level_cost\":0.714,\"work_money\":1.16,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"NeuroFlux Governor\"},{\"level\":2,\"name\":\"NeuroFlux Governor\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Aevum\",\"Sector-12\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":38073.99999996416,\"ram\":64,\"totalMoneyGenerated\":411963055.99000114,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37924.19999996702,\"ram\":64,\"totalMoneyGenerated\":242428986.4525816,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":231025689.43340385,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":225058175.8951793,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":220473817.44536084,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":217134240.52416563,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":214359943.33018526,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37894.1999999676,\"ram\":64,\"totalMoneyGenerated\":211589792.69014108,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37804.199999969314,\"ram\":64,\"totalMoneyGenerated\":209340936.3018377,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37804.199999969314,\"ram\":64,\"totalMoneyGenerated\":207061697.56097138,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":37443.99999997619,\"ram\":64,\"totalMoneyGenerated\":205498905.53302383,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":36809.399999987734,\"ram\":64,\"totalMoneyGenerated\":204042464.33384943,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":36209.39999999851,\"ram\":64,\"totalMoneyGenerated\":201635743.05804342,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":16701.40000002558,\"ram\":64,\"totalMoneyGenerated\":199937278.83200622,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":26831.845907735562,\"onlineTimeSeconds\":16701.40000002558,\"ram\":64,\"totalMoneyGenerated\":198631214.36087033,\"name\":\"hacknet-node-14\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":17666825446.2221,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":148059270690.05365,\"hacknet\":3400181941.7773347,\"hacknet_expenses\":-5103082973.804526,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":17666824405.2221,\"work\":0,\"servers\":-127343935094.08118,\"other\":-313500000,\"augmentations\":-1032110158.3951269}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":197066246477.21536,\"hacknet\":6084260734.2342415,\"hacknet_expenses\":-10268765829.162443,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":17848789898.469955,\"work\":1473800.4159995883,\"servers\":-149113443741.8048,\"other\":-624200000,\"augmentations\":-25296781542.231525}},\"playtimeSinceLastAug\":38088400,\"playtimeSinceLastBitnode\":167968200,\"purchasedServers\":[\"moneyServer-0\",\"moneyServer-1\"],\"scriptProdSinceLastAug\":148008087957.44836,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1671137853951},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1671138393965},{\"ID\":\"WORKOUT\",\"unlockedOn\":1671146193966},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1671173871600},{\"ID\":\"TOR\",\"unlockedOn\":1671174291602},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1671174471602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1671174531592},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1671233460823},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1672421371960},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1672422211962},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1672422391965},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1672423711959},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1672423891961},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1672583693989},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1672583753987},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1672584534004},{\"ID\":\"NITESEC\",\"unlockedOn\":1672584534007},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1672584833999},{\"ID\":\"TRAVEL\",\"unlockedOn\":1672584834002},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1672692811006},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1672764989930},{\"ID\":\"DONATION\",\"unlockedOn\":1672764989951},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1672951832056},{\"ID\":\"FROZE\",\"unlockedOn\":1673104787388},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1673208303290},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1673212577733},{\"ID\":\"4S\",\"unlockedOn\":1673252912192},{\"ID\":\"SF1.1\",\"unlockedOn\":1673438719449},{\"ID\":\"GANG\",\"unlockedOn\":1673550134613}],\"terminalCommandHistory\":[\"analyze\",\"ls\",\"scan\",\"home\",\"listServers\",\"kill main\",\"kill main.js\",\"main\",\"listServers\",\"connect darkweb\",\"buy -l\",\"buy SQLInject.exe\",\"home\",\"li\",\"listServers\",\"listServers 1\",\"sa 10\",\"home\",\"listServers\",\"find run4theh111z\",\"sa 10\",\"scan\",\"connect run4theh111z\",\"backdoor\",\"ls\",\"scan\",\"home\",\"run scripts/executingScripts/runHomeServer.js\",\"listServers\",\"sa 10\",\"backdoor\",\"ls\",\"home\",\"listServers\",\"listServers 1\",\"sca\",\"scan\",\"connect .\",\"analyze\",\"scan\",\"home\",\"listServers\",\"run scripts/executingScripts/upgradeServers.js\",\"listServers\",\"listServers 1\",\"listServers\",\"run scripts/executingScripts/upgradeServers.js\",\"listServers\",\"listServers 1\",\"listServers\"],\"lastUpdate\":1673723550450,\"lastSave\":1673723532855,\"totalPlaytime\":2586782000,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1047,\"factionWorkType\":\"hacking\",\"factionName\":\"Sector-12\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"a7ab312ea0b53\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"77.3.4.2\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"fl1ght.exe\",\"BruteSSH.exe\",\"FTPCrack.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"ramUsed\":1962.2499999999989,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":11932.01000000827,\"pid\":2154,\"ramUsage\":7.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///cb1f7b2b-5e85-4220-a6ac-7fcb0e4d19e9\",\"moduleSequenceNumber\":41},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///d9146e91-a4f2-4db9-851c-81426daf508a\",\"moduleSequenceNumber\":41},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///b8674757-6976-4dff-a412-8389e59a542d\",\"moduleSequenceNumber\":40},{\"filename\":\"main.js\",\"url\":\"blob:file:///57c96e10-2b4b-4ab0-9b47-e775e71af5d7\",\"moduleSequenceNumber\":71}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3354,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///04400e48-b701-4999-bbd2-75ede3f8ddc5\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"blob:file:///ebbe8bee-7daa-46ec-96ac-49a41e7a18db\",\"moduleSequenceNumber\":7115}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[241657,696,696,145]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6589.247352187497,\"onlineMoneyMade\":241657,\"onlineRunningTime\":357.40999999998826,\"pid\":3365,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,87,406,406]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9634.627406249998,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3366,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,145,290,203]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6115.893918749999,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3367,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,87,232,174]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6178.728445312501,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3368,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,58,145]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3518.7334875000006,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3369,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,0,0,87]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1256.6905312500003,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3370,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,0,29,116]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2094.4842187500003,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3371,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,0,0,58]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1172.9111625,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3372,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,0,0,58]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1172.9111625,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3373,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,0,29]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":418.8968437500001,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3374,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3375,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,0,0,29]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":502.6762125000001,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3376,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3377,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3378,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3379,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3380,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3381,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3382,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3383,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3384,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3385,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3386,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3387,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3388,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3389,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3390,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3391,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3392,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":29,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst files = ns.ls(\\\"home\\\", \\\".js\\\")\\n\\tfor (const file of files) {\\n\\t\\tif (file !== ns.getScriptName()) {\\n\\t\\t\\tns.tprintf(file)\\n\\t\\t\\tns.rm(file)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"deleteFiles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"deleteFiles.js\",\"url\":\"blob:file:///e1e93004-c85a-499a-b68b-9850b7a5718b\",\"moduleSequenceNumber\":23749}],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":36,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HacknetNode } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        let whileCounter = 0;\\n        let numberNodes = ns.hacknet.numNodes();\\n        const moneyAvailable = ns.getPlayer().money;\\n        while (numberNodes < HacknetNode.MAX_NUMBER &&\\n            whileCounter < HacknetNode.MAX_NUMBER) {\\n            const nodeCost = ns.hacknet.getPurchaseNodeCost();\\n            if (numberNodes < HacknetNode.MAX_NUMBER) {\\n                if (nodeCost < moneyAvailable) {\\n                    ns.hacknet.purchaseNode();\\n                }\\n            }\\n            numberNodes = ns.hacknet.numNodes();\\n            whileCounter++;\\n        }\\n        for (let node = 0; node < numberNodes; node++) {\\n            const nodeStats = ns.hacknet.getNodeStats(node);\\n            for (let lvl = 0; lvl < HacknetNode.MAX_LVL - nodeStats.level; lvl++) {\\n                const lvlCost = ns.hacknet.getLevelUpgradeCost(node, 1);\\n                if (lvlCost < moneyAvailable) {\\n                    ns.hacknet.upgradeLevel(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let ram = 0; ram < HacknetNode.MAX_RAM - nodeStats.ram; ram++) {\\n                const ramCost = ns.hacknet.getRamUpgradeCost(node, 1);\\n                if (ramCost < moneyAvailable) {\\n                    ns.hacknet.upgradeRam(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let cores = 0; cores < HacknetNode.MAX_CORES - nodeStats.cores; cores++) {\\n                const coresCost = ns.hacknet.getCoreUpgradeCost(node, 1);\\n                if (coresCost < moneyAvailable) {\\n                    ns.hacknet.upgradeCore(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // await ns.sleep(5000);\\n        await ns.sleep(600000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja05vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9oYWNrTm9kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBRTVDLE9BQ0MsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVO1lBQ3BDLFlBQVksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUNwQztZQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNsRCxJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFO2dCQUN6QyxJQUFJLFFBQVEsR0FBRyxjQUFjLEVBQUU7b0JBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQzFCO2FBQ0Q7WUFDRCxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVwQyxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QyxNQUFNLFNBQVMsR0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUzRCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNyRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxPQUFPLEdBQUcsY0FBYyxFQUFFO29CQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO3FCQUFNO29CQUNOLE1BQU07aUJBQ047YUFDRDtZQUVELEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ25FLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLE9BQU8sR0FBRyxjQUFjLEVBQUU7b0JBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ04sTUFBTTtpQkFDTjthQUNEO1lBQ0QsS0FDQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQ2IsS0FBSyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFDL0MsS0FBSyxFQUFFLEVBQ047Z0JBQ0QsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELElBQUksU0FBUyxHQUFHLGNBQWMsRUFBRTtvQkFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDTixNQUFNO2lCQUNOO2FBQ0Q7U0FDRDtRQUNELHdCQUF3QjtRQUN4QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///04400e48-b701-4999-bbd2-75ede3f8ddc5\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"blob:file:///ebbe8bee-7daa-46ec-96ac-49a41e7a18db\",\"moduleSequenceNumber\":7115}],\"dependents\":[],\"ramUsage\":6.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":7115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackNodesActivated = await ns.prompt('Automated HackNodes?', {\\n        type: 'boolean',\\n    });\\n    const upgradeServerActivated = await ns.prompt('Upgrade for Servers Acktiv??', {\\n        type: 'boolean',\\n    });\\n    let startBit = true;\\n    while (true) {\\n        const serversHackable = servers.hackable;\\n        let countNewRootServers = 0;\\n        let countHasRamAndMoneyServers = 0;\\n        ns.print(`runnig`);\\n        for (const server of serversHackable) {\\n            let serverStats = ns.getServer(server);\\n            const portsNeeded = serverStats.numOpenPortsRequired;\\n            ns.fileExists('BruteSSH.exe', OwnServerList.HOME) &&\\n                !serverStats.sshPortOpen\\n                ? ns.brutessh(server)\\n                : null;\\n            ns.fileExists('relaySMTP.exe', OwnServerList.HOME) &&\\n                !serverStats.smtpPortOpen\\n                ? ns.relaysmtp(server)\\n                : null;\\n            ns.fileExists('FTPCrack.exe', OwnServerList.HOME) &&\\n                !serverStats.ftpPortOpen\\n                ? ns.ftpcrack(server)\\n                : null;\\n            ns.fileExists('HTTPworm.exe', OwnServerList.HOME) &&\\n                !serverStats.httpPortOpen\\n                ? ns.httpworm(server)\\n                : null;\\n            ns.fileExists('SQLInject.exe', OwnServerList.HOME) &&\\n                !serverStats.sqlPortOpen\\n                ? ns.sqlinject(server)\\n                : null;\\n            serverStats = ns.getServer(server);\\n            const portsOpen = serverStats.openPortCount;\\n            if (!ns.hasRootAccess(server) && portsOpen >= portsNeeded) {\\n                ns.nuke(server);\\n                countNewRootServers++;\\n                if (serverStats.maxRam > 0 && serverStats.moneyMax > 0) {\\n                    countHasRamAndMoneyServers++;\\n                }\\n            }\\n        }\\n        if (countNewRootServers > 0 || startBit) {\\n            ns.scriptKill(ScriptPath.HACK_NODES, OwnServerList.HOME);\\n            ns.scriptKill(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME);\\n            hackNodesActivated\\n                ? ns.exec(ScriptPath.HACK_NODES, OwnServerList.HOME)\\n                : null;\\n            if (countHasRamAndMoneyServers > 0 || startBit) {\\n                ns.exec(ScriptPath.RUN_REMOTE_ON_TARGET, OwnServerList.HOME);\\n            }\\n            ns.exec(ScriptPath.RUN_HOME_SERVER, OwnServerList.HOME);\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n            upgradeServerActivated\\n                ? ns.exec(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME)\\n                : null;\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n            startBit = false;\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFO1FBQ2xFLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzdDLDhCQUE4QixFQUM5QjtRQUNDLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FDRCxDQUFDO0lBQ0YsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRXBCLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUV6QyxJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVuQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRW5CLEtBQUssTUFBTSxNQUFNLElBQUksZUFBZSxFQUFFO1lBQ3JDLElBQUksV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1lBRXJELEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUM7WUFFNUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBRTtnQkFDMUQsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDaEIsbUJBQW1CLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtvQkFDdkQsMEJBQTBCLEVBQUUsQ0FBQztpQkFDN0I7YUFDRDtTQUNEO1FBQ0QsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLElBQUksUUFBUSxFQUFFO1lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU5RCxrQkFBa0I7Z0JBQ2pCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLElBQUksMEJBQTBCLEdBQUcsQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDL0MsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzdEO1lBRUQsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4RCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFMUQsc0JBQXNCO2dCQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxJQUFJLENBQUM7WUFFUixFQUFFLENBQUMsSUFBSSxDQUNOLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLENBQUMsRUFDRCxhQUFhLENBQUMsdUJBQXVCLENBQ3JDLENBQUM7WUFDRixRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0FBQ0YsQ0FBQyJ9\",\"filename\":\"main.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///4f912114-69ff-442d-8799-05fd3ac7592e\",\"moduleSequenceNumber\":1936},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///143fab5a-fdee-4ed5-a974-b54fb5377c5e\",\"moduleSequenceNumber\":1936},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///3b6d55d1-ffdb-4823-bf0f-54c0a6b3f391\",\"moduleSequenceNumber\":2214},{\"filename\":\"main.js\",\"url\":\"blob:file:///752cf0f4-48fb-4375-bba3-a085b88ff9b9\",\"moduleSequenceNumber\":3393}],\"dependents\":[],\"ramUsage\":7.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":6499,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class DataBase {\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9kYXRhQmFzZS9kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sUUFBUTtDQUFHIn0=\",\"filename\":\"/scripts/dataBase/database.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":1938,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList } from '/scripts/enums/enums.js';\\nexport class ServersList {\\n    servers;\\n    serversTest;\\n    ns;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.servers = this.getAllServers();\\n        this.serversTest = this.getAllServersTest();\\n    }\\n    get value() {\\n        return this.servers;\\n    }\\n    get hackable() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get ownedServer() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            if (this.ns.getServer(server).purchasedByPlayer) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList.filter((name) => name !== OwnServerList.HOME);\\n    }\\n    get hackableWithRoot() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndRamAndNoMoney() {\\n        let serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax === 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        serverList = serverList.filter((server) => !server.includes(OwnServerList.MONEY_SERVER) &&\\n            !server.includes(OwnServerList.FARM_SERVER) &&\\n            !server.includes(OwnServerList.HOME));\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoney() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoneyAndRam() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get documentsLit() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'lit');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get documentsCct() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'cct');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get allFiles() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server);\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get hasNoBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (!serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hasBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    getAllServers(rootHost = 'home') {\\n        this.ns.disableLog('ALL');\\n        let pendingScan = [rootHost];\\n        const list = new Set(pendingScan);\\n        while (pendingScan.length) {\\n            const hostname = pendingScan.shift();\\n            list.add(hostname);\\n            pendingScan.push(...this.ns.scan(hostname));\\n            pendingScan = pendingScan.filter((host) => !list.has(host));\\n        }\\n        const finalList = [...list].sort((a, b) => this.ns.getServerRequiredHackingLevel(a) -\\n            this.ns.getServerRequiredHackingLevel(b));\\n        return [...finalList];\\n    }\\n    getAllServersTest() {\\n        const servers = this.getAllServers();\\n        const list = [];\\n        for (const server of servers) {\\n            list.push({ name: server, ...this.ns.getServer(server) });\\n        }\\n        return [...list];\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyc2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jbGFzc2VzL3NlcnZlcnNsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUt4RCxNQUFNLE9BQU8sV0FBVztJQUNmLE9BQU8sQ0FBVztJQUNuQixXQUFXLENBQWE7SUFDdkIsRUFBRSxDQUFDO0lBRVgsWUFBbUIsRUFBTTtRQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2xCLE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDOUQsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsV0FBVztRQUNyQixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ2hELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDMUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXRELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWMsRUFDekI7Z0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsZ0NBQWdDO1FBQzFDLElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUM5QixNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUNDLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ3pELFdBQVcsQ0FBQyxjQUFjO2dCQUMxQixXQUFXLENBQUMsUUFBUSxLQUFLLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNyQjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNWLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBQzVDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQzNDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQ3JDLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyx3QkFBd0I7UUFDbEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUN2QjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyw4QkFBOEI7UUFDeEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3JCO2dCQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFbEQsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFeEMsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDbEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVqQyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUNoQztTQUNEO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN2QixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ25DLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDckIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxRQUFRLEdBQUcsTUFBTTtRQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLFdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUMxQixNQUFNLFFBQVEsR0FBVyxXQUFXLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuQixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM1QyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMvQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQ3pDLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ08saUJBQWlCO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBZSxFQUFFLENBQUM7UUFDNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0NBQ0QifQ==\",\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":6519,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var OwnServerList;\\n(function (OwnServerList) {\\n    OwnServerList[\\\"HOME\\\"] = \\\"home\\\";\\n    OwnServerList[\\\"FARM_SERVER\\\"] = \\\"farmServer\\\";\\n    OwnServerList[\\\"MONEY_SERVER\\\"] = \\\"moneyServer\\\";\\n    OwnServerList[\\\"TARGET_EXP_FARM_SERVERS\\\"] = \\\"joesguns\\\";\\n})(OwnServerList || (OwnServerList = {}));\\nexport var HacknetNode;\\n(function (HacknetNode) {\\n    HacknetNode[HacknetNode[\\\"MAX_NUMBER\\\"] = 9] = \\\"MAX_NUMBER\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_RAM\\\"] = 64] = \\\"MAX_RAM\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_LVL\\\"] = 200] = \\\"MAX_LVL\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_CORES\\\"] = 16] = \\\"MAX_CORES\\\";\\n})(HacknetNode || (HacknetNode = {}));\\nexport var ScriptPath;\\n(function (ScriptPath) {\\n    ScriptPath[\\\"EXP_FARM\\\"] = \\\"/scripts/executingScripts/expFarm.js\\\";\\n    ScriptPath[\\\"HACK_NODES\\\"] = \\\"/scripts/executingScripts/hackNodes.js\\\";\\n    ScriptPath[\\\"MONEY_FARM\\\"] = \\\"/scripts/executingScripts/moneyFarm.js\\\";\\n    ScriptPath[\\\"RUN_EXP_SERVERS\\\"] = \\\"/scripts/executingScripts/runExpFarmServers.js\\\";\\n    ScriptPath[\\\"RUN_HOME_SERVER\\\"] = \\\"/scripts/executingScripts/runHomeServer.js\\\";\\n    ScriptPath[\\\"RUN_MONEY_SERVERS\\\"] = \\\"/scripts/executingScripts/runMoneyServers.js\\\";\\n    ScriptPath[\\\"RUN_REMOTE_ON_TARGET\\\"] = \\\"/scripts/executingScripts/runRemoteOnTarget.js\\\";\\n    ScriptPath[\\\"UPGRADE_SERVERS\\\"] = \\\"/scripts/executingScripts/upgradeServers.js\\\";\\n})(ScriptPath || (ScriptPath = {}));\\nexport var ToastVariant;\\n(function (ToastVariant) {\\n    ToastVariant[\\\"SUCCESS\\\"] = \\\"success\\\";\\n    ToastVariant[\\\"WARNING\\\"] = \\\"warning\\\";\\n    ToastVariant[\\\"ERROR\\\"] = \\\"error\\\";\\n    ToastVariant[\\\"INFO\\\"] = \\\"info\\\";\\n})(ToastVariant || (ToastVariant = {}));\\nexport var CrimeType;\\n(function (CrimeType) {\\n    CrimeType[\\\"shoplift\\\"] = \\\"Shoplift\\\";\\n    CrimeType[\\\"robStore\\\"] = \\\"Rob Store\\\";\\n    CrimeType[\\\"mug\\\"] = \\\"Mug\\\";\\n    CrimeType[\\\"larceny\\\"] = \\\"Larceny\\\";\\n    CrimeType[\\\"dealDrugs\\\"] = \\\"Deal Drugs\\\";\\n    CrimeType[\\\"bondForgery\\\"] = \\\"Bond Forgery\\\";\\n    CrimeType[\\\"traffickArms\\\"] = \\\"Traffick Arms\\\";\\n    CrimeType[\\\"homicide\\\"] = \\\"Homicide\\\";\\n    CrimeType[\\\"grandTheftAuto\\\"] = \\\"Grand Theft Auto\\\";\\n    CrimeType[\\\"kidnap\\\"] = \\\"Kidnap\\\";\\n    CrimeType[\\\"assassination\\\"] = \\\"Assassination\\\";\\n    CrimeType[\\\"heist\\\"] = \\\"Heist\\\";\\n})(CrimeType || (CrimeType = {}));\\nexport var FactionWorkType;\\n(function (FactionWorkType) {\\n    FactionWorkType[\\\"hacking\\\"] = \\\"hacking\\\";\\n    FactionWorkType[\\\"field\\\"] = \\\"field\\\";\\n    FactionWorkType[\\\"security\\\"] = \\\"security\\\";\\n})(FactionWorkType || (FactionWorkType = {}));\\nexport var UniversityClassType;\\n(function (UniversityClassType) {\\n    UniversityClassType[\\\"computerScience\\\"] = \\\"Computer Science\\\";\\n    UniversityClassType[\\\"dataStructures\\\"] = \\\"Data Structures\\\";\\n    UniversityClassType[\\\"networks\\\"] = \\\"Networks\\\";\\n    UniversityClassType[\\\"algorithms\\\"] = \\\"Algorithms\\\";\\n    UniversityClassType[\\\"management\\\"] = \\\"Management\\\";\\n    UniversityClassType[\\\"leadership\\\"] = \\\"Leadership\\\";\\n})(UniversityClassType || (UniversityClassType = {}));\\nexport var GymType;\\n(function (GymType) {\\n    GymType[\\\"strength\\\"] = \\\"str\\\";\\n    GymType[\\\"defense\\\"] = \\\"def\\\";\\n    GymType[\\\"dexterity\\\"] = \\\"dex\\\";\\n    GymType[\\\"agility\\\"] = \\\"agi\\\";\\n})(GymType || (GymType = {}));\\nexport var JobName;\\n(function (JobName) {\\n    JobName[\\\"software0\\\"] = \\\"Software Engineering Intern\\\";\\n    JobName[\\\"software1\\\"] = \\\"Junior Software Engineer\\\";\\n    JobName[\\\"software2\\\"] = \\\"Senior Software Engineer\\\";\\n    JobName[\\\"software3\\\"] = \\\"Lead Software Developer\\\";\\n    JobName[\\\"software4\\\"] = \\\"Head of Software\\\";\\n    JobName[\\\"software5\\\"] = \\\"Head of Engineering\\\";\\n    JobName[\\\"software6\\\"] = \\\"Vice President of Technology\\\";\\n    JobName[\\\"software7\\\"] = \\\"Chief Technology Officer\\\";\\n    JobName[\\\"IT0\\\"] = \\\"IT Intern\\\";\\n    JobName[\\\"IT1\\\"] = \\\"IT Analyst\\\";\\n    JobName[\\\"IT2\\\"] = \\\"IT Manager\\\";\\n    JobName[\\\"IT3\\\"] = \\\"Systems Administrator\\\";\\n    JobName[\\\"securityEng\\\"] = \\\"Security Engineer\\\";\\n    JobName[\\\"networkEng0\\\"] = \\\"Network Engineer\\\";\\n    JobName[\\\"networkEng1\\\"] = \\\"Network Administrator\\\";\\n    JobName[\\\"business0\\\"] = \\\"Business Intern\\\";\\n    JobName[\\\"business1\\\"] = \\\"Business Analyst\\\";\\n    JobName[\\\"business2\\\"] = \\\"Business Manager\\\";\\n    JobName[\\\"business3\\\"] = \\\"Operations Manager\\\";\\n    JobName[\\\"business4\\\"] = \\\"Chief Financial Officer\\\";\\n    JobName[\\\"business5\\\"] = \\\"Chief Executive Officer\\\";\\n    JobName[\\\"security0\\\"] = \\\"Police Officer\\\";\\n    JobName[\\\"security1\\\"] = \\\"Police Chief\\\";\\n    JobName[\\\"security2\\\"] = \\\"Security Guard\\\";\\n    JobName[\\\"security3\\\"] = \\\"Security Officer\\\";\\n    JobName[\\\"security4\\\"] = \\\"Security Supervisor\\\";\\n    JobName[\\\"security5\\\"] = \\\"Head of Security\\\";\\n    JobName[\\\"agent0\\\"] = \\\"Field Agent\\\";\\n    JobName[\\\"agent1\\\"] = \\\"Secret Agent\\\";\\n    JobName[\\\"agent2\\\"] = \\\"Special Operative\\\";\\n    JobName[\\\"waiter\\\"] = \\\"Waiter\\\";\\n    JobName[\\\"employee\\\"] = \\\"Employee\\\";\\n    JobName[\\\"softwareConsult0\\\"] = \\\"Software Consultant\\\";\\n    JobName[\\\"softwareConsult1\\\"] = \\\"Senior Software Consultant\\\";\\n    JobName[\\\"businessConsult0\\\"] = \\\"Business Consultant\\\";\\n    JobName[\\\"businessConsult1\\\"] = \\\"Senior Business Consultant\\\";\\n    JobName[\\\"waiterPT\\\"] = \\\"Part-time Waiter\\\";\\n    JobName[\\\"employeePT\\\"] = \\\"Part-time Employee\\\";\\n})(JobName || (JobName = {}));\\nexport var CityName;\\n(function (CityName) {\\n    CityName[\\\"Aevum\\\"] = \\\"Aevum\\\";\\n    CityName[\\\"Chongqing\\\"] = \\\"Chongqing\\\";\\n    CityName[\\\"Sector12\\\"] = \\\"Sector-12\\\";\\n    CityName[\\\"NewTokyo\\\"] = \\\"New Tokyo\\\";\\n    CityName[\\\"Ishima\\\"] = \\\"Ishima\\\";\\n    CityName[\\\"Volhaven\\\"] = \\\"Volhaven\\\";\\n})(CityName || (CityName = {}));\\nexport var LocationName;\\n(function (LocationName) {\\n    LocationName[\\\"AevumAeroCorp\\\"] = \\\"AeroCorp\\\";\\n    LocationName[\\\"AevumBachmanAndAssociates\\\"] = \\\"Bachman & Associates\\\";\\n    LocationName[\\\"AevumClarkeIncorporated\\\"] = \\\"Clarke Incorporated\\\";\\n    LocationName[\\\"AevumCrushFitnessGym\\\"] = \\\"Crush Fitness Gym\\\";\\n    LocationName[\\\"AevumECorp\\\"] = \\\"ECorp\\\";\\n    LocationName[\\\"AevumFulcrumTechnologies\\\"] = \\\"Fulcrum Technologies\\\";\\n    LocationName[\\\"AevumGalacticCybersystems\\\"] = \\\"Galactic Cybersystems\\\";\\n    LocationName[\\\"AevumNetLinkTechnologies\\\"] = \\\"NetLink Technologies\\\";\\n    LocationName[\\\"AevumPolice\\\"] = \\\"Aevum Police Headquarters\\\";\\n    LocationName[\\\"AevumRhoConstruction\\\"] = \\\"Rho Construction\\\";\\n    LocationName[\\\"AevumSnapFitnessGym\\\"] = \\\"Snap Fitness Gym\\\";\\n    LocationName[\\\"AevumSummitUniversity\\\"] = \\\"Summit University\\\";\\n    LocationName[\\\"AevumWatchdogSecurity\\\"] = \\\"Watchdog Security\\\";\\n    LocationName[\\\"AevumCasino\\\"] = \\\"Iker Molina Casino\\\";\\n    LocationName[\\\"ChongqingKuaiGongInternational\\\"] = \\\"KuaiGong International\\\";\\n    LocationName[\\\"ChongqingSolarisSpaceSystems\\\"] = \\\"Solaris Space Systems\\\";\\n    LocationName[\\\"ChongqingChurchOfTheMachineGod\\\"] = \\\"Church of the Machine God\\\";\\n    LocationName[\\\"Sector12AlphaEnterprises\\\"] = \\\"Alpha Enterprises\\\";\\n    LocationName[\\\"Sector12BladeIndustries\\\"] = \\\"Blade Industries\\\";\\n    LocationName[\\\"Sector12CIA\\\"] = \\\"Central Intelligence Agency\\\";\\n    LocationName[\\\"Sector12CarmichaelSecurity\\\"] = \\\"Carmichael Security\\\";\\n    LocationName[\\\"Sector12CityHall\\\"] = \\\"Sector-12 City Hall\\\";\\n    LocationName[\\\"Sector12DeltaOne\\\"] = \\\"DeltaOne\\\";\\n    LocationName[\\\"Sector12FoodNStuff\\\"] = \\\"FoodNStuff\\\";\\n    LocationName[\\\"Sector12FourSigma\\\"] = \\\"Four Sigma\\\";\\n    LocationName[\\\"Sector12IcarusMicrosystems\\\"] = \\\"Icarus Microsystems\\\";\\n    LocationName[\\\"Sector12IronGym\\\"] = \\\"Iron Gym\\\";\\n    LocationName[\\\"Sector12JoesGuns\\\"] = \\\"Joe's Guns\\\";\\n    LocationName[\\\"Sector12MegaCorp\\\"] = \\\"MegaCorp\\\";\\n    LocationName[\\\"Sector12NSA\\\"] = \\\"National Security Agency\\\";\\n    LocationName[\\\"Sector12PowerhouseGym\\\"] = \\\"Powerhouse Gym\\\";\\n    LocationName[\\\"Sector12RothmanUniversity\\\"] = \\\"Rothman University\\\";\\n    LocationName[\\\"Sector12UniversalEnergy\\\"] = \\\"Universal Energy\\\";\\n    LocationName[\\\"NewTokyoDefComm\\\"] = \\\"DefComm\\\";\\n    LocationName[\\\"NewTokyoGlobalPharmaceuticals\\\"] = \\\"Global Pharmaceuticals\\\";\\n    LocationName[\\\"NewTokyoNoodleBar\\\"] = \\\"Noodle Bar\\\";\\n    LocationName[\\\"NewTokyoVitaLife\\\"] = \\\"VitaLife\\\";\\n    LocationName[\\\"NewTokyoArcade\\\"] = \\\"Arcade\\\";\\n    LocationName[\\\"IshimaNovaMedical\\\"] = \\\"Nova Medical\\\";\\n    LocationName[\\\"IshimaOmegaSoftware\\\"] = \\\"Omega Software\\\";\\n    LocationName[\\\"IshimaStormTechnologies\\\"] = \\\"Storm Technologies\\\";\\n    LocationName[\\\"IshimaGlitch\\\"] = \\\"0x6C1\\\";\\n    LocationName[\\\"VolhavenCompuTek\\\"] = \\\"CompuTek\\\";\\n    LocationName[\\\"VolhavenHeliosLabs\\\"] = \\\"Helios Labs\\\";\\n    LocationName[\\\"VolhavenLexoCorp\\\"] = \\\"LexoCorp\\\";\\n    LocationName[\\\"VolhavenMilleniumFitnessGym\\\"] = \\\"Millenium Fitness Gym\\\";\\n    LocationName[\\\"VolhavenNWO\\\"] = \\\"NWO\\\";\\n    LocationName[\\\"VolhavenOmniTekIncorporated\\\"] = \\\"OmniTek Incorporated\\\";\\n    LocationName[\\\"VolhavenOmniaCybersystems\\\"] = \\\"Omnia Cybersystems\\\";\\n    LocationName[\\\"VolhavenSysCoreSecurities\\\"] = \\\"SysCore Securities\\\";\\n    LocationName[\\\"VolhavenZBInstituteOfTechnology\\\"] = \\\"ZB Institute of Technology\\\";\\n    LocationName[\\\"Hospital\\\"] = \\\"Hospital\\\";\\n    LocationName[\\\"Slums\\\"] = \\\"The Slums\\\";\\n    LocationName[\\\"TravelAgency\\\"] = \\\"Travel Agency\\\";\\n    LocationName[\\\"WorldStockExchange\\\"] = \\\"World Stock Exchange\\\";\\n    LocationName[\\\"Void\\\"] = \\\"The Void\\\";\\n})(LocationName || (LocationName = {}));\\nexport const NSEnums = {\\n    CityName: CityName,\\n    CrimeType: CrimeType,\\n    FactionWorkType: FactionWorkType,\\n    GymType: GymType,\\n    JobName: JobName,\\n    LocationName: LocationName,\\n    ToastVariant: ToastVariant,\\n    UniversityClassType: UniversityClassType,\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9lbnVtcy9lbnVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxhQUtYO0FBTEQsV0FBWSxhQUFhO0lBQ3hCLDhCQUFhLENBQUE7SUFDYiwyQ0FBMEIsQ0FBQTtJQUMxQiw2Q0FBNEIsQ0FBQTtJQUM1QixxREFBb0MsQ0FBQTtBQUNyQyxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxXQUtYO0FBTEQsV0FBWSxXQUFXO0lBQ3RCLHlEQUFjLENBQUE7SUFDZCxvREFBWSxDQUFBO0lBQ1oscURBQWEsQ0FBQTtJQUNiLHdEQUFjLENBQUE7QUFDZixDQUFDLEVBTFcsV0FBVyxLQUFYLFdBQVcsUUFLdEI7QUFFRCxNQUFNLENBQU4sSUFBWSxVQVNYO0FBVEQsV0FBWSxVQUFVO0lBQ3JCLCtEQUFpRCxDQUFBO0lBQ2pELG1FQUFxRCxDQUFBO0lBQ3JELG1FQUFxRCxDQUFBO0lBQ3JELGdGQUFrRSxDQUFBO0lBQ2xFLDRFQUE4RCxDQUFBO0lBQzlELGdGQUFrRSxDQUFBO0lBQ2xFLHFGQUF1RSxDQUFBO0lBQ3ZFLDZFQUErRCxDQUFBO0FBQ2hFLENBQUMsRUFUVyxVQUFVLEtBQVYsVUFBVSxRQVNyQjtBQUVELE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdkIsbUNBQW1CLENBQUE7SUFDbkIsbUNBQW1CLENBQUE7SUFDbkIsK0JBQWUsQ0FBQTtJQUNmLDZCQUFhLENBQUE7QUFDZCxDQUFDLEVBTFcsWUFBWSxLQUFaLFlBQVksUUFLdkI7QUFFRCxNQUFNLENBQU4sSUFBWSxTQWFYO0FBYkQsV0FBWSxTQUFTO0lBQ3BCLGtDQUFxQixDQUFBO0lBQ3JCLG1DQUFzQixDQUFBO0lBQ3RCLHdCQUFXLENBQUE7SUFDWCxnQ0FBbUIsQ0FBQTtJQUNuQixxQ0FBd0IsQ0FBQTtJQUN4Qix5Q0FBNEIsQ0FBQTtJQUM1QiwyQ0FBOEIsQ0FBQTtJQUM5QixrQ0FBcUIsQ0FBQTtJQUNyQixnREFBbUMsQ0FBQTtJQUNuQyw4QkFBaUIsQ0FBQTtJQUNqQiw0Q0FBK0IsQ0FBQTtJQUMvQiw0QkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFiVyxTQUFTLEtBQVQsU0FBUyxRQWFwQjtBQUVELE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDMUIsc0NBQW1CLENBQUE7SUFDbkIsa0NBQWUsQ0FBQTtJQUNmLHdDQUFxQixDQUFBO0FBQ3RCLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQjtBQUVELE1BQU0sQ0FBTixJQUFZLG1CQU9YO0FBUEQsV0FBWSxtQkFBbUI7SUFDOUIsMkRBQW9DLENBQUE7SUFDcEMseURBQWtDLENBQUE7SUFDbEMsNENBQXFCLENBQUE7SUFDckIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7QUFDMUIsQ0FBQyxFQVBXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFPOUI7QUFFRCxNQUFNLENBQU4sSUFBWSxPQUtYO0FBTEQsV0FBWSxPQUFPO0lBQ2xCLDJCQUFnQixDQUFBO0lBQ2hCLDBCQUFlLENBQUE7SUFDZiw0QkFBaUIsQ0FBQTtJQUNqQiwwQkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFMVyxPQUFPLEtBQVAsT0FBTyxRQUtsQjtBQUVELE1BQU0sQ0FBTixJQUFZLE9BdUNYO0FBdkNELFdBQVksT0FBTztJQUNsQixvREFBeUMsQ0FBQTtJQUN6QyxpREFBc0MsQ0FBQTtJQUN0QyxpREFBc0MsQ0FBQTtJQUN0QyxnREFBcUMsQ0FBQTtJQUNyQyx5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyxxREFBMEMsQ0FBQTtJQUMxQyxpREFBc0MsQ0FBQTtJQUN0Qyw0QkFBaUIsQ0FBQTtJQUNqQiw2QkFBa0IsQ0FBQTtJQUNsQiw2QkFBa0IsQ0FBQTtJQUNsQix3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtJQUNqQywyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyx3Q0FBNkIsQ0FBQTtJQUM3Qix5Q0FBOEIsQ0FBQTtJQUM5Qix5Q0FBOEIsQ0FBQTtJQUM5QiwyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyxnREFBcUMsQ0FBQTtJQUNyQyx1Q0FBNEIsQ0FBQTtJQUM1QixxQ0FBMEIsQ0FBQTtJQUMxQix1Q0FBNEIsQ0FBQTtJQUM1Qix5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyx5Q0FBOEIsQ0FBQTtJQUM5QixpQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBdUIsQ0FBQTtJQUN2Qix1Q0FBNEIsQ0FBQTtJQUM1Qiw0QkFBaUIsQ0FBQTtJQUNqQixnQ0FBcUIsQ0FBQTtJQUNyQixtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyxtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyx3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtBQUNsQyxDQUFDLEVBdkNXLE9BQU8sS0FBUCxPQUFPLFFBdUNsQjtBQTJCRCxNQUFNLENBQU4sSUFBWSxRQU9YO0FBUEQsV0FBWSxRQUFRO0lBQ25CLDJCQUFlLENBQUE7SUFDZixtQ0FBdUIsQ0FBQTtJQUN2QixrQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBc0IsQ0FBQTtJQUN0Qiw2QkFBaUIsQ0FBQTtJQUNqQixpQ0FBcUIsQ0FBQTtBQUN0QixDQUFDLEVBUFcsUUFBUSxLQUFSLFFBQVEsUUFPbkI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQWdFWDtBQWhFRCxXQUFZLFlBQVk7SUFDdkIsMENBQTBCLENBQUE7SUFDMUIsa0VBQWtELENBQUE7SUFDbEQsK0RBQStDLENBQUE7SUFDL0MsMERBQTBDLENBQUE7SUFDMUMsb0NBQW9CLENBQUE7SUFDcEIsaUVBQWlELENBQUE7SUFDakQsbUVBQW1ELENBQUE7SUFDbkQsaUVBQWlELENBQUE7SUFDakQseURBQXlDLENBQUE7SUFDekMseURBQXlDLENBQUE7SUFDekMsd0RBQXdDLENBQUE7SUFDeEMsMkRBQTJDLENBQUE7SUFDM0MsMkRBQTJDLENBQUE7SUFDM0Msa0RBQWtDLENBQUE7SUFFbEMseUVBQXlELENBQUE7SUFDekQsc0VBQXNELENBQUE7SUFDdEQsNEVBQTRELENBQUE7SUFFNUQsOERBQThDLENBQUE7SUFDOUMsNERBQTRDLENBQUE7SUFDNUMsMkRBQTJDLENBQUE7SUFDM0Msa0VBQWtELENBQUE7SUFDbEQsd0RBQXdDLENBQUE7SUFDeEMsNkNBQTZCLENBQUE7SUFDN0IsaURBQWlDLENBQUE7SUFDakMsZ0RBQWdDLENBQUE7SUFDaEMsa0VBQWtELENBQUE7SUFDbEQsNENBQTRCLENBQUE7SUFDNUIsK0NBQStCLENBQUE7SUFDL0IsNkNBQTZCLENBQUE7SUFDN0Isd0RBQXdDLENBQUE7SUFDeEMsd0RBQXdDLENBQUE7SUFDeEMsZ0VBQWdELENBQUE7SUFDaEQsNERBQTRDLENBQUE7SUFFNUMsMkNBQTJCLENBQUE7SUFDM0Isd0VBQXdELENBQUE7SUFDeEQsZ0RBQWdDLENBQUE7SUFDaEMsNkNBQTZCLENBQUE7SUFDN0IseUNBQXlCLENBQUE7SUFFekIsa0RBQWtDLENBQUE7SUFDbEMsc0RBQXNDLENBQUE7SUFDdEMsOERBQThDLENBQUE7SUFDOUMsc0NBQXNCLENBQUE7SUFFdEIsNkNBQTZCLENBQUE7SUFDN0Isa0RBQWtDLENBQUE7SUFDbEMsNkNBQTZCLENBQUE7SUFDN0IscUVBQXFELENBQUE7SUFDckQsbUNBQW1CLENBQUE7SUFDbkIsb0VBQW9ELENBQUE7SUFDcEQsZ0VBQWdELENBQUE7SUFDaEQsZ0VBQWdELENBQUE7SUFDaEQsOEVBQThELENBQUE7SUFFOUQscUNBQXFCLENBQUE7SUFDckIsbUNBQW1CLENBQUE7SUFDbkIsOENBQThCLENBQUE7SUFDOUIsMkRBQTJDLENBQUE7SUFFM0MsaUNBQWlCLENBQUE7QUFDbEIsQ0FBQyxFQWhFVyxZQUFZLEtBQVosWUFBWSxRQWdFdkI7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDdEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsZUFBZSxFQUFFLGVBQWU7SUFDaEMsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsbUJBQW1CLEVBQUUsbUJBQW1CO0NBQy9CLENBQUMifQ==\",\"filename\":\"/scripts/enums/enums.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":6501,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///278175c9-67db-4600-b29e-4be85c82361e\",\"moduleSequenceNumber\":2010}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":1942,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const farmServers = [];\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n        farmServers.push(OwnServerList.FARM_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    const scriptName = ScriptPath.EXP_FARM;\\n    for (const farmServer of farmServers) {\\n        if (farmServer) {\\n            const threadsMax = Math.floor(ns.getServerMaxRam(farmServer) / ns.getScriptRam(scriptName));\\n            ns.scp(scriptName, farmServer);\\n            if (ns.scriptRunning(scriptName, farmServer)) {\\n                ns.scriptKill(scriptName, farmServer);\\n            }\\n            ns.exec(scriptName, farmServer, threadsMax, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuRXhwRmFybVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1bkV4cEZhcm1TZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUNqQyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUN6RTtRQUNELFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUUsWUFBWSxFQUFFLENBQUM7S0FDZjtJQUNELE1BQU0sVUFBVSxHQUFXLFVBQVUsQ0FBQyxRQUFRLENBQUM7SUFFL0MsS0FBSyxNQUFNLFVBQVUsSUFBSSxXQUFXLEVBQUU7UUFDckMsSUFBSSxVQUFVLEVBQUU7WUFDZixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUM1QixFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQzVELENBQUM7WUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUUvQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxFQUFFO2dCQUM3QyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN0QztZQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///576207f3-547d-486c-aebe-6019d91d6408\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"blob:file:///bb726e59-cdeb-467d-ab53-b04d1a79b9c7\",\"moduleSequenceNumber\":7216}],\"dependents\":[],\"ramUsage\":5.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":7216,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    const serverMaxRam = ns.getServerMaxRam(OwnServerList.HOME) - 64;\\n    const threadsPerTarget = serversHackable.length !== 0\\n        ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n        : 0;\\n    if (threadsPerTarget > 0) {\\n        if (ns.scriptRunning(ScriptPath.MONEY_FARM, OwnServerList.HOME)) {\\n            ns.scriptKill(ScriptPath.MONEY_FARM, OwnServerList.HOME);\\n        }\\n        for (const target of serversHackable) {\\n            ns.exec(ScriptPath.MONEY_FARM, OwnServerList.HOME, threadsPerTarget, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuSG9tZVNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvcnVuSG9tZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sT0FBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxNQUFNLGVBQWUsR0FBYSxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDbkUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7WUFDckMsRUFBRSxDQUFDLElBQUksQ0FDTixVQUFVLENBQUMsVUFBVSxFQUNyQixhQUFhLENBQUMsSUFBSSxFQUNsQixnQkFBZ0IsRUFDaEIsTUFBTSxDQUNOLENBQUM7U0FDRjtLQUNEO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///69b68930-cac3-4c57-a370-4bcbce951fc4\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///2d59add8-8d26-4951-975e-0ff24cc6fd45\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///8ee17e93-9019-48a0-8762-4ef49b718313\",\"moduleSequenceNumber\":6519},{\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"blob:file:///287bfdf9-a976-48ab-8749-5cad84ef48f5\",\"moduleSequenceNumber\":7214}],\"dependents\":[],\"ramUsage\":8.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":7214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const moneyServers = [];\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n        moneyServers.push(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    for (const moneyServer of moneyServers) {\\n        if (moneyServer) {\\n            const serverMaxRam = ns.getServerMaxRam(moneyServer);\\n            const threadsPerTarget = serversHackable.length !== 0\\n                ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n                : 0;\\n            ns.scp(ScriptPath.MONEY_FARM, moneyServer);\\n            if (threadsPerTarget !== 0) {\\n                if (ns.scriptRunning(ScriptPath.MONEY_FARM, moneyServer)) {\\n                    ns.scriptKill(ScriptPath.MONEY_FARM, moneyServer);\\n                }\\n                for (const target of serversHackable) {\\n                    ns.exec(ScriptPath.MONEY_FARM, moneyServer, threadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuTW9uZXlTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9ydW5Nb25leVNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxlQUFlLEdBQWEsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMxRTtRQUNELFlBQVksQ0FBQyxJQUFJLENBQ2hCLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FDMUQsQ0FBQztRQUNGLFlBQVksRUFBRSxDQUFDO0tBQ2Y7SUFFRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtRQUN2QyxJQUFJLFdBQVcsRUFBRTtZQUNoQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUMvRCxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRU4sRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzNDLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRTtvQkFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDdEU7YUFDRDtTQUNEO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///e8251568-cc3e-401f-bb81-a7f6b021997c\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///e99d5e4f-e173-4ef1-a017-cff88fe12e36\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///0b10178b-b3e8-4929-ae4b-0265535fb1a8\",\"moduleSequenceNumber\":6519},{\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"blob:file:///800a94bf-ecad-424d-aaea-1a95c0ffa131\",\"moduleSequenceNumber\":7215}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":7215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const DATATYPE = {\\n    GB: Intl.NumberFormat('de-de', {\\n        style: 'unit',\\n        unit: 'gigabyte',\\n    }),\\n};\\nexport const MONEY = Intl.NumberFormat('en-us', {\\n    style: 'currency',\\n    currency: 'USD',\\n    maximumFractionDigits: 4,\\n    notation: 'compact',\\n});\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2Zvcm1hdHMvZm9ybWF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdkIsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1FBQzlCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLFVBQVU7S0FDaEIsQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7SUFDL0MsS0FBSyxFQUFFLFVBQVU7SUFDakIsUUFBUSxFQUFFLEtBQUs7SUFDZixxQkFBcUIsRUFBRSxDQUFDO0lBQ3hCLFFBQVEsRUFBRSxTQUFTO0NBQ25CLENBQUMsQ0FBQyJ9\",\"filename\":\"/scripts/formats/formats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":1954,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const scriptName = ScriptPath.MONEY_FARM;\\n    const ramScriptNeeded = ns.getScriptRam(scriptName);\\n    const hackableServersWithMoney = servers.hackableWithRootAndMoneyAndRam;\\n    for (const server of hackableServersWithMoney) {\\n        const serverStats = ns.getServer(server);\\n        ns.scp(scriptName, server);\\n        if (ns.fileExists(scriptName, server)) {\\n            if (!ns.scriptRunning(scriptName, server)) {\\n                const maxNumberOfScripts = Math.floor(serverStats.maxRam / ramScriptNeeded);\\n                if (maxNumberOfScripts > 0) {\\n                    ns.exec(scriptName, server, maxNumberOfScripts, server);\\n                }\\n            }\\n        }\\n    }\\n    const hackableServersWitRam = servers.hackableWithRootAndRamAndNoMoney;\\n    for (const server of hackableServersWitRam) {\\n        ns.scriptKill(ScriptPath.MONEY_FARM, server);\\n        const serverStats = ns.getServer(server);\\n        let targets = ns.scan(server);\\n        targets = targets.filter((target) => target !== OwnServerList.HOME && ns.hasRootAccess(target));\\n        ns.scp(scriptName, server);\\n        const maxNumberTreadsPerTarget = Math.floor(serverStats.maxRam / ramScriptNeeded / targets.length);\\n        if (ns.fileExists(scriptName, server)) {\\n            for (const target of targets) {\\n                if (maxNumberTreadsPerTarget > 0) {\\n                    ns.exec(scriptName, server, maxNumberTreadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuUmVtb3RlT25UYXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1blJlbW90ZU9uVGFyZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDekMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwRCxNQUFNLHdCQUF3QixHQUM3QixPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDeEMsS0FBSyxNQUFNLE1BQU0sSUFBSSx3QkFBd0IsRUFBRTtRQUM5QyxNQUFNLFdBQVcsR0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTNCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ3BDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUNwQyxDQUFDO2dCQUVGLElBQUksa0JBQWtCLEdBQUcsQ0FBQyxFQUFFO29CQUMzQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3hEO2FBQ0Q7U0FDRDtLQUNEO0lBRUQsTUFBTSxxQkFBcUIsR0FDMUIsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0lBQzFDLEtBQUssTUFBTSxNQUFNLElBQUkscUJBQXFCLEVBQUU7UUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDdkIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQ3JFLENBQUM7UUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzQixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQzFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQ3JELENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ3RDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM3QixJQUFJLHdCQUF3QixHQUFHLENBQUMsRUFBRTtvQkFDakMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUM5RDthQUNEO1NBQ0Q7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///065e9ad6-d87b-4dae-8b21-e426936c1ef7\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///ca40210e-9e3b-4886-b5ad-20363c125c82\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///83969c78-2f06-4832-9133-55af246bdde9\",\"moduleSequenceNumber\":6519},{\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"blob:file:///4d86bbed-e26c-4e13-b493-608690cfd9ec\",\"moduleSequenceNumber\":10850}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":10850,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const startServer = ns.getHostname();\\n    const target = ns.args[0];\\n    const path = (target, serverName, serverList, ignore, isFound) => {\\n        ignore.push(serverName);\\n        const scanResults = ns.scan(serverName);\\n        for (const server of scanResults) {\\n            if (ignore.includes(server)) {\\n                continue;\\n            }\\n            if (server === target) {\\n                serverList.push(server);\\n                return [serverList, true];\\n            }\\n            serverList.push(server);\\n            [serverList, isFound] = path(target, server, serverList, ignore, isFound);\\n            if (isFound) {\\n                return [serverList, isFound];\\n            }\\n            serverList.pop();\\n        }\\n        return [serverList, false];\\n    };\\n    if (target === undefined) {\\n        ns.alert('Please provide target server');\\n        return;\\n    }\\n    const [results, isFound] = path(target, startServer, [], [], false);\\n    if (!isFound) {\\n        ns.alert('Server not found!');\\n    }\\n    else {\\n        ns.tprintf(results.join(' --> '));\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZFJvdXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvZmluZFJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFFNUMsTUFBTSxJQUFJLEdBQUcsQ0FDWixNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsVUFBb0IsRUFDcEIsTUFBZ0IsRUFDaEIsT0FBZ0IsRUFDTSxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxLQUFLLE1BQU0sTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUNqQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzVCLFNBQVM7YUFDVDtZQUNELElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMxQjtZQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxRSxJQUFJLE9BQU8sRUFBRTtnQkFDWixPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87S0FDUDtJQUVELE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQzlCO1NBQU07UUFDTixFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNsQztBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"blob:file:///93620721-2330-400e-a49e-9d6c4ef84302\",\"moduleSequenceNumber\":5665}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":5665,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    ns.tprintf(`Maximum GB :${DATATYPE.GB.format(ns.getPurchasedServerMaxRam())}`);\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const price = ns.getPurchasedServerCost(ram);\\n        ns.tprintf(`${i} -- Server ram: ${DATATYPE.GB.format(ram)} -- Price: ${MONEY.format(price)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdFNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2Nvc3RTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQ1QsZUFBZSxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxFQUFFLENBQ2xFLENBQUM7SUFFRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsT0FBTyxDQUNULEdBQUcsQ0FBQyxtQkFBbUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxDQUFDLE1BQU0sQ0FDdkUsS0FBSyxDQUNMLEVBQUUsQ0FDSCxDQUFDO0tBQ0Y7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///271d1364-8696-4999-af6f-d882cf0ada0a\",\"moduleSequenceNumber\":1954},{\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"blob:file:///c27d6efd-34ca-4dbb-9234-1605c3c37ef9\",\"moduleSequenceNumber\":2623}],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2623,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackableSevers = servers.hackable;\\n    const player = ns.getPlayer();\\n    const serverEXPList = [];\\n    for (const server of hackableSevers) {\\n        const serverStats = ns.getServer(server);\\n        const serverWeakenTime = Math.round(ns.formulas.hacking.weakenTime(serverStats, player) / 1000);\\n        const serverHackinExp = ns.formulas.hacking.hackExp(serverStats, player);\\n        const expPerSecond = parseFloat((serverHackinExp / serverWeakenTime).toFixed(5));\\n        serverEXPList.push({\\n            server: server,\\n            exp: serverHackinExp,\\n            weakenTime: serverWeakenTime,\\n            expPerSecond: expPerSecond,\\n        });\\n    }\\n    serverEXPList.sort((a, b) => b.expPerSecond - a.expPerSecond);\\n    for (const entry of serverEXPList) {\\n        ns.print(entry);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QmVzdFNlcnZlclRvRmFybUV4cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2dldEJlc3RTZXJ2ZXJUb0Zhcm1FeHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsTUFBTSxhQUFhLEdBS2IsRUFBRSxDQUFDO0lBRVQsS0FBSyxNQUFNLE1BQU0sSUFBSSxjQUFjLEVBQUU7UUFDcEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ2xDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUMxRCxDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQzlCLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUMvQyxDQUFDO1FBRUYsYUFBYSxDQUFDLElBQUksQ0FBQztZQUNsQixNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxlQUFlO1lBQ3BCLFVBQVUsRUFBRSxnQkFBZ0I7WUFDNUIsWUFBWSxFQUFFLFlBQVk7U0FDMUIsQ0FBQyxDQUFDO0tBQ0g7SUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsS0FBSyxNQUFNLEtBQUssSUFBSSxhQUFhLEVBQUU7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/getBestServerToFarmExp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":2168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nimport { MONEY, DATATYPE } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const ramList = {};\\n    let newServerName = '';\\n    let serverNumber = 0;\\n    const serverType = (await ns.prompt('What kind of a server you want to purchase?', {\\n        type: 'select',\\n        choices: [OwnServerList.FARM_SERVER, OwnServerList.MONEY_SERVER],\\n    }));\\n    if (serverType === OwnServerList.FARM_SERVER) {\\n        while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.FARM_SERVER + '-' + serverNumber.toString();\\n    }\\n    if (serverType === OwnServerList.MONEY_SERVER) {\\n        while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.MONEY_SERVER + '-' + serverNumber.toString();\\n    }\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const cost = ns.getPurchasedServerCost(ram);\\n        ramList[DATATYPE.GB.format(ram) + ' - ' + MONEY.format(cost)] = Math.pow(2, i);\\n    }\\n    const serverRam = (await ns.prompt('How much ram do you want to choose', {\\n        type: 'select',\\n        choices: [...Object.keys(ramList)],\\n    }));\\n    const buy = (await ns.prompt(`Do you want to buy a ${newServerName} with ${DATATYPE.GB.format(ramList[serverRam])}. It will cost ${MONEY.format(ns.getPurchasedServerCost(ramList[serverRam]))}!`));\\n    if (buy) {\\n        ns.purchaseServer(newServerName, ramList[serverRam]);\\n        if (serverType === OwnServerList.MONEY_SERVER) {\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n        }\\n        if (serverType === OwnServerList.FARM_SERVER) {\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2VTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9wdXJjaGFzZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBMkIsRUFBRSxDQUFDO0lBQzNDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsTUFBTSxVQUFVLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzFDLDZDQUE2QyxFQUM3QztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDO0tBQ2hFLENBQ0QsQ0FBVyxDQUFDO0lBRWIsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFdBQVcsRUFBRTtRQUM3QyxPQUNDLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ3pFO1lBQ0QsWUFBWSxFQUFFLENBQUM7U0FDZjtRQUNELGFBQWEsR0FBRyxhQUFhLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDMUU7SUFFRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsWUFBWSxFQUFFO1FBQzlDLE9BQ0MsRUFBRSxDQUFDLFlBQVksQ0FDZCxhQUFhLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQzFELEVBQ0E7WUFDRCxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMzRTtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3ZFLENBQUMsRUFDRCxDQUFDLENBQ0QsQ0FBQztLQUNGO0lBRUQsTUFBTSxTQUFTLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3pDLG9DQUFvQyxFQUNwQztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xDLENBQ0QsQ0FBVyxDQUFDO0lBRWIsTUFBTSxHQUFHLEdBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3BDLHdCQUF3QixhQUFhLFNBQVMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQy9ELE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FDbEIsa0JBQWtCLEtBQUssQ0FBQyxNQUFNLENBQzlCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDN0MsR0FBRyxDQUNKLENBQVksQ0FBQztJQUVkLElBQUksR0FBRyxFQUFFO1FBQ1IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFlBQVksRUFBRTtZQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzdDLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztTQUNGO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///fc676ab7-7722-4b4a-8f69-9bbaf54cd5ce\",\"moduleSequenceNumber\":47},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///b992566d-23ec-4ff7-a2ad-2b0eb962b477\",\"moduleSequenceNumber\":41},{\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"blob:file:///1db0d249-232c-460c-9531-ea8543120027\",\"moduleSequenceNumber\":198}],\"dependents\":[],\"ramUsage\":5.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":6515,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns).serversTest;\\n    for (const server of servers) {\\n        ns.tprintf(JSON.stringify(server));\\n        ns.tprintf('\\\\n');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdDEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy90ZXN0MS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDaEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/test1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":6517,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const divideSymbol = '_';\\n    const func = ns.args[0] ? ns.args[0] : 0;\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackable;\\n    let count = 1;\\n    switch (func) {\\n        case 0:\\n            for (const server of serversHackable) {\\n                printing(server);\\n                count++;\\n            }\\n            break;\\n        case 1:\\n            for (const server of servers.value) {\\n                printing(server);\\n                count++;\\n            }\\n    }\\n    function dash(minLength, length) {\\n        const diff = minLength - length;\\n        let dashString = '';\\n        for (let i = 0; i < diff; i++) {\\n            dashString = dashString + ' ';\\n        }\\n        dashString = dashString + divideSymbol;\\n        return dashString;\\n    }\\n    function printing(server) {\\n        const serverStats = ns.getServer(server);\\n        const rootAccess = serverStats.hasAdminRights ? 'YES' : 'NO ';\\n        const backdoor = serverStats.backdoorInstalled ? 'YES' : 'NO ';\\n        const dashNumber = dash(2, count.toString().length);\\n        const dashLvl = dash(4, serverStats.requiredHackingSkill.toString().length);\\n        const dashName = dash(20, server.length);\\n        const dashRam = dash(8, serverStats.maxRam.toString().length);\\n        ns.tprintf(`${count} ${dashNumber} Name: ${server} ${dashName} Lvl: ${serverStats.requiredHackingSkill} ${dashLvl} root: ${rootAccess} ${divideSymbol} backD: ${backdoor} ${divideSymbol} Ports: ${serverStats.openPortCount}/${serverStats.numOpenPortsRequired} ${divideSymbol} ${DATATYPE.GB.format(serverStats.maxRam)} ${dashRam} ${MONEY.format(serverStats.moneyMax)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFNlcnZlckhhY2thYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvbGlzdFNlcnZlckhhY2thYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUVkLFFBQVEsSUFBSSxFQUFFO1FBQ2IsS0FBSyxDQUFDO1lBQ0wsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7Z0JBQ3JDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtZQUNELE1BQU07UUFDUCxLQUFLLENBQUM7WUFDTCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ25DLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtLQUNGO0lBRUQsU0FBUyxJQUFJLENBQUMsU0FBaUIsRUFBRSxNQUFjO1FBQzlDLE1BQU0sSUFBSSxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDaEMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsVUFBVSxHQUFHLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDOUI7UUFDRCxVQUFVLEdBQUcsVUFBVSxHQUFHLFlBQVksQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsU0FBUyxRQUFRLENBQUMsTUFBYztRQUMvQixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzlELE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELEVBQUUsQ0FBQyxPQUFPLENBQ1QsR0FBRyxLQUFLLElBQUksVUFBVSxVQUFVLE1BQU0sSUFBSSxRQUFRLFNBQ2pELFdBQVcsQ0FBQyxvQkFDYixJQUFJLE9BQU8sVUFBVSxVQUFVLElBQUksWUFBWSxXQUFXLFFBQVEsSUFBSSxZQUFZLFdBQ2pGLFdBQVcsQ0FBQyxhQUNiLElBQ0MsV0FBVyxDQUFDLG9CQUNiLElBQUksWUFBWSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUNyQyxXQUFXLENBQUMsTUFBTSxDQUNsQixJQUFJLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUNwRCxDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///e0124261-a92d-49f3-9752-fd3da0b702d0\",\"moduleSequenceNumber\":1954},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///658b3388-9f99-46a9-a15a-93d71bfadb65\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///250d20ae-b1b5-4568-86e0-ff8933346a71\",\"moduleSequenceNumber\":6519},{\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"blob:file:///0e019a81-71df-440e-bd2f-c069df079397\",\"moduleSequenceNumber\":7014}],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":7014,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NSEnums } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    ns.tprint('in Gang: ', ns.gang.inGang());\\n    ns.tprint('create Gang: ', ns.gang.createGang(NSEnums.LocationName.Sector12FoodNStuff));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2dhbmdzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWxELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxNQUFNLENBQ1IsZUFBZSxFQUNmLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FDM0QsQ0FBQztBQUNILENBQUMifQ==\",\"filename\":\"/scripts/gangs/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":55,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        const ownServers = new ServersList(ns).ownedServer;\\n        const player = ns.getPlayer();\\n        for (const server of ownServers) {\\n            const actRam = ns.getServerMaxRam(server);\\n            let exponent = Math.log(actRam) / Math.log(2);\\n            if (exponent < 20) {\\n                exponent++;\\n                let cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                while (cost < player.money && exponent < 20) {\\n                    exponent++;\\n                    cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                }\\n                cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                if (cost < player.money) {\\n                    ns.upgradePurchasedServer(server, 2 ** exponent);\\n                    if (server.includes(OwnServerList.MONEY_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n                    }\\n                    if (server.includes(OwnServerList.FARM_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n                    }\\n                }\\n            }\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3VwZ3JhZGVTZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBYSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDN0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTlCLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksUUFBUSxHQUFHLEVBQUUsRUFBRTtnQkFDbEIsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRW5FLE9BQU8sSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksUUFBUSxHQUFHLEVBQUUsRUFBRTtvQkFDNUMsUUFBUSxFQUFFLENBQUM7b0JBQ1gsSUFBSSxHQUFHLEVBQUUsQ0FBQyw2QkFBNkIsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO2lCQUMvRDtnQkFFRCxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRS9ELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3hCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO29CQUNqRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUNoRCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQzFEO29CQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEVBQUU7d0JBQy9DLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztxQkFDRjtpQkFDRDthQUNEO1NBQ0Q7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///92a86fe2-1807-462a-8096-bbe1b6f94fc0\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///579c6d52-a8b2-408d-bffc-8785b865f405\",\"moduleSequenceNumber\":6501},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///9b6f826a-304f-4e6d-896e-ef3c02ee33e2\",\"moduleSequenceNumber\":6519},{\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"blob:file:///8df9baa1-0990-4e76-bf58-95ec29faa822\",\"moduleSequenceNumber\":11441}],\"dependents\":[],\"ramUsage\":6.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":11441,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"moneyServer-0\",\"moneyServer-1\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"57.6.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":46518471533,\"moneyMax\":1162961788325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1056,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"90.8.8.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56639120748,\"moneyMax\":1415978018700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1141,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"69.4.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":17174910103,\"moneyMax\":429372752575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":995,\"serverGrowth\":75}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"70.0.4.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":10177230603,\"moneyMax\":254430765075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":956,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"39.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":38054929771,\"moneyMax\":951373244275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1100,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705891.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[126,[1,2,3,5,7,9,10,12,14,15]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"32.4.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":22937991840,\"moneyMax\":573449796000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1173,\"serverGrowth\":51}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"25.0.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":19730541273,\"moneyMax\":493263531825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":975,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"97.7.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":66,\"minDifficulty\":22,\"moneyAvailable\":21491806127,\"moneyMax\":537295153175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1119,\"serverGrowth\":95}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"62.3.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":24815635449,\"moneyMax\":620390886225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":91}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"66.8.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":1712248292,\"moneyMax\":42806207300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1154,\"serverGrowth\":86}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"70.9.7.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1429,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"3.6.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1051579025,\"moneyMax\":26289475625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-585805.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[146,168,83,100,156,75,33,158,91,132,161,140,82,119,160,79,101,52,171,188,198,127,144,40,19,125,95,37,182],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"30.7.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":874471596,\"moneyMax\":21861789900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"32.6.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":878835275,\"moneyMax\":21970881875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":917,\"serverGrowth\":60}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"84.1.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":689602548,\"moneyMax\":17240063700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"92.8.7.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":791414517,\"moneyMax\":19785362925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":887,\"serverGrowth\":62}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"45.6.4.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":938276876,\"moneyMax\":23456921900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":92}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-928842-Aevum.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[1],[7,2],[5,2,4],[4,8,7,3],[9,4,9,5,5],[6,5,9,4,4,6],[4,7,8,5,6,1,6],[1,2,7,8,3,7,6,5],[3,7,1,8,3,8,9,8,6],[4,9,6,7,9,8,8,8,9,3]],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"91.8.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1113465066,\"moneyMax\":27836626650,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":86}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"70.7.4.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"fulcrumtech\",\"stormtech\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":875750264,\"moneyMax\":21893756600,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":80}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-273450.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"19571\",-13],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"61.2.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":632286598,\"moneyMax\":15807164950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":80}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"81.8.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":879959213,\"moneyMax\":21998980325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":943,\"serverGrowth\":71}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"41.6.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":796813202,\"moneyMax\":19920330050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":847,\"serverGrowth\":85}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-14659.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[24,[1,2,3,4,5,7,9,10,11,13]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"31.9.1.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1034594507,\"moneyMax\":25864862675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":851,\"serverGrowth\":65}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-736442.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD CACHE VIRUS LOGIN FLASH\",9],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"14.0.4.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":917601481,\"moneyMax\":22940037025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":913,\"serverGrowth\":61}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"62.4.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":954618354,\"moneyMax\":23865458850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":801,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"67.1.9.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":886549475,\"moneyMax\":22163736875,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-590564.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[2,9],[5,10],[17,20],[24,25],[9,18],[18,20],[6,7]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"90.0.8.2\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":761551044,\"moneyMax\":19038776100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":761,\"serverGrowth\":70}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"50.5.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"icarus\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1515921895,\"moneyMax\":37898047375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":860,\"serverGrowth\":55}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"16.1.7.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1513247683,\"moneyMax\":37831192075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":85}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"87.8.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1231429780,\"moneyMax\":30785744500,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":73}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"53.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1334459175,\"moneyMax\":33361479375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":807,\"serverGrowth\":79}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"66.9.6.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1056607383,\"moneyMax\":26415184575,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":806,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-409353.cct\",\"type\":\"Array Jumping Game II\",\"data\":[0,1,3,4,7,2,4,3,2,5,1,2,6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"89.2.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3359,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///8b26e74c-c0b0-4bc6-a5b2-5f230f8bc12e\",\"moduleSequenceNumber\":12872}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":12872,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":711237118,\"moneyMax\":17780927950,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":654,\"serverGrowth\":60}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"25.3.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,26,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8776.900006875003,\"onlineMoneyMade\":0,\"onlineRunningTime\":9349.809999998974,\"pid\":1879,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///0149d960-314d-4cf5-9d29-ff24471a879b\",\"moduleSequenceNumber\":5376}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":5376,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":19.23425,\"minDifficulty\":16,\"moneyAvailable\":26.546312217509502,\"moneyMax\":13838714775,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":44}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"63.9.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,0,53]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2204.84187,\"onlineMoneyMade\":0,\"onlineRunningTime\":2668.209999999765,\"pid\":2938,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///0742c075-59a4-422d-96f7-7e7a05381492\",\"moduleSequenceNumber\":10855}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":10855,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":59.35,\"minDifficulty\":21,\"moneyAvailable\":683497844,\"moneyMax\":17087446100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":585,\"serverGrowth\":50}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-529056-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,14],[24,26],[25,34],[2,10],[11,18],[12,16],[11,14],[9,10],[2,11],[22,27],[8,10],[3,5],[11,13],[22,30],[23,26],[9,18],[21,26],[4,6],[11,20],[24,33]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"88.9.2.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,18,30]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2496.0474,\"onlineMoneyMade\":0,\"onlineRunningTime\":11993.610000008493,\"pid\":1556,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3d101d01-dc8c-4694-b26c-62138a409fa8\",\"moduleSequenceNumber\":3347}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":3347,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"summit-uni\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":49.384,\"minDifficulty\":27,\"moneyAvailable\":5453871450,\"moneyMax\":5453871450,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":420,\"serverGrowth\":46}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-70551.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"NxdBBBBBONxdBBGEU3E5U3EAzxN5CQAzxRN5CQAzxRexRexRRRICAgcZEEfHiOHiOHidulM76Aqere76Aqere760D0\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"95.3.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[189151404,52,286,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17463.664968750003,\"onlineMoneyMade\":189151404,\"onlineRunningTime\":12383.61000000991,\"pid\":1220,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///8aebe3e4-b954-49de-b56f-8f9e60a03b83\",\"moduleSequenceNumber\":3035}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":3035,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":85.472,\"minDifficulty\":17,\"moneyAvailable\":11408039.562830336,\"moneyMax\":5123065725,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":390,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504433.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[2,9],[0,9],[1,6],[6,8],[7,9],[4,6],[3,4],[4,9],[3,5],[0,6],[5,9],[8,9],[3,7]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"77.8.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":844284456,\"moneyMax\":21107111400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":764,\"serverGrowth\":84}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"62.4.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,30,54]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3300.3293400000007,\"onlineMoneyMade\":0,\"onlineRunningTime\":11780.610000007719,\"pid\":1713,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78c09fb2-76dc-4c86-96f3-21ce14f8d7a6\",\"moduleSequenceNumber\":3531}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":3531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"the-hub\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19.024,\"minDifficulty\":19,\"moneyAvailable\":6.03104592023816,\"moneyMax\":7676727950,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":434,\"serverGrowth\":47}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"4.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":574386579,\"moneyMax\":14359664475,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":588,\"serverGrowth\":60}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"63.8.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[161466114,12,36,48]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3999.7426218750015,\"onlineMoneyMade\":161466114,\"onlineRunningTime\":12113.610000008928,\"pid\":1477,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e98d6915-4002-4a91-8b73-f631edeb21df\",\"moduleSequenceNumber\":3256}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":3256,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":24.830249999999996,\"minDifficulty\":20,\"moneyAvailable\":13271318308,\"moneyMax\":13380217150,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":414,\"serverGrowth\":49}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"70.2.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[2145510,6,90,84]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4719.089615625002,\"onlineMoneyMade\":2145510,\"onlineRunningTime\":13503.210000013984,\"pid\":741,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///06613d0e-fdc3-4b63-a784-c6cf0a4671ae\",\"moduleSequenceNumber\":1605}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///06613d0e-fdc3-4b63-a784-c6cf0a4671ae\",\"moduleSequenceNumber\":1605}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":1605,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":35,\"hackDifficulty\":65.58912500000001,\"minDifficulty\":12,\"moneyAvailable\":4374430050,\"moneyMax\":4374430050,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":315,\"serverGrowth\":54}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"0.9.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":75.928,\"minDifficulty\":20,\"moneyAvailable\":5522269225,\"moneyMax\":5522269225,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":340,\"serverGrowth\":53}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"59.3.9.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,78,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7886.816437499999,\"onlineMoneyMade\":0,\"onlineRunningTime\":12353.610000009801,\"pid\":1285,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ac02f6c0-c6bc-483d-8bf6-4cf46d7da5db\",\"moduleSequenceNumber\":3080}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":3080,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":28.46825,\"minDifficulty\":22,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":393,\"serverGrowth\":55}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"20.2.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":58.712,\"minDifficulty\":17,\"moneyAvailable\":1990131175,\"moneyMax\":1990131175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":283,\"serverGrowth\":44}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"81.7.0.5\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[204869,695,738,165]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7115.179561875197,\"onlineMoneyMade\":204869,\"onlineRunningTime\":13503.210000013984,\"pid\":727,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///388289ca-b89b-4b7d-aef4-85827d4c6d9f\",\"moduleSequenceNumber\":75}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///388289ca-b89b-4b7d-aef4-85827d4c6d9f\",\"moduleSequenceNumber\":75}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":75,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.4639999999999995,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"83.8.7.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,96,3870,2220]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70652.00834999913,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":728,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7b57be5e-3ec3-4864-8ab1-bdc0e3b18807\",\"moduleSequenceNumber\":76}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7b57be5e-3ec3-4864-8ab1-bdc0e3b18807\",\"moduleSequenceNumber\":76}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":21384430.083233804,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"31.9.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[2899800,180,3288,1794]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59454.46237499913,\"onlineMoneyMade\":2899800,\"onlineRunningTime\":13503.210000013984,\"pid\":729,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///9bf8d207-fdd6-4acf-939a-4f09c8037038\",\"moduleSequenceNumber\":77}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///9bf8d207-fdd6-4acf-939a-4f09c8037038\",\"moduleSequenceNumber\":77}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":19783009.0860874,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"8.3.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[6230766,282,2664,1380]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59887.80393749974,\"onlineMoneyMade\":6230766,\"onlineRunningTime\":13503.210000013984,\"pid\":730,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///135c7b2f-2e19-4fdc-9eb3-668db45f8466\",\"moduleSequenceNumber\":78}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///135c7b2f-2e19-4fdc-9eb3-668db45f8466\",\"moduleSequenceNumber\":78}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":48.444,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"98.8.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[17700332,156,1443,806]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46663.6639218748,\"onlineMoneyMade\":17700332,\"onlineRunningTime\":13503.210000013984,\"pid\":735,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///50c9ae1f-16e4-4d23-bd35-e00ebe4cf916\",\"moduleSequenceNumber\":79}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///50c9ae1f-16e4-4d23-bd35-e00ebe4cf916\",\"moduleSequenceNumber\":79}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":79,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":33.427375000000005,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-56894.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"238147137\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"22.2.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[4435530,192,1818,930]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48854.92775624968,\"onlineMoneyMade\":4435530,\"onlineRunningTime\":13503.210000013984,\"pid\":731,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///fe378a95-dd81-4f86-b1ee-77e54fe70181\",\"moduleSequenceNumber\":80}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///fe378a95-dd81-4f86-b1ee-77e54fe70181\",\"moduleSequenceNumber\":80}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":80,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"phantasy\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":42.368,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-995570-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[4,14],[14,19],[17,20],[14,20],[15,19],[19,26],[12,15],[2,8],[15,24],[10,19],[18,25],[3,11],[17,18],[22,24],[13,21],[4,9],[17,23],[14,23],[3,4]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-434886.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[42,193,57,41,108,35,69,117,197,131,137,129,180,17,163,110,118,178,92,98,185],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"71.5.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[13,78,1976,1040]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61582.8916828122,\"onlineMoneyMade\":13,\"onlineRunningTime\":13503.210000013984,\"pid\":734,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///c4296676-dfe5-4317-ae1c-8dbdc749b6f1\",\"moduleSequenceNumber\":81}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///c4296676-dfe5-4317-ae1c-8dbdc749b6f1\",\"moduleSequenceNumber\":81}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":81,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.326,\"minDifficulty\":8,\"moneyAvailable\":0,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"42.4.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,26,1404,676]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48222.24907500005,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":739,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3a70b2b4-7822-44c0-aa9d-75437511bd2d\",\"moduleSequenceNumber\":82}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3a70b2b4-7822-44c0-aa9d-75437511bd2d\",\"moduleSequenceNumber\":82}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":52.93600000000001,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"57.3.4.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[1828296,120,1614,786]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35165.66779687527,\"onlineMoneyMade\":1828296,\"onlineRunningTime\":13503.210000013984,\"pid\":732,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///31428df8-c55d-4539-b35f-b05f896dc919\",\"moduleSequenceNumber\":83}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///31428df8-c55d-4539-b35f-b05f896dc919\",\"moduleSequenceNumber\":83}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":83,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.914000000000001,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"32.5.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[5965428,198,1374,714]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31200.59250000028,\"onlineMoneyMade\":5965428,\"onlineRunningTime\":13503.210000013984,\"pid\":733,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///35bd32c5-0c95-46b9-82e5-e6e95d294efe\",\"moduleSequenceNumber\":84}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///35bd32c5-0c95-46b9-82e5-e6e95d294efe\",\"moduleSequenceNumber\":84}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":28.988,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-804507.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[74,92,200,2,55,62,21,106,16,82,96,167,121,182,104,90,109,128,145,33,151,144,94,144,130,62,163,125,190,13,20,145,93,152,66,80,76,79],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-780584-TheBlackHand.cct\",\"type\":\"Total Ways to Sum\",\"data\":64,\"reward\":{\"name\":\"The Black Hand\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"54.0.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,65,1261,676]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33856.97627812496,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":738,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6392d43c-3201-4094-9113-0495f4a680ed\",\"moduleSequenceNumber\":85}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6392d43c-3201-4094-9113-0495f4a680ed\",\"moduleSequenceNumber\":85}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":39.736000000000004,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"64.1.7.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,104,1781,884]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38870.73815625011,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":736,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///8faad2c6-65c6-40ef-af6b-17396a2e3098\",\"moduleSequenceNumber\":86}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///8faad2c6-65c6-40ef-af6b-17396a2e3098\",\"moduleSequenceNumber\":86}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":39.208,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-655334.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":80338322575528600,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"13.7.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,13,429,325]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15751.099113750024,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":740,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7a0960ce-0905-4631-a35f-d8aea00aa464\",\"moduleSequenceNumber\":87}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7a0960ce-0905-4631-a35f-d8aea00aa464\",\"moduleSequenceNumber\":87}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":71.64825,\"minDifficulty\":9,\"moneyAvailable\":1074863835.2823772,\"moneyMax\":1679491175,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":209,\"serverGrowth\":31}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"17.2.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":86.33625,\"minDifficulty\":14,\"moneyAvailable\":1114592575,\"moneyMax\":1114592575,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":227,\"serverGrowth\":30}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"52.5.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,0,949,520]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33950.86695000003,\"onlineMoneyMade\":0,\"onlineRunningTime\":13503.210000013984,\"pid\":737,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///85356f26-a9c3-4652-aee9-ff235adc2bf2\",\"moduleSequenceNumber\":88}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///85356f26-a9c3-4652-aee9-ff235adc2bf2\",\"moduleSequenceNumber\":88}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":88,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":67.05425,\"minDifficulty\":10,\"moneyAvailable\":500000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"85.6.4.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,156,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9088.6170375,\"onlineMoneyMade\":0,\"onlineRunningTime\":8689.609999996572,\"pid\":1963,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///923da301-2e99-46a3-b479-56438b3bd537\",\"moduleSequenceNumber\":5908}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":5908,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":16.186,\"minDifficulty\":15,\"moneyAvailable\":0,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":37}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"58.5.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1086,\"serverGrowth\":59}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"12.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":54,\"hackDifficulty\":54,\"minDifficulty\":18,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":51}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"71.0.6.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":5375,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":508,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"56.4.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":28.799999999999997,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3363,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///29fa0cd6-63d3-4b27-90ce-644f37e9058e\",\"moduleSequenceNumber\":3081}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3364,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///29fa0cd6-63d3-4b27-90ce-644f37e9058e\",\"moduleSequenceNumber\":3081}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///29fa0cd6-63d3-4b27-90ce-644f37e9058e\",\"moduleSequenceNumber\":3081}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":3081,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":348,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"27.4.2.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":124.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3361,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ae792e44-b5ce-4017-b0cb-3268b1482a33\",\"moduleSequenceNumber\":1689}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3362,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ae792e44-b5ce-4017-b0cb-3268b1482a33\",\"moduleSequenceNumber\":1689}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ae792e44-b5ce-4017-b0cb-3268b1482a33\",\"moduleSequenceNumber\":1689}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":1689,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.2400000000000002,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":216,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-325598-Aevum.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,7,0,6,0],\"reward\":{\"name\":\"Aevum\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"4.1.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":10854,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":535,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"22.3.7.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.199999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,15,30,21]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":632.67868125,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3360,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///99e6912a-5843-4ad8-a7b0-c57ddc67d1d5\",\"moduleSequenceNumber\":1688}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///99e6912a-5843-4ad8-a7b0-c57ddc67d1d5\",\"moduleSequenceNumber\":1688}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":1688,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.4200000000000004,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":59,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"77.2.5.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"69.1.6.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"13.1.3.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-0\",\"httpPortOpen\":true,\"ip\":\"52.9.7.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048521.5999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[41749970,374472,374472,78015]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5255883.676023752,\"onlineMoneyMade\":41749970,\"onlineRunningTime\":357.40999999998826,\"pid\":3393,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[200000000,62412,218442,218442]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5769752.234400003,\"onlineMoneyMade\":200000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3394,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[230000000,62412,171633,156030]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4507618.933125002,\"onlineMoneyMade\":230000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3395,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[375000000,93618,109221,93618]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4282237.986468749,\"onlineMoneyMade\":375000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3396,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[275000000,62412,62412,62412]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3245485.631850001,\"onlineMoneyMade\":275000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3397,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[225000000,46809,31206,46809]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1803047.57325,\"onlineMoneyMade\":225000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3398,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[300000000,46809,46809,46809]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2028428.5199062498,\"onlineMoneyMade\":300000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3399,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,31206,15603,31206]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1104366.6386156252,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3400,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[187500000,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":946599.9759562502,\"onlineMoneyMade\":187500000,\"onlineRunningTime\":357.40999999998826,\"pid\":3401,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[250000000,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":676142.83996875,\"onlineMoneyMade\":250000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3402,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3403,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[600000000,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":811371.4079625001,\"onlineMoneyMade\":600000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3404,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3405,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3406,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3407,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3408,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3409,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3410,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3411,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3412,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3413,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3414,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3415,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3416,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3417,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3418,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3419,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3420,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///55e7f041-af44-4ef4-a664-decd8c9b6eae\",\"moduleSequenceNumber\":201}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-0\",\"moduleSequenceNumber\":201,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":3.2439999999999896,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-1\",\"httpPortOpen\":true,\"ip\":\"0.8.9.1\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048521.5999999995,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1228.6925678866478,374472,358869,78015]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3446074.6743740607,\"onlineMoneyMade\":1228.6925678866478,\"onlineRunningTime\":357.40999999998826,\"pid\":3421,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,218442,218442]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5048533.205100003,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3422,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[172500000,109221,124824,109221]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3425790.389175001,\"onlineMoneyMade\":172500000,\"onlineRunningTime\":357.40999999998826,\"pid\":3423,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,93618,109221,93618]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3268023.7265156247,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3424,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,62412,62412,62412]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2434114.2238875004,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3425,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,46809,31206,46809]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1295940.4432734377,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3426,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,46809,46809,46809]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1521321.3899296876,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3427,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[250000000,31206,15603,31206]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1577666.6265937502,\"onlineMoneyMade\":250000000,\"onlineRunningTime\":357.40999999998826,\"pid\":3428,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":709949.9819671876,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3429,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":507107.1299765626,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3430,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3431,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,15603,15603,15603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":608528.5559718751,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3432,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3433,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3434,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3435,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3436,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3437,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3438,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3439,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3440,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3441,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3442,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3443,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3444,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3445,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3446,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3447,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":357.40999999998826,\"pid\":3448,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":15603,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afb1c792-4bbb-4255-9fd7-e5a6c1cc19fc\",\"moduleSequenceNumber\":781}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-1\",\"moduleSequenceNumber\":781,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7.9245,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1084,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.002,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":431.945333333411}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":4.4921,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":737.6800316801084}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":86.3982,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":21189.777721114915}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Aevum\",\"playerReputation\":650.7116666666401}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":14922.912651287876}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":49.6108,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":8180.2527861407625}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":16154.955075898399}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":49.4351,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":8138.992410214997}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"main\":\"run main.js\",\"sa\":\"scan-analyze\",\"find\":\"run scripts/informationFunctions/findRoute.js\",\"listServers\":\"run scripts/informationFunctions/listServerHackable.js\"}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"29","AllGangsSave":"","LastExportBonus":"1673685418556","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}