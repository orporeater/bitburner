{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"max\":10,\"current\":10},\"skills\":{\"hacking\":3109,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":589840734146.9102,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":2.005805933612626,\"hacking_speed\":1.9237478569527626,\"hacking_money\":4.778137052078993,\"hacking_grow\":3.193271024474705,\"hacking\":4.659974465405845,\"strength\":1.4597810397598652,\"defense\":1.4597810397598652,\"dexterity\":1.4597810397598652,\"agility\":1.4597810397598652,\"charisma\":1.4597810397598652,\"hacking_exp\":7.098670273749258,\"strength_exp\":1.8466230152962302,\"defense_exp\":1.8466230152962302,\"dexterity_exp\":1.8466230152962302,\"agility_exp\":1.8466230152962302,\"charisma_exp\":1.8466230152962302,\"company_rep\":2.215947618355476,\"faction_rep\":1.8466230152962302,\"crime_money\":1.4597810397598652,\"crime_success\":1.4597810397598652,\"hacknet_node_money\":3.681704636746859,\"hacknet_node_purchase_cost\":0.5106349748909057,\"hacknet_node_ram_cost\":0.6674966992037982,\"hacknet_node_core_cost\":0.6674966992037982,\"hacknet_node_level_cost\":0.5673721943232285,\"work_money\":1.605759143735852,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":23,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module Core V2 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core V3 Upgrade\"},{\"level\":1,\"name\":\"Embedded Netburner Module Direct Memory Access Upgrade\"},{\"level\":1,\"name\":\"NEMEAN Subdermal Weave\"},{\"level\":1,\"name\":\"Synthetic Heart\"},{\"level\":1,\"name\":\"Embedded Netburner Module Analyze Engine\"},{\"level\":1,\"name\":\"Synfibril Muscle\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":24,\"name\":\"NeuroFlux Governor\"},{\"level\":25,\"name\":\"NeuroFlux Governor\"},{\"level\":26,\"name\":\"NeuroFlux Governor\"},{\"level\":27,\"name\":\"NeuroFlux Governor\"},{\"level\":28,\"name\":\"NeuroFlux Governor\"},{\"level\":29,\"name\":\"NeuroFlux Governor\"},{\"level\":30,\"name\":\"NeuroFlux Governor\"},{\"level\":31,\"name\":\"NeuroFlux Governor\"},{\"level\":32,\"name\":\"NeuroFlux Governor\"},{\"level\":33,\"name\":\"NeuroFlux Governor\"},{\"level\":34,\"name\":\"NeuroFlux Governor\"},{\"level\":35,\"name\":\"NeuroFlux Governor\"},{\"level\":36,\"name\":\"NeuroFlux Governor\"},{\"level\":37,\"name\":\"NeuroFlux Governor\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"Daedalus\",\"BitRunners\",\"The Black Hand\",\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":9691.600000003655,\"ram\":64,\"totalMoneyGenerated\":327247066.20343965,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3442.59999999906,\"ram\":64,\"totalMoneyGenerated\":96472843.5829182,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3442.1999999990603,\"ram\":64,\"totalMoneyGenerated\":96472841.37389542,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3441.7999999990607,\"ram\":64,\"totalMoneyGenerated\":96472839.16487263,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3441.199999999061,\"ram\":64,\"totalMoneyGenerated\":96472835.85133846,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3438.3999999990638,\"ram\":64,\"totalMoneyGenerated\":96472820.38817899,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":33766.05165333683,\"onlineTimeSeconds\":3438.199999999064,\"ram\":64,\"totalMoneyGenerated\":96472819.2836676,\"name\":\"hacknet-node-14\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":18938832272632.42,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":131469015794551.3,\"hacknet\":3524060595.443416,\"hacknet_expenses\":-4055108381.8781376,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":18938831272632.42,\"work\":0,\"servers\":-346030080000,\"other\":-550307200000,\"augmentations\":-111633316192347.06}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":145224767050794.38,\"hacknet\":49417274576.4809,\"hacknet_expenses\":-17291377721.15756,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":24547184264350.11,\"work\":6880156.063831013,\"servers\":-1370258126722.5115,\"other\":-551554499996.7905,\"augmentations\":-118787902935036.19}},\"playtimeSinceLastAug\":77171800,\"playtimeSinceLastBitnode\":422425400,\"purchasedServers\":[\"moneyServer-0\",\"moneyServer-1\",\"moneyServer-2\",\"farmServer-0\",\"farmServer-1\",\"farmServer-2\"],\"scriptProdSinceLastAug\":46149228962327.234,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1671137853951},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1671138393965},{\"ID\":\"WORKOUT\",\"unlockedOn\":1671146193966},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1671173871600},{\"ID\":\"TOR\",\"unlockedOn\":1671174291602},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1671174471602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1671174531592},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1671233460823},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1672421371960},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1672422211962},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1672422391965},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1672423711959},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1672423891961},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1672583693989},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1672583753987},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1672584534004},{\"ID\":\"NITESEC\",\"unlockedOn\":1672584534007},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1672584833999},{\"ID\":\"TRAVEL\",\"unlockedOn\":1672584834002},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1672692811006},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1672764989930},{\"ID\":\"DONATION\",\"unlockedOn\":1672764989951},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1672951832056},{\"ID\":\"FROZE\",\"unlockedOn\":1673104787388},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1673208303290},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1673212577733},{\"ID\":\"4S\",\"unlockedOn\":1673252912192},{\"ID\":\"SF1.1\",\"unlockedOn\":1673438719449},{\"ID\":\"GANG\",\"unlockedOn\":1673550134613},{\"ID\":\"N00DLES\",\"unlockedOn\":1673724680462}],\"terminalCommandHistory\":[\"run scripts/purchaseServer.js\",\"listServers\",\"top\",\"run scripts/purchaseServer.js\",\"listServers\",\"connect darkweb\",\"buy -l\",\"buy DeepscanV1.exe\",\"buy AutoLink.exe\",\"buy ServerProfiler.exe\",\"buy HTTPWorm.exe\",\"buy SQLInject.exe\",\"listServers\",\"home\",\"listServers\",\"run scripts/purchaseServer.js\",\"listServers\",\"connect darkweb\",\"buy -l\",\"buy DeepscanV2.exe\",\"home\",\"li\",\"listServers\",\"listServers 2\",\"listServers\",\"listServers 2\",\"listServers 1\",\"listServers\",\"listServers 1\",\"listServers 2\",\"connect darkweb\",\"buy Formulas.exe\",\"home\",\"li\",\"listServers\",\"listServers 2\",\"sa 10\",\"backdoor\",\"sa 10\",\"backdoor\",\"home\",\"listServers\",\"connect darkweb\",\"backdoor\",\"ls\",\"analyze\",\"home\",\"connect darkweb\",\"buy -l\",\"home\"],\"lastUpdate\":1673978008271,\"lastSave\":1673977964075,\"totalPlaytime\":2841239200,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":381,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"a7ab312ea0b53\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"77.3.4.2\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"DeepscanV1.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\",\"Formulas.exe\"],\"ramUsed\":3950.950000000004,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.128,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9538.809999999643,\"pid\":1,\"ramUsage\":7.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///e5935b33-a1c7-41b6-8a1f-111033d30508\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///6cd6bfdf-af2f-4b83-97bb-aae2ff7e213b\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///5e281f42-da74-4d92-8508-5bf8fcde3825\",\"moduleSequenceNumber\":61},{\"filename\":\"main.js\",\"url\":\"blob:file:///0401f3f2-f2c9-44ff-b368-eccf222dbe75\",\"moduleSequenceNumber\":113}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.209999999047,\"pid\":308,\"ramUsage\":6.1,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///eaa0d9be-1a6c-4cac-a1d8-b78e2edbad23\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"blob:file:///9ee7a8ae-e4d0-4b50-beb8-bffe294d0a74\",\"moduleSequenceNumber\":142}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"logs\":[],\"logUpd\":false,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.209999999047,\"pid\":312,\"ramUsage\":6.3,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///82c46595-00c7-4ef6-839a-4da05fa70653\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///01599bd8-d18d-4c99-8872-773cbc9abd22\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///dcb9f1b5-fa53-4a58-9e8c-3f525b8695b0\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"blob:file:///b07349ca-d150-4292-9a92-d2121214d4b6\",\"moduleSequenceNumber\":143}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[41954302,44486,46176,5070]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1482923.2231251467,\"onlineMoneyMade\":41954302,\"onlineRunningTime\":3457.009999999047,\"pid\":517,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,7306,26338,25168]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2271538.994248392,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":518,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,8996,18382,18122]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1650568.6147116127,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":519,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[885221688,15912,17758,14794]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1974965.4235489932,\"onlineMoneyMade\":885221688,\"onlineRunningTime\":3457.009999999047,\"pid\":520,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,9984,11154,10946]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1571390.0464782363,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":521,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,7722,8814,8632]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1031605.3841947839,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":522,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,8008,9022,8892]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1060328.3787899418,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":523,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,4706,5564,5408]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":905501.0561167557,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":524,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,4160,4498,4446]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":744167.8021376859,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":525,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,3952,4758,4628]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":552312.0406490667,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":526,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,2080,2184,2184]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":416379.60357703664,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":527,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,3016,3536,3432]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":493343.386685029,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":528,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,1560,1768,1716]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":330002.98368605564,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":529,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,1352,1456,1430]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":267767.5216620407,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":530,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,728,728,728]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":226738.62721382518,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":531,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,676,806,754]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":187786.09382068095,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":532,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,780,806,780]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":197226.61541774,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":533,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[0,520,520,494]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":177847.24557040434,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":534,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,390,390,364]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":143255.07039291065,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":535,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[0,234,338,338]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":120442.78360118992,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":536,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,390,494,442]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":125453.73494742956,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":537,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,156,286,286]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":110600.8322001503,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":538,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,442,442,416]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":119626.08158619508,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":539,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,364,390,364]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":100772.7232061445,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":540,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,390,442,390]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":110849.99552675895,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":541,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,286,286,260]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":99942.17878411581,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":542,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,260,260,234]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":98807.10140734332,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":543,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,182,182,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":76742.30459544847,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":544,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,286,260,260]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":75579.54240460834,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":545,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,208,182,208]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":77185.26162053042,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":546,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,182,182,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":74126.08966605821,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":547,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,182,182,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":73254.0180229281,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":548,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,234,234,208]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":74610.57391224158,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":549,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,156,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":66443.55376229306,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":550,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,156,156,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":71759.0380632765,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":551,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[0,156,156,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70651.64550057161,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":552,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,130,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62290.83165214973,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":553,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,182,156,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":66152.86321458305,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":554,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,156,156,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":68769.07814397331,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":555,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,156,156,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65779.11822467012,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":556,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,130,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62401.570908420224,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":557,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,26,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52947.20690432729,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":558,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,130,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63536.648285192736,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":559,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,156,156,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63536.64828519276,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":560,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,182,182,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":62789.15830536691,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":561,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,130,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":65792.96063170394,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":562,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,156,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60214.470597078085,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":563,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,130,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":59799.198386063756,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":564,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,130,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57307.56511997776,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":565,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,78,130,130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":50593.99770857941,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":566,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,26,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":48877.539236386816,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":567,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,156,156,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52324.29858780578,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":568,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,26,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":45679.94321157647,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":569,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,156,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47064.18391495757,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":570,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,104,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":54317.60520067457,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":571,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,156,130,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49140.544970029245,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":572,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,104,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52324.29858780578,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":573,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,78,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":46026.00338742174,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":574,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,52,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30176.447333708096,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":575,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,78,78,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40738.20390050593,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":576,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,104,104,104]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49334.33866850259,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":577,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,78,78,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40738.20390050593,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":578,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,78,78,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40738.20390050593,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":579,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst files = ns.ls(\\\"home\\\", \\\".js\\\")\\n\\tfor (const file of files) {\\n\\t\\tif (file !== ns.getScriptName()) {\\n\\t\\t\\tns.tprintf(file)\\n\\t\\t\\tns.rm(file)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"deleteFiles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"deleteFiles.js\",\"url\":\"blob:file:///e1e93004-c85a-499a-b68b-9850b7a5718b\",\"moduleSequenceNumber\":23749}],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":71,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HacknetNode } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        let whileCounter = 0;\\n        let numberNodes = ns.hacknet.numNodes();\\n        const moneyAvailable = ns.getPlayer().money;\\n        while (numberNodes < HacknetNode.MAX_NUMBER &&\\n            whileCounter < HacknetNode.MAX_NUMBER) {\\n            const nodeCost = ns.hacknet.getPurchaseNodeCost();\\n            if (numberNodes < HacknetNode.MAX_NUMBER) {\\n                if (nodeCost < moneyAvailable) {\\n                    ns.hacknet.purchaseNode();\\n                }\\n            }\\n            numberNodes = ns.hacknet.numNodes();\\n            whileCounter++;\\n        }\\n        for (let node = 0; node < numberNodes; node++) {\\n            const nodeStats = ns.hacknet.getNodeStats(node);\\n            for (let lvl = 0; lvl < HacknetNode.MAX_LVL - nodeStats.level; lvl++) {\\n                const lvlCost = ns.hacknet.getLevelUpgradeCost(node, 1);\\n                if (lvlCost < moneyAvailable) {\\n                    ns.hacknet.upgradeLevel(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let ram = 0; ram < HacknetNode.MAX_RAM - nodeStats.ram; ram++) {\\n                const ramCost = ns.hacknet.getRamUpgradeCost(node, 1);\\n                if (ramCost < moneyAvailable) {\\n                    ns.hacknet.upgradeRam(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let cores = 0; cores < HacknetNode.MAX_CORES - nodeStats.cores; cores++) {\\n                const coresCost = ns.hacknet.getCoreUpgradeCost(node, 1);\\n                if (coresCost < moneyAvailable) {\\n                    ns.hacknet.upgradeCore(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // await ns.sleep(5000);\\n        await ns.sleep(600000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja05vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9oYWNrTm9kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBRTVDLE9BQ0MsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVO1lBQ3BDLFlBQVksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUNwQztZQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNsRCxJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFO2dCQUN6QyxJQUFJLFFBQVEsR0FBRyxjQUFjLEVBQUU7b0JBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQzFCO2FBQ0Q7WUFDRCxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVwQyxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QyxNQUFNLFNBQVMsR0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUzRCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNyRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxPQUFPLEdBQUcsY0FBYyxFQUFFO29CQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO3FCQUFNO29CQUNOLE1BQU07aUJBQ047YUFDRDtZQUVELEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ25FLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLE9BQU8sR0FBRyxjQUFjLEVBQUU7b0JBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ04sTUFBTTtpQkFDTjthQUNEO1lBQ0QsS0FDQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQ2IsS0FBSyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFDL0MsS0FBSyxFQUFFLEVBQ047Z0JBQ0QsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELElBQUksU0FBUyxHQUFHLGNBQWMsRUFBRTtvQkFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDTixNQUFNO2lCQUNOO2FBQ0Q7U0FDRDtRQUNELHdCQUF3QjtRQUN4QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///eaa0d9be-1a6c-4cac-a1d8-b78e2edbad23\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"blob:file:///9ee7a8ae-e4d0-4b50-beb8-bffe294d0a74\",\"moduleSequenceNumber\":142}],\"dependents\":[],\"ramUsage\":6.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackNodesActivated = await ns.prompt('Automated HackNodes?', {\\n        type: 'boolean',\\n    });\\n    const upgradeServerActivated = await ns.prompt('Upgrade for Servers Acktiv??', {\\n        type: 'boolean',\\n    });\\n    let startBit = true;\\n    while (true) {\\n        const serversHackable = servers.hackable;\\n        let countNewRootServers = 0;\\n        let countHasRamAndMoneyServers = 0;\\n        ns.print(`runnig`);\\n        for (const server of serversHackable) {\\n            let serverStats = ns.getServer(server);\\n            const portsNeeded = serverStats.numOpenPortsRequired;\\n            ns.fileExists('BruteSSH.exe', OwnServerList.HOME) &&\\n                !serverStats.sshPortOpen\\n                ? ns.brutessh(server)\\n                : null;\\n            ns.fileExists('relaySMTP.exe', OwnServerList.HOME) &&\\n                !serverStats.smtpPortOpen\\n                ? ns.relaysmtp(server)\\n                : null;\\n            ns.fileExists('FTPCrack.exe', OwnServerList.HOME) &&\\n                !serverStats.ftpPortOpen\\n                ? ns.ftpcrack(server)\\n                : null;\\n            ns.fileExists('HTTPworm.exe', OwnServerList.HOME) &&\\n                !serverStats.httpPortOpen\\n                ? ns.httpworm(server)\\n                : null;\\n            ns.fileExists('SQLInject.exe', OwnServerList.HOME) &&\\n                !serverStats.sqlPortOpen\\n                ? ns.sqlinject(server)\\n                : null;\\n            serverStats = ns.getServer(server);\\n            const portsOpen = serverStats.openPortCount;\\n            if (!ns.hasRootAccess(server) && portsOpen >= portsNeeded) {\\n                ns.nuke(server);\\n                countNewRootServers++;\\n                if (serverStats.maxRam > 0 && serverStats.moneyMax > 0) {\\n                    countHasRamAndMoneyServers++;\\n                }\\n            }\\n        }\\n        if (countNewRootServers > 0 || startBit) {\\n            ns.scriptKill(ScriptPath.HACK_NODES, OwnServerList.HOME);\\n            ns.scriptKill(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME);\\n            hackNodesActivated\\n                ? ns.exec(ScriptPath.HACK_NODES, OwnServerList.HOME)\\n                : null;\\n            if (countHasRamAndMoneyServers > 0 || startBit) {\\n                ns.exec(ScriptPath.RUN_REMOTE_ON_TARGET, OwnServerList.HOME);\\n            }\\n            ns.exec(ScriptPath.RUN_HOME_SERVER, OwnServerList.HOME);\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n            upgradeServerActivated\\n                ? ns.exec(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME)\\n                : null;\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n            startBit = false;\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFO1FBQ2xFLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzdDLDhCQUE4QixFQUM5QjtRQUNDLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FDRCxDQUFDO0lBQ0YsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRXBCLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUV6QyxJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVuQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRW5CLEtBQUssTUFBTSxNQUFNLElBQUksZUFBZSxFQUFFO1lBQ3JDLElBQUksV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1lBRXJELEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUM7WUFFNUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBRTtnQkFDMUQsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDaEIsbUJBQW1CLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtvQkFDdkQsMEJBQTBCLEVBQUUsQ0FBQztpQkFDN0I7YUFDRDtTQUNEO1FBQ0QsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLElBQUksUUFBUSxFQUFFO1lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU5RCxrQkFBa0I7Z0JBQ2pCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLElBQUksMEJBQTBCLEdBQUcsQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDL0MsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzdEO1lBRUQsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4RCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFMUQsc0JBQXNCO2dCQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxJQUFJLENBQUM7WUFFUixFQUFFLENBQUMsSUFBSSxDQUNOLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLENBQUMsRUFDRCxhQUFhLENBQUMsdUJBQXVCLENBQ3JDLENBQUM7WUFDRixRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0FBQ0YsQ0FBQyJ9\",\"filename\":\"main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///9eb00ec9-81a2-4a34-8a55-1dbaa4c00aa0\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///5976da7b-d49f-44cb-81e2-9ef4293531e1\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///6a8a33c9-e283-4237-b288-9c4ab418dd39\",\"moduleSequenceNumber\":75},{\"filename\":\"main.js\",\"url\":\"blob:file:///3fa46b96-5eff-48a4-ae86-2625bdddb2f3\",\"moduleSequenceNumber\":141}],\"dependents\":[],\"ramUsage\":7.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class DataBase {\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9kYXRhQmFzZS9kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sUUFBUTtDQUFHIn0=\",\"filename\":\"/scripts/dataBase/database.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":74,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList } from '/scripts/enums/enums.js';\\nexport class ServersList {\\n    servers;\\n    serversTest;\\n    ns;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.servers = this.getAllServers();\\n        this.serversTest = this.getAllServersTest();\\n    }\\n    get value() {\\n        return this.servers;\\n    }\\n    get hackable() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get ownedServer() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            if (this.ns.getServer(server).purchasedByPlayer) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList.filter((name) => name !== OwnServerList.HOME);\\n    }\\n    get hackableWithRoot() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndRamAndNoMoney() {\\n        let serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax === 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        serverList = serverList.filter((server) => !server.includes(OwnServerList.MONEY_SERVER) &&\\n            !server.includes(OwnServerList.FARM_SERVER) &&\\n            !server.includes(OwnServerList.HOME));\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoney() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoneyAndRam() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get documentsLit() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'lit');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get documentsCct() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'cct');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get allFiles() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server);\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get hasNoBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (!serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hasBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    getAllServers(rootHost = 'home') {\\n        this.ns.disableLog('ALL');\\n        let pendingScan = [rootHost];\\n        const list = new Set(pendingScan);\\n        while (pendingScan.length) {\\n            const hostname = pendingScan.shift();\\n            list.add(hostname);\\n            pendingScan.push(...this.ns.scan(hostname));\\n            pendingScan = pendingScan.filter((host) => !list.has(host));\\n        }\\n        const finalList = [...list].sort((a, b) => this.ns.getServerRequiredHackingLevel(a) -\\n            this.ns.getServerRequiredHackingLevel(b));\\n        return [...finalList];\\n    }\\n    getAllServersTest() {\\n        const servers = this.getAllServers();\\n        const list = [];\\n        for (const server of servers) {\\n            list.push({ name: server, ...this.ns.getServer(server) });\\n        }\\n        return [...list];\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyc2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jbGFzc2VzL3NlcnZlcnNsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUt4RCxNQUFNLE9BQU8sV0FBVztJQUNmLE9BQU8sQ0FBVztJQUNuQixXQUFXLENBQWE7SUFDdkIsRUFBRSxDQUFDO0lBRVgsWUFBbUIsRUFBTTtRQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2xCLE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDOUQsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsV0FBVztRQUNyQixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ2hELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDMUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXRELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWMsRUFDekI7Z0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsZ0NBQWdDO1FBQzFDLElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUM5QixNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUNDLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ3pELFdBQVcsQ0FBQyxjQUFjO2dCQUMxQixXQUFXLENBQUMsUUFBUSxLQUFLLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNyQjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNWLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBQzVDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQzNDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQ3JDLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyx3QkFBd0I7UUFDbEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUN2QjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyw4QkFBOEI7UUFDeEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3JCO2dCQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFbEQsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFeEMsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDbEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVqQyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUNoQztTQUNEO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN2QixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ25DLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDckIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxRQUFRLEdBQUcsTUFBTTtRQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLFdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUMxQixNQUFNLFFBQVEsR0FBVyxXQUFXLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuQixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM1QyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMvQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQ3pDLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ08saUJBQWlCO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBZSxFQUFFLENBQUM7UUFDNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0NBQ0QifQ==\",\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":75,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var OwnServerList;\\n(function (OwnServerList) {\\n    OwnServerList[\\\"HOME\\\"] = \\\"home\\\";\\n    OwnServerList[\\\"FARM_SERVER\\\"] = \\\"farmServer\\\";\\n    OwnServerList[\\\"MONEY_SERVER\\\"] = \\\"moneyServer\\\";\\n    OwnServerList[\\\"TARGET_EXP_FARM_SERVERS\\\"] = \\\"joesguns\\\";\\n})(OwnServerList || (OwnServerList = {}));\\nexport var HacknetNode;\\n(function (HacknetNode) {\\n    HacknetNode[HacknetNode[\\\"MAX_NUMBER\\\"] = 9] = \\\"MAX_NUMBER\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_RAM\\\"] = 64] = \\\"MAX_RAM\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_LVL\\\"] = 200] = \\\"MAX_LVL\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_CORES\\\"] = 16] = \\\"MAX_CORES\\\";\\n})(HacknetNode || (HacknetNode = {}));\\nexport var ScriptPath;\\n(function (ScriptPath) {\\n    ScriptPath[\\\"EXP_FARM\\\"] = \\\"/scripts/executingScripts/expFarm.js\\\";\\n    ScriptPath[\\\"HACK_NODES\\\"] = \\\"/scripts/executingScripts/hackNodes.js\\\";\\n    ScriptPath[\\\"MONEY_FARM\\\"] = \\\"/scripts/executingScripts/moneyFarm.js\\\";\\n    ScriptPath[\\\"RUN_EXP_SERVERS\\\"] = \\\"/scripts/executingScripts/runExpFarmServers.js\\\";\\n    ScriptPath[\\\"RUN_HOME_SERVER\\\"] = \\\"/scripts/executingScripts/runHomeServer.js\\\";\\n    ScriptPath[\\\"RUN_MONEY_SERVERS\\\"] = \\\"/scripts/executingScripts/runMoneyServers.js\\\";\\n    ScriptPath[\\\"RUN_REMOTE_ON_TARGET\\\"] = \\\"/scripts/executingScripts/runRemoteOnTarget.js\\\";\\n    ScriptPath[\\\"UPGRADE_SERVERS\\\"] = \\\"/scripts/executingScripts/upgradeServers.js\\\";\\n})(ScriptPath || (ScriptPath = {}));\\nexport var ToastVariant;\\n(function (ToastVariant) {\\n    ToastVariant[\\\"SUCCESS\\\"] = \\\"success\\\";\\n    ToastVariant[\\\"WARNING\\\"] = \\\"warning\\\";\\n    ToastVariant[\\\"ERROR\\\"] = \\\"error\\\";\\n    ToastVariant[\\\"INFO\\\"] = \\\"info\\\";\\n})(ToastVariant || (ToastVariant = {}));\\nexport var CrimeType;\\n(function (CrimeType) {\\n    CrimeType[\\\"shoplift\\\"] = \\\"Shoplift\\\";\\n    CrimeType[\\\"robStore\\\"] = \\\"Rob Store\\\";\\n    CrimeType[\\\"mug\\\"] = \\\"Mug\\\";\\n    CrimeType[\\\"larceny\\\"] = \\\"Larceny\\\";\\n    CrimeType[\\\"dealDrugs\\\"] = \\\"Deal Drugs\\\";\\n    CrimeType[\\\"bondForgery\\\"] = \\\"Bond Forgery\\\";\\n    CrimeType[\\\"traffickArms\\\"] = \\\"Traffick Arms\\\";\\n    CrimeType[\\\"homicide\\\"] = \\\"Homicide\\\";\\n    CrimeType[\\\"grandTheftAuto\\\"] = \\\"Grand Theft Auto\\\";\\n    CrimeType[\\\"kidnap\\\"] = \\\"Kidnap\\\";\\n    CrimeType[\\\"assassination\\\"] = \\\"Assassination\\\";\\n    CrimeType[\\\"heist\\\"] = \\\"Heist\\\";\\n})(CrimeType || (CrimeType = {}));\\nexport var FactionWorkType;\\n(function (FactionWorkType) {\\n    FactionWorkType[\\\"hacking\\\"] = \\\"hacking\\\";\\n    FactionWorkType[\\\"field\\\"] = \\\"field\\\";\\n    FactionWorkType[\\\"security\\\"] = \\\"security\\\";\\n})(FactionWorkType || (FactionWorkType = {}));\\nexport var UniversityClassType;\\n(function (UniversityClassType) {\\n    UniversityClassType[\\\"computerScience\\\"] = \\\"Computer Science\\\";\\n    UniversityClassType[\\\"dataStructures\\\"] = \\\"Data Structures\\\";\\n    UniversityClassType[\\\"networks\\\"] = \\\"Networks\\\";\\n    UniversityClassType[\\\"algorithms\\\"] = \\\"Algorithms\\\";\\n    UniversityClassType[\\\"management\\\"] = \\\"Management\\\";\\n    UniversityClassType[\\\"leadership\\\"] = \\\"Leadership\\\";\\n})(UniversityClassType || (UniversityClassType = {}));\\nexport var GymType;\\n(function (GymType) {\\n    GymType[\\\"strength\\\"] = \\\"str\\\";\\n    GymType[\\\"defense\\\"] = \\\"def\\\";\\n    GymType[\\\"dexterity\\\"] = \\\"dex\\\";\\n    GymType[\\\"agility\\\"] = \\\"agi\\\";\\n})(GymType || (GymType = {}));\\nexport var JobName;\\n(function (JobName) {\\n    JobName[\\\"software0\\\"] = \\\"Software Engineering Intern\\\";\\n    JobName[\\\"software1\\\"] = \\\"Junior Software Engineer\\\";\\n    JobName[\\\"software2\\\"] = \\\"Senior Software Engineer\\\";\\n    JobName[\\\"software3\\\"] = \\\"Lead Software Developer\\\";\\n    JobName[\\\"software4\\\"] = \\\"Head of Software\\\";\\n    JobName[\\\"software5\\\"] = \\\"Head of Engineering\\\";\\n    JobName[\\\"software6\\\"] = \\\"Vice President of Technology\\\";\\n    JobName[\\\"software7\\\"] = \\\"Chief Technology Officer\\\";\\n    JobName[\\\"IT0\\\"] = \\\"IT Intern\\\";\\n    JobName[\\\"IT1\\\"] = \\\"IT Analyst\\\";\\n    JobName[\\\"IT2\\\"] = \\\"IT Manager\\\";\\n    JobName[\\\"IT3\\\"] = \\\"Systems Administrator\\\";\\n    JobName[\\\"securityEng\\\"] = \\\"Security Engineer\\\";\\n    JobName[\\\"networkEng0\\\"] = \\\"Network Engineer\\\";\\n    JobName[\\\"networkEng1\\\"] = \\\"Network Administrator\\\";\\n    JobName[\\\"business0\\\"] = \\\"Business Intern\\\";\\n    JobName[\\\"business1\\\"] = \\\"Business Analyst\\\";\\n    JobName[\\\"business2\\\"] = \\\"Business Manager\\\";\\n    JobName[\\\"business3\\\"] = \\\"Operations Manager\\\";\\n    JobName[\\\"business4\\\"] = \\\"Chief Financial Officer\\\";\\n    JobName[\\\"business5\\\"] = \\\"Chief Executive Officer\\\";\\n    JobName[\\\"security0\\\"] = \\\"Police Officer\\\";\\n    JobName[\\\"security1\\\"] = \\\"Police Chief\\\";\\n    JobName[\\\"security2\\\"] = \\\"Security Guard\\\";\\n    JobName[\\\"security3\\\"] = \\\"Security Officer\\\";\\n    JobName[\\\"security4\\\"] = \\\"Security Supervisor\\\";\\n    JobName[\\\"security5\\\"] = \\\"Head of Security\\\";\\n    JobName[\\\"agent0\\\"] = \\\"Field Agent\\\";\\n    JobName[\\\"agent1\\\"] = \\\"Secret Agent\\\";\\n    JobName[\\\"agent2\\\"] = \\\"Special Operative\\\";\\n    JobName[\\\"waiter\\\"] = \\\"Waiter\\\";\\n    JobName[\\\"employee\\\"] = \\\"Employee\\\";\\n    JobName[\\\"softwareConsult0\\\"] = \\\"Software Consultant\\\";\\n    JobName[\\\"softwareConsult1\\\"] = \\\"Senior Software Consultant\\\";\\n    JobName[\\\"businessConsult0\\\"] = \\\"Business Consultant\\\";\\n    JobName[\\\"businessConsult1\\\"] = \\\"Senior Business Consultant\\\";\\n    JobName[\\\"waiterPT\\\"] = \\\"Part-time Waiter\\\";\\n    JobName[\\\"employeePT\\\"] = \\\"Part-time Employee\\\";\\n})(JobName || (JobName = {}));\\nexport var CityName;\\n(function (CityName) {\\n    CityName[\\\"Aevum\\\"] = \\\"Aevum\\\";\\n    CityName[\\\"Chongqing\\\"] = \\\"Chongqing\\\";\\n    CityName[\\\"Sector12\\\"] = \\\"Sector-12\\\";\\n    CityName[\\\"NewTokyo\\\"] = \\\"New Tokyo\\\";\\n    CityName[\\\"Ishima\\\"] = \\\"Ishima\\\";\\n    CityName[\\\"Volhaven\\\"] = \\\"Volhaven\\\";\\n})(CityName || (CityName = {}));\\nexport var LocationName;\\n(function (LocationName) {\\n    LocationName[\\\"AevumAeroCorp\\\"] = \\\"AeroCorp\\\";\\n    LocationName[\\\"AevumBachmanAndAssociates\\\"] = \\\"Bachman & Associates\\\";\\n    LocationName[\\\"AevumClarkeIncorporated\\\"] = \\\"Clarke Incorporated\\\";\\n    LocationName[\\\"AevumCrushFitnessGym\\\"] = \\\"Crush Fitness Gym\\\";\\n    LocationName[\\\"AevumECorp\\\"] = \\\"ECorp\\\";\\n    LocationName[\\\"AevumFulcrumTechnologies\\\"] = \\\"Fulcrum Technologies\\\";\\n    LocationName[\\\"AevumGalacticCybersystems\\\"] = \\\"Galactic Cybersystems\\\";\\n    LocationName[\\\"AevumNetLinkTechnologies\\\"] = \\\"NetLink Technologies\\\";\\n    LocationName[\\\"AevumPolice\\\"] = \\\"Aevum Police Headquarters\\\";\\n    LocationName[\\\"AevumRhoConstruction\\\"] = \\\"Rho Construction\\\";\\n    LocationName[\\\"AevumSnapFitnessGym\\\"] = \\\"Snap Fitness Gym\\\";\\n    LocationName[\\\"AevumSummitUniversity\\\"] = \\\"Summit University\\\";\\n    LocationName[\\\"AevumWatchdogSecurity\\\"] = \\\"Watchdog Security\\\";\\n    LocationName[\\\"AevumCasino\\\"] = \\\"Iker Molina Casino\\\";\\n    LocationName[\\\"ChongqingKuaiGongInternational\\\"] = \\\"KuaiGong International\\\";\\n    LocationName[\\\"ChongqingSolarisSpaceSystems\\\"] = \\\"Solaris Space Systems\\\";\\n    LocationName[\\\"ChongqingChurchOfTheMachineGod\\\"] = \\\"Church of the Machine God\\\";\\n    LocationName[\\\"Sector12AlphaEnterprises\\\"] = \\\"Alpha Enterprises\\\";\\n    LocationName[\\\"Sector12BladeIndustries\\\"] = \\\"Blade Industries\\\";\\n    LocationName[\\\"Sector12CIA\\\"] = \\\"Central Intelligence Agency\\\";\\n    LocationName[\\\"Sector12CarmichaelSecurity\\\"] = \\\"Carmichael Security\\\";\\n    LocationName[\\\"Sector12CityHall\\\"] = \\\"Sector-12 City Hall\\\";\\n    LocationName[\\\"Sector12DeltaOne\\\"] = \\\"DeltaOne\\\";\\n    LocationName[\\\"Sector12FoodNStuff\\\"] = \\\"FoodNStuff\\\";\\n    LocationName[\\\"Sector12FourSigma\\\"] = \\\"Four Sigma\\\";\\n    LocationName[\\\"Sector12IcarusMicrosystems\\\"] = \\\"Icarus Microsystems\\\";\\n    LocationName[\\\"Sector12IronGym\\\"] = \\\"Iron Gym\\\";\\n    LocationName[\\\"Sector12JoesGuns\\\"] = \\\"Joe's Guns\\\";\\n    LocationName[\\\"Sector12MegaCorp\\\"] = \\\"MegaCorp\\\";\\n    LocationName[\\\"Sector12NSA\\\"] = \\\"National Security Agency\\\";\\n    LocationName[\\\"Sector12PowerhouseGym\\\"] = \\\"Powerhouse Gym\\\";\\n    LocationName[\\\"Sector12RothmanUniversity\\\"] = \\\"Rothman University\\\";\\n    LocationName[\\\"Sector12UniversalEnergy\\\"] = \\\"Universal Energy\\\";\\n    LocationName[\\\"NewTokyoDefComm\\\"] = \\\"DefComm\\\";\\n    LocationName[\\\"NewTokyoGlobalPharmaceuticals\\\"] = \\\"Global Pharmaceuticals\\\";\\n    LocationName[\\\"NewTokyoNoodleBar\\\"] = \\\"Noodle Bar\\\";\\n    LocationName[\\\"NewTokyoVitaLife\\\"] = \\\"VitaLife\\\";\\n    LocationName[\\\"NewTokyoArcade\\\"] = \\\"Arcade\\\";\\n    LocationName[\\\"IshimaNovaMedical\\\"] = \\\"Nova Medical\\\";\\n    LocationName[\\\"IshimaOmegaSoftware\\\"] = \\\"Omega Software\\\";\\n    LocationName[\\\"IshimaStormTechnologies\\\"] = \\\"Storm Technologies\\\";\\n    LocationName[\\\"IshimaGlitch\\\"] = \\\"0x6C1\\\";\\n    LocationName[\\\"VolhavenCompuTek\\\"] = \\\"CompuTek\\\";\\n    LocationName[\\\"VolhavenHeliosLabs\\\"] = \\\"Helios Labs\\\";\\n    LocationName[\\\"VolhavenLexoCorp\\\"] = \\\"LexoCorp\\\";\\n    LocationName[\\\"VolhavenMilleniumFitnessGym\\\"] = \\\"Millenium Fitness Gym\\\";\\n    LocationName[\\\"VolhavenNWO\\\"] = \\\"NWO\\\";\\n    LocationName[\\\"VolhavenOmniTekIncorporated\\\"] = \\\"OmniTek Incorporated\\\";\\n    LocationName[\\\"VolhavenOmniaCybersystems\\\"] = \\\"Omnia Cybersystems\\\";\\n    LocationName[\\\"VolhavenSysCoreSecurities\\\"] = \\\"SysCore Securities\\\";\\n    LocationName[\\\"VolhavenZBInstituteOfTechnology\\\"] = \\\"ZB Institute of Technology\\\";\\n    LocationName[\\\"Hospital\\\"] = \\\"Hospital\\\";\\n    LocationName[\\\"Slums\\\"] = \\\"The Slums\\\";\\n    LocationName[\\\"TravelAgency\\\"] = \\\"Travel Agency\\\";\\n    LocationName[\\\"WorldStockExchange\\\"] = \\\"World Stock Exchange\\\";\\n    LocationName[\\\"Void\\\"] = \\\"The Void\\\";\\n})(LocationName || (LocationName = {}));\\nexport const NSEnums = {\\n    CityName: CityName,\\n    CrimeType: CrimeType,\\n    FactionWorkType: FactionWorkType,\\n    GymType: GymType,\\n    JobName: JobName,\\n    LocationName: LocationName,\\n    ToastVariant: ToastVariant,\\n    UniversityClassType: UniversityClassType,\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9lbnVtcy9lbnVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxhQUtYO0FBTEQsV0FBWSxhQUFhO0lBQ3hCLDhCQUFhLENBQUE7SUFDYiwyQ0FBMEIsQ0FBQTtJQUMxQiw2Q0FBNEIsQ0FBQTtJQUM1QixxREFBb0MsQ0FBQTtBQUNyQyxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxXQUtYO0FBTEQsV0FBWSxXQUFXO0lBQ3RCLHlEQUFjLENBQUE7SUFDZCxvREFBWSxDQUFBO0lBQ1oscURBQWEsQ0FBQTtJQUNiLHdEQUFjLENBQUE7QUFDZixDQUFDLEVBTFcsV0FBVyxLQUFYLFdBQVcsUUFLdEI7QUFFRCxNQUFNLENBQU4sSUFBWSxVQVNYO0FBVEQsV0FBWSxVQUFVO0lBQ3JCLCtEQUFpRCxDQUFBO0lBQ2pELG1FQUFxRCxDQUFBO0lBQ3JELG1FQUFxRCxDQUFBO0lBQ3JELGdGQUFrRSxDQUFBO0lBQ2xFLDRFQUE4RCxDQUFBO0lBQzlELGdGQUFrRSxDQUFBO0lBQ2xFLHFGQUF1RSxDQUFBO0lBQ3ZFLDZFQUErRCxDQUFBO0FBQ2hFLENBQUMsRUFUVyxVQUFVLEtBQVYsVUFBVSxRQVNyQjtBQUVELE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdkIsbUNBQW1CLENBQUE7SUFDbkIsbUNBQW1CLENBQUE7SUFDbkIsK0JBQWUsQ0FBQTtJQUNmLDZCQUFhLENBQUE7QUFDZCxDQUFDLEVBTFcsWUFBWSxLQUFaLFlBQVksUUFLdkI7QUFFRCxNQUFNLENBQU4sSUFBWSxTQWFYO0FBYkQsV0FBWSxTQUFTO0lBQ3BCLGtDQUFxQixDQUFBO0lBQ3JCLG1DQUFzQixDQUFBO0lBQ3RCLHdCQUFXLENBQUE7SUFDWCxnQ0FBbUIsQ0FBQTtJQUNuQixxQ0FBd0IsQ0FBQTtJQUN4Qix5Q0FBNEIsQ0FBQTtJQUM1QiwyQ0FBOEIsQ0FBQTtJQUM5QixrQ0FBcUIsQ0FBQTtJQUNyQixnREFBbUMsQ0FBQTtJQUNuQyw4QkFBaUIsQ0FBQTtJQUNqQiw0Q0FBK0IsQ0FBQTtJQUMvQiw0QkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFiVyxTQUFTLEtBQVQsU0FBUyxRQWFwQjtBQUVELE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDMUIsc0NBQW1CLENBQUE7SUFDbkIsa0NBQWUsQ0FBQTtJQUNmLHdDQUFxQixDQUFBO0FBQ3RCLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQjtBQUVELE1BQU0sQ0FBTixJQUFZLG1CQU9YO0FBUEQsV0FBWSxtQkFBbUI7SUFDOUIsMkRBQW9DLENBQUE7SUFDcEMseURBQWtDLENBQUE7SUFDbEMsNENBQXFCLENBQUE7SUFDckIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7QUFDMUIsQ0FBQyxFQVBXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFPOUI7QUFFRCxNQUFNLENBQU4sSUFBWSxPQUtYO0FBTEQsV0FBWSxPQUFPO0lBQ2xCLDJCQUFnQixDQUFBO0lBQ2hCLDBCQUFlLENBQUE7SUFDZiw0QkFBaUIsQ0FBQTtJQUNqQiwwQkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFMVyxPQUFPLEtBQVAsT0FBTyxRQUtsQjtBQUVELE1BQU0sQ0FBTixJQUFZLE9BdUNYO0FBdkNELFdBQVksT0FBTztJQUNsQixvREFBeUMsQ0FBQTtJQUN6QyxpREFBc0MsQ0FBQTtJQUN0QyxpREFBc0MsQ0FBQTtJQUN0QyxnREFBcUMsQ0FBQTtJQUNyQyx5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyxxREFBMEMsQ0FBQTtJQUMxQyxpREFBc0MsQ0FBQTtJQUN0Qyw0QkFBaUIsQ0FBQTtJQUNqQiw2QkFBa0IsQ0FBQTtJQUNsQiw2QkFBa0IsQ0FBQTtJQUNsQix3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtJQUNqQywyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyx3Q0FBNkIsQ0FBQTtJQUM3Qix5Q0FBOEIsQ0FBQTtJQUM5Qix5Q0FBOEIsQ0FBQTtJQUM5QiwyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyxnREFBcUMsQ0FBQTtJQUNyQyx1Q0FBNEIsQ0FBQTtJQUM1QixxQ0FBMEIsQ0FBQTtJQUMxQix1Q0FBNEIsQ0FBQTtJQUM1Qix5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyx5Q0FBOEIsQ0FBQTtJQUM5QixpQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBdUIsQ0FBQTtJQUN2Qix1Q0FBNEIsQ0FBQTtJQUM1Qiw0QkFBaUIsQ0FBQTtJQUNqQixnQ0FBcUIsQ0FBQTtJQUNyQixtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyxtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyx3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtBQUNsQyxDQUFDLEVBdkNXLE9BQU8sS0FBUCxPQUFPLFFBdUNsQjtBQTJCRCxNQUFNLENBQU4sSUFBWSxRQU9YO0FBUEQsV0FBWSxRQUFRO0lBQ25CLDJCQUFlLENBQUE7SUFDZixtQ0FBdUIsQ0FBQTtJQUN2QixrQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBc0IsQ0FBQTtJQUN0Qiw2QkFBaUIsQ0FBQTtJQUNqQixpQ0FBcUIsQ0FBQTtBQUN0QixDQUFDLEVBUFcsUUFBUSxLQUFSLFFBQVEsUUFPbkI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQWdFWDtBQWhFRCxXQUFZLFlBQVk7SUFDdkIsMENBQTBCLENBQUE7SUFDMUIsa0VBQWtELENBQUE7SUFDbEQsK0RBQStDLENBQUE7SUFDL0MsMERBQTBDLENBQUE7SUFDMUMsb0NBQW9CLENBQUE7SUFDcEIsaUVBQWlELENBQUE7SUFDakQsbUVBQW1ELENBQUE7SUFDbkQsaUVBQWlELENBQUE7SUFDakQseURBQXlDLENBQUE7SUFDekMseURBQXlDLENBQUE7SUFDekMsd0RBQXdDLENBQUE7SUFDeEMsMkRBQTJDLENBQUE7SUFDM0MsMkRBQTJDLENBQUE7SUFDM0Msa0RBQWtDLENBQUE7SUFFbEMseUVBQXlELENBQUE7SUFDekQsc0VBQXNELENBQUE7SUFDdEQsNEVBQTRELENBQUE7SUFFNUQsOERBQThDLENBQUE7SUFDOUMsNERBQTRDLENBQUE7SUFDNUMsMkRBQTJDLENBQUE7SUFDM0Msa0VBQWtELENBQUE7SUFDbEQsd0RBQXdDLENBQUE7SUFDeEMsNkNBQTZCLENBQUE7SUFDN0IsaURBQWlDLENBQUE7SUFDakMsZ0RBQWdDLENBQUE7SUFDaEMsa0VBQWtELENBQUE7SUFDbEQsNENBQTRCLENBQUE7SUFDNUIsK0NBQStCLENBQUE7SUFDL0IsNkNBQTZCLENBQUE7SUFDN0Isd0RBQXdDLENBQUE7SUFDeEMsd0RBQXdDLENBQUE7SUFDeEMsZ0VBQWdELENBQUE7SUFDaEQsNERBQTRDLENBQUE7SUFFNUMsMkNBQTJCLENBQUE7SUFDM0Isd0VBQXdELENBQUE7SUFDeEQsZ0RBQWdDLENBQUE7SUFDaEMsNkNBQTZCLENBQUE7SUFDN0IseUNBQXlCLENBQUE7SUFFekIsa0RBQWtDLENBQUE7SUFDbEMsc0RBQXNDLENBQUE7SUFDdEMsOERBQThDLENBQUE7SUFDOUMsc0NBQXNCLENBQUE7SUFFdEIsNkNBQTZCLENBQUE7SUFDN0Isa0RBQWtDLENBQUE7SUFDbEMsNkNBQTZCLENBQUE7SUFDN0IscUVBQXFELENBQUE7SUFDckQsbUNBQW1CLENBQUE7SUFDbkIsb0VBQW9ELENBQUE7SUFDcEQsZ0VBQWdELENBQUE7SUFDaEQsZ0VBQWdELENBQUE7SUFDaEQsOEVBQThELENBQUE7SUFFOUQscUNBQXFCLENBQUE7SUFDckIsbUNBQW1CLENBQUE7SUFDbkIsOENBQThCLENBQUE7SUFDOUIsMkRBQTJDLENBQUE7SUFFM0MsaUNBQWlCLENBQUE7QUFDbEIsQ0FBQyxFQWhFVyxZQUFZLEtBQVosWUFBWSxRQWdFdkI7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDdEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsZUFBZSxFQUFFLGVBQWU7SUFDaEMsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsbUJBQW1CLEVBQUUsbUJBQW1CO0NBQy9CLENBQUMifQ==\",\"filename\":\"/scripts/enums/enums.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":76,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aa17192d-e11a-4914-92ea-726a9886d112\",\"moduleSequenceNumber\":144}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const farmServers = [];\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n        farmServers.push(OwnServerList.FARM_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    const scriptName = ScriptPath.EXP_FARM;\\n    for (const farmServer of farmServers) {\\n        if (farmServer) {\\n            const threadsMax = Math.floor(ns.getServerMaxRam(farmServer) / ns.getScriptRam(scriptName));\\n            ns.scp(scriptName, farmServer);\\n            if (ns.scriptRunning(scriptName, farmServer)) {\\n                ns.scriptKill(scriptName, farmServer);\\n            }\\n            ns.exec(scriptName, farmServer, threadsMax, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuRXhwRmFybVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1bkV4cEZhcm1TZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUNqQyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUN6RTtRQUNELFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUUsWUFBWSxFQUFFLENBQUM7S0FDZjtJQUNELE1BQU0sVUFBVSxHQUFXLFVBQVUsQ0FBQyxRQUFRLENBQUM7SUFFL0MsS0FBSyxNQUFNLFVBQVUsSUFBSSxXQUFXLEVBQUU7UUFDckMsSUFBSSxVQUFVLEVBQUU7WUFDZixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUM1QixFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQzVELENBQUM7WUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUUvQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxFQUFFO2dCQUM3QyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN0QztZQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///62531978-5d89-423c-9d9b-770894efdcc5\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"blob:file:///31444509-d933-49c3-815a-5e8db5905395\",\"moduleSequenceNumber\":267}],\"dependents\":[],\"ramUsage\":5.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":267,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    const serverMaxRam = ns.getServerMaxRam(OwnServerList.HOME) - 64;\\n    const threadsPerTarget = serversHackable.length !== 0\\n        ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n        : 0;\\n    if (threadsPerTarget > 0) {\\n        if (ns.scriptRunning(ScriptPath.MONEY_FARM, OwnServerList.HOME)) {\\n            ns.scriptKill(ScriptPath.MONEY_FARM, OwnServerList.HOME);\\n        }\\n        for (const target of serversHackable) {\\n            ns.exec(ScriptPath.MONEY_FARM, OwnServerList.HOME, threadsPerTarget, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuSG9tZVNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvcnVuSG9tZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sT0FBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxNQUFNLGVBQWUsR0FBYSxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDbkUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7WUFDckMsRUFBRSxDQUFDLElBQUksQ0FDTixVQUFVLENBQUMsVUFBVSxFQUNyQixhQUFhLENBQUMsSUFBSSxFQUNsQixnQkFBZ0IsRUFDaEIsTUFBTSxDQUNOLENBQUM7U0FDRjtLQUNEO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///36cd1a6e-863b-4f6f-9b93-f30910f1f24c\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///a6b01647-6b1c-4fbc-9f12-8ba8decd49a0\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///5d1f4c3a-4492-4b18-b2ab-f74f71ecff45\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"blob:file:///ce731d4f-d676-42f4-938b-b0612e8b1259\",\"moduleSequenceNumber\":265}],\"dependents\":[],\"ramUsage\":8.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":265,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const moneyServers = [];\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n        moneyServers.push(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    for (const moneyServer of moneyServers) {\\n        if (moneyServer) {\\n            const serverMaxRam = ns.getServerMaxRam(moneyServer);\\n            const threadsPerTarget = serversHackable.length !== 0\\n                ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n                : 0;\\n            ns.scp(ScriptPath.MONEY_FARM, moneyServer);\\n            if (threadsPerTarget !== 0) {\\n                if (ns.scriptRunning(ScriptPath.MONEY_FARM, moneyServer)) {\\n                    ns.scriptKill(ScriptPath.MONEY_FARM, moneyServer);\\n                }\\n                for (const target of serversHackable) {\\n                    ns.exec(ScriptPath.MONEY_FARM, moneyServer, threadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuTW9uZXlTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9ydW5Nb25leVNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxlQUFlLEdBQWEsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMxRTtRQUNELFlBQVksQ0FBQyxJQUFJLENBQ2hCLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FDMUQsQ0FBQztRQUNGLFlBQVksRUFBRSxDQUFDO0tBQ2Y7SUFFRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtRQUN2QyxJQUFJLFdBQVcsRUFBRTtZQUNoQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUMvRCxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRU4sRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzNDLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRTtvQkFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDdEU7YUFDRDtTQUNEO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///bce2fad8-e337-4c00-bb3a-422b679c3e4b\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///4c6020b5-b701-4dad-bca1-e8b12b44957c\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///ba19054d-6ace-4f50-ad62-b6d8d76a4586\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"blob:file:///fac8f823-d4d4-40e8-b837-f420eba68df1\",\"moduleSequenceNumber\":266}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":266,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const DATATYPE = {\\n    GB: Intl.NumberFormat('de-de', {\\n        style: 'unit',\\n        unit: 'gigabyte',\\n    }),\\n};\\nexport const MONEY = Intl.NumberFormat('en-us', {\\n    style: 'currency',\\n    currency: 'USD',\\n    maximumFractionDigits: 4,\\n    notation: 'compact',\\n});\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2Zvcm1hdHMvZm9ybWF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdkIsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1FBQzlCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLFVBQVU7S0FDaEIsQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7SUFDL0MsS0FBSyxFQUFFLFVBQVU7SUFDakIsUUFBUSxFQUFFLEtBQUs7SUFDZixxQkFBcUIsRUFBRSxDQUFDO0lBQ3hCLFFBQVEsRUFBRSxTQUFTO0NBQ25CLENBQUMsQ0FBQyJ9\",\"filename\":\"/scripts/formats/formats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":82,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const scriptName = ScriptPath.MONEY_FARM;\\n    const ramScriptNeeded = ns.getScriptRam(scriptName);\\n    const hackableServersWithMoney = servers.hackableWithRootAndMoneyAndRam;\\n    for (const server of hackableServersWithMoney) {\\n        const serverStats = ns.getServer(server);\\n        ns.scp(scriptName, server);\\n        if (ns.fileExists(scriptName, server)) {\\n            if (!ns.scriptRunning(scriptName, server)) {\\n                const maxNumberOfScripts = Math.floor(serverStats.maxRam / ramScriptNeeded);\\n                if (maxNumberOfScripts > 0) {\\n                    ns.exec(scriptName, server, maxNumberOfScripts, server);\\n                }\\n            }\\n        }\\n    }\\n    const hackableServersWitRam = servers.hackableWithRootAndRamAndNoMoney;\\n    for (const server of hackableServersWitRam) {\\n        ns.scriptKill(ScriptPath.MONEY_FARM, server);\\n        const serverStats = ns.getServer(server);\\n        let targets = ns.scan(server);\\n        targets = targets.filter((target) => target !== OwnServerList.HOME && ns.hasRootAccess(target));\\n        ns.scp(scriptName, server);\\n        const maxNumberTreadsPerTarget = Math.floor(serverStats.maxRam / ramScriptNeeded / targets.length);\\n        if (ns.fileExists(scriptName, server)) {\\n            for (const target of targets) {\\n                if (maxNumberTreadsPerTarget > 0) {\\n                    ns.exec(scriptName, server, maxNumberTreadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuUmVtb3RlT25UYXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1blJlbW90ZU9uVGFyZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDekMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwRCxNQUFNLHdCQUF3QixHQUM3QixPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDeEMsS0FBSyxNQUFNLE1BQU0sSUFBSSx3QkFBd0IsRUFBRTtRQUM5QyxNQUFNLFdBQVcsR0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTNCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ3BDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUNwQyxDQUFDO2dCQUVGLElBQUksa0JBQWtCLEdBQUcsQ0FBQyxFQUFFO29CQUMzQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3hEO2FBQ0Q7U0FDRDtLQUNEO0lBRUQsTUFBTSxxQkFBcUIsR0FDMUIsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0lBQzFDLEtBQUssTUFBTSxNQUFNLElBQUkscUJBQXFCLEVBQUU7UUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDdkIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQ3JFLENBQUM7UUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzQixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQzFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQ3JELENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ3RDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM3QixJQUFJLHdCQUF3QixHQUFHLENBQUMsRUFBRTtvQkFDakMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUM5RDthQUNEO1NBQ0Q7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///72a2e178-16e2-46ad-9cc0-b7f30cca5860\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///72504024-7082-4cd2-a711-28fc2d7f2dc4\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///c9cb8ebc-11a7-4a99-95fc-228bafe6695a\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"blob:file:///3c6ce737-66b4-49eb-b988-7f2af3662b73\",\"moduleSequenceNumber\":264}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":264,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const startServer = ns.getHostname();\\n    const target = ns.args[0];\\n    const path = (target, serverName, serverList, ignore, isFound) => {\\n        ignore.push(serverName);\\n        const scanResults = ns.scan(serverName);\\n        for (const server of scanResults) {\\n            if (ignore.includes(server)) {\\n                continue;\\n            }\\n            if (server === target) {\\n                serverList.push(server);\\n                return [serverList, true];\\n            }\\n            serverList.push(server);\\n            [serverList, isFound] = path(target, server, serverList, ignore, isFound);\\n            if (isFound) {\\n                return [serverList, isFound];\\n            }\\n            serverList.pop();\\n        }\\n        return [serverList, false];\\n    };\\n    if (target === undefined) {\\n        ns.alert('Please provide target server');\\n        return;\\n    }\\n    const [results, isFound] = path(target, startServer, [], [], false);\\n    if (!isFound) {\\n        ns.alert('Server not found!');\\n    }\\n    else {\\n        ns.tprintf(results.join(' --> '));\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZFJvdXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvZmluZFJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFFNUMsTUFBTSxJQUFJLEdBQUcsQ0FDWixNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsVUFBb0IsRUFDcEIsTUFBZ0IsRUFDaEIsT0FBZ0IsRUFDTSxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxLQUFLLE1BQU0sTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUNqQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzVCLFNBQVM7YUFDVDtZQUNELElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMxQjtZQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxRSxJQUFJLE9BQU8sRUFBRTtnQkFDWixPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87S0FDUDtJQUVELE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQzlCO1NBQU07UUFDTixFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNsQztBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"blob:file:///24569ee2-8dd2-4c4d-a313-c971bfc5ac18\",\"moduleSequenceNumber\":372}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":84,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    ns.tprintf(`Maximum GB :${DATATYPE.GB.format(ns.getPurchasedServerMaxRam())}`);\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const price = ns.getPurchasedServerCost(ram);\\n        ns.tprintf(`${i} -- Server ram: ${DATATYPE.GB.format(ram)} -- Price: ${MONEY.format(price)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdFNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2Nvc3RTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQ1QsZUFBZSxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxFQUFFLENBQ2xFLENBQUM7SUFFRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsT0FBTyxDQUNULEdBQUcsQ0FBQyxtQkFBbUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxDQUFDLE1BQU0sQ0FDdkUsS0FBSyxDQUNMLEVBQUUsQ0FDSCxDQUFDO0tBQ0Y7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///0ec338fb-a5b1-4488-bc8e-c139a2dda846\",\"moduleSequenceNumber\":13248},{\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"blob:file:///338a4f54-9603-49cb-8a3a-a2a54e722e61\",\"moduleSequenceNumber\":15790}],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":85,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackableSevers = servers.hackable;\\n    const player = ns.getPlayer();\\n    const serverEXPList = [];\\n    for (const server of hackableSevers) {\\n        const serverStats = ns.getServer(server);\\n        const serverWeakenTime = Math.round(ns.formulas.hacking.weakenTime(serverStats, player) / 1000);\\n        const serverHackinExp = ns.formulas.hacking.hackExp(serverStats, player);\\n        const expPerSecond = parseFloat((serverHackinExp / serverWeakenTime).toFixed(5));\\n        serverEXPList.push({\\n            server: server,\\n            exp: serverHackinExp,\\n            weakenTime: serverWeakenTime,\\n            expPerSecond: expPerSecond,\\n        });\\n    }\\n    serverEXPList.sort((a, b) => b.expPerSecond - a.expPerSecond);\\n    for (const entry of serverEXPList) {\\n        ns.print(entry);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QmVzdFNlcnZlclRvRmFybUV4cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2dldEJlc3RTZXJ2ZXJUb0Zhcm1FeHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsTUFBTSxhQUFhLEdBS2IsRUFBRSxDQUFDO0lBRVQsS0FBSyxNQUFNLE1BQU0sSUFBSSxjQUFjLEVBQUU7UUFDcEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ2xDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUMxRCxDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQzlCLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUMvQyxDQUFDO1FBRUYsYUFBYSxDQUFDLElBQUksQ0FBQztZQUNsQixNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxlQUFlO1lBQ3BCLFVBQVUsRUFBRSxnQkFBZ0I7WUFDNUIsWUFBWSxFQUFFLFlBQVk7U0FDMUIsQ0FBQyxDQUFDO0tBQ0g7SUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsS0FBSyxNQUFNLEtBQUssSUFBSSxhQUFhLEVBQUU7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/getBestServerToFarmExp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":86,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nimport { MONEY, DATATYPE } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const ramList = {};\\n    let newServerName = '';\\n    let serverNumber = 0;\\n    const serverType = (await ns.prompt('What kind of a server you want to purchase?', {\\n        type: 'select',\\n        choices: [OwnServerList.FARM_SERVER, OwnServerList.MONEY_SERVER],\\n    }));\\n    if (serverType === OwnServerList.FARM_SERVER) {\\n        while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.FARM_SERVER + '-' + serverNumber.toString();\\n    }\\n    if (serverType === OwnServerList.MONEY_SERVER) {\\n        while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.MONEY_SERVER + '-' + serverNumber.toString();\\n    }\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const cost = ns.getPurchasedServerCost(ram);\\n        ramList[DATATYPE.GB.format(ram) + ' - ' + MONEY.format(cost)] = Math.pow(2, i);\\n    }\\n    const serverRam = (await ns.prompt('How much ram do you want to choose', {\\n        type: 'select',\\n        choices: [...Object.keys(ramList)],\\n    }));\\n    const buy = (await ns.prompt(`Do you want to buy a ${newServerName} with ${DATATYPE.GB.format(ramList[serverRam])}. It will cost ${MONEY.format(ns.getPurchasedServerCost(ramList[serverRam]))}!`));\\n    if (buy) {\\n        ns.purchaseServer(newServerName, ramList[serverRam]);\\n        if (serverType === OwnServerList.MONEY_SERVER) {\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n        }\\n        if (serverType === OwnServerList.FARM_SERVER) {\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2VTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9wdXJjaGFzZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBMkIsRUFBRSxDQUFDO0lBQzNDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsTUFBTSxVQUFVLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzFDLDZDQUE2QyxFQUM3QztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDO0tBQ2hFLENBQ0QsQ0FBVyxDQUFDO0lBRWIsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFdBQVcsRUFBRTtRQUM3QyxPQUNDLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ3pFO1lBQ0QsWUFBWSxFQUFFLENBQUM7U0FDZjtRQUNELGFBQWEsR0FBRyxhQUFhLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDMUU7SUFFRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsWUFBWSxFQUFFO1FBQzlDLE9BQ0MsRUFBRSxDQUFDLFlBQVksQ0FDZCxhQUFhLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQzFELEVBQ0E7WUFDRCxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMzRTtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3ZFLENBQUMsRUFDRCxDQUFDLENBQ0QsQ0FBQztLQUNGO0lBRUQsTUFBTSxTQUFTLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3pDLG9DQUFvQyxFQUNwQztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xDLENBQ0QsQ0FBVyxDQUFDO0lBRWIsTUFBTSxHQUFHLEdBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3BDLHdCQUF3QixhQUFhLFNBQVMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQy9ELE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FDbEIsa0JBQWtCLEtBQUssQ0FBQyxNQUFNLENBQzlCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDN0MsR0FBRyxDQUNKLENBQVksQ0FBQztJQUVkLElBQUksR0FBRyxFQUFFO1FBQ1IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFlBQVksRUFBRTtZQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzdDLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztTQUNGO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///386c1c0d-4bf2-4701-9e01-6ec77a2b1cd7\",\"moduleSequenceNumber\":12970},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///50c9e6ca-b77a-4e53-8262-1f09f7f6d036\",\"moduleSequenceNumber\":12964},{\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"blob:file:///863e443b-bba1-4e23-a5fa-e58ad92abd46\",\"moduleSequenceNumber\":12993}],\"dependents\":[],\"ramUsage\":5.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":87,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns).serversTest;\\n    for (const server of servers) {\\n        ns.tprintf(JSON.stringify(server));\\n        ns.tprintf('\\\\n');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdDEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy90ZXN0MS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDaEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/test1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":88,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const divideSymbol = '_';\\n    const func = ns.args[0] ? ns.args[0] : 0;\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackable;\\n    let count = 1;\\n    switch (func) {\\n        case 0:\\n            for (const server of serversHackable) {\\n                printing(server);\\n                count++;\\n            }\\n            break;\\n        case 1:\\n            for (const server of servers.value) {\\n                printing(server);\\n                count++;\\n            }\\n            break;\\n        case 2:\\n            for (const server of servers.ownedServer) {\\n                printing(server);\\n                count++;\\n            }\\n            break;\\n    }\\n    function dash(minLength, length) {\\n        const diff = minLength - length;\\n        let dashString = '';\\n        for (let i = 0; i < diff; i++) {\\n            dashString = dashString + ' ';\\n        }\\n        dashString = dashString + divideSymbol;\\n        return dashString;\\n    }\\n    function printing(server) {\\n        const serverStats = ns.getServer(server);\\n        const rootAccess = serverStats.hasAdminRights ? 'YES' : 'NO ';\\n        const backdoor = serverStats.backdoorInstalled ? 'YES' : 'NO ';\\n        const dashNumber = dash(2, count.toString().length);\\n        const dashLvl = dash(4, serverStats.requiredHackingSkill.toString().length);\\n        const dashName = dash(20, server.length);\\n        const dashRam = dash(8, serverStats.maxRam.toString().length);\\n        ns.tprintf(`${count} ${dashNumber} Name: ${server} ${dashName} Lvl: ${serverStats.requiredHackingSkill} ${dashLvl} root: ${rootAccess} ${divideSymbol} backD: ${backdoor} ${divideSymbol} Ports: ${serverStats.openPortCount}/${serverStats.numOpenPortsRequired} ${divideSymbol} ${DATATYPE.GB.format(serverStats.maxRam)} ${dashRam} ${MONEY.format(serverStats.moneyMax)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFNlcnZlckhhY2thYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvbGlzdFNlcnZlckhhY2thYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUVkLFFBQVEsSUFBSSxFQUFFO1FBQ2IsS0FBSyxDQUFDO1lBQ0wsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7Z0JBQ3JDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtZQUNELE1BQU07UUFDUCxLQUFLLENBQUM7WUFDTCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ25DLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtZQUNELE1BQU07UUFDUCxLQUFLLENBQUM7WUFDTCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtZQUNELE1BQU07S0FDUDtJQUVELFNBQVMsSUFBSSxDQUFDLFNBQWlCLEVBQUUsTUFBYztRQUM5QyxNQUFNLElBQUksR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDO1FBQ2hDLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNwQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQzlCLFVBQVUsR0FBRyxVQUFVLEdBQUcsR0FBRyxDQUFDO1NBQzlCO1FBQ0QsVUFBVSxHQUFHLFVBQVUsR0FBRyxZQUFZLENBQUM7UUFDdkMsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELFNBQVMsUUFBUSxDQUFDLE1BQWM7UUFDL0IsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLFVBQVUsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUM5RCxNQUFNLFFBQVEsR0FBRyxXQUFXLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQy9ELE1BQU0sVUFBVSxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BELE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzVFLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5RCxFQUFFLENBQUMsT0FBTyxDQUNULEdBQUcsS0FBSyxJQUFJLFVBQVUsVUFBVSxNQUFNLElBQUksUUFBUSxTQUNqRCxXQUFXLENBQUMsb0JBQ2IsSUFBSSxPQUFPLFVBQVUsVUFBVSxJQUFJLFlBQVksV0FBVyxRQUFRLElBQUksWUFBWSxXQUNqRixXQUFXLENBQUMsYUFDYixJQUNDLFdBQVcsQ0FBQyxvQkFDYixJQUFJLFlBQVksSUFBSSxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FDckMsV0FBVyxDQUFDLE1BQU0sQ0FDbEIsSUFBSSxPQUFPLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FDcEQsQ0FBQztJQUNILENBQUM7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///b1bb3f06-041a-4ec9-a2fe-a10b2a2f4cfb\",\"moduleSequenceNumber\":82},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///059f28b0-e7e0-410e-a77e-9596607d1477\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///443149dc-98cf-49d9-860b-47d527f82eea\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"blob:file:///55a637b0-7c1f-4376-8a21-f275ddda6ad3\",\"moduleSequenceNumber\":268}],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":89,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NSEnums } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    ns.tprint('in Gang: ', ns.gang.inGang());\\n    ns.tprint('create Gang: ', ns.gang.createGang(NSEnums.LocationName.Sector12FoodNStuff));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2dhbmdzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWxELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxNQUFNLENBQ1IsZUFBZSxFQUNmLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FDM0QsQ0FBQztBQUNILENBQUMifQ==\",\"filename\":\"/scripts/gangs/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":90,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        const ownServers = new ServersList(ns).ownedServer;\\n        const player = ns.getPlayer();\\n        for (const server of ownServers) {\\n            const actRam = ns.getServerMaxRam(server);\\n            let exponent = Math.log(actRam) / Math.log(2);\\n            if (exponent < 20) {\\n                exponent++;\\n                let cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                for (let i = exponent; i <= 20; i++) {\\n                    if (ns.getPurchasedServerUpgradeCost(server, 2 ** i) > player.money) {\\n                        exponent = i - 1;\\n                        break;\\n                    }\\n                    exponent = 20;\\n                }\\n                cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                if (cost < player.money) {\\n                    ns.upgradePurchasedServer(server, 2 ** exponent);\\n                    if (server.includes(OwnServerList.MONEY_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n                    }\\n                    if (server.includes(OwnServerList.FARM_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n                    }\\n                }\\n            }\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3VwZ3JhZGVTZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBYSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDN0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTlCLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksUUFBUSxHQUFHLEVBQUUsRUFBRTtnQkFDbEIsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRW5FLEtBQUssSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRTt3QkFDcEUsUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2pCLE1BQU07cUJBQ047b0JBQ0QsUUFBUSxHQUFHLEVBQUUsQ0FBQztpQkFDZDtnQkFFRCxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRS9ELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3hCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO29CQUNqRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUNoRCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQzFEO29CQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEVBQUU7d0JBQy9DLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztxQkFDRjtpQkFDRDthQUNEO1NBQ0Q7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///82c46595-00c7-4ef6-839a-4da05fa70653\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///01599bd8-d18d-4c99-8872-773cbc9abd22\",\"moduleSequenceNumber\":76},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///dcb9f1b5-fa53-4a58-9e8c-3f525b8695b0\",\"moduleSequenceNumber\":75},{\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"blob:file:///b07349ca-d150-4292-9a92-d2121214d4b6\",\"moduleSequenceNumber\":143}],\"dependents\":[],\"ramUsage\":6.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"moneyServer-0\",\"moneyServer-1\",\"moneyServer-2\",\"darkweb\",\"farmServer-0\",\"farmServer-1\",\"farmServer-2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"ecorp\",\"httpPortOpen\":true,\"ip\":\"83.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":60.54599999999999,\"minDifficulty\":33,\"moneyAvailable\":891831284300,\"moneyMax\":891831284300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1301,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-705377.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100000010000000000000000000000000110111101111010000100100110000\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-354194.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"())aa(aa\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"megacorp\",\"httpPortOpen\":true,\"ip\":\"0.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":61.18600000000001,\"minDifficulty\":33,\"moneyAvailable\":1449286234850,\"moneyMax\":1449286234850,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1276,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903372.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1000000000000000000000000110000110010010110110111010100111001101\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"b-and-a\",\"httpPortOpen\":true,\"ip\":\"36.0.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":60.754000000000005,\"minDifficulty\":28,\"moneyAvailable\":716610569350,\"moneyMax\":716610569350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1137,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"blade\",\"httpPortOpen\":true,\"ip\":\"83.6.3.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":511.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[748116354650,426,1278,2130]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1862731.6554255781,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.148,\"onlineExpGained\":873643.288728704,\"onlineMoneyMade\":748116354650,\"onlineRunningTime\":9206.209999998433,\"pid\":67,\"ramUsage\":2.4,\"server\":\"blade\",\"threads\":213,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///cae0b3e9-b2d0-44e8-88f6-b6aab7e3441b\",\"moduleSequenceNumber\":145}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"blade\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":84.552,\"minDifficulty\":32,\"moneyAvailable\":374058177325,\"moneyMax\":374058177325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":963,\"serverGrowth\":58}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-816024.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"5657021\",82],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nwo\",\"httpPortOpen\":true,\"ip\":\"74.5.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":555778399050,\"moneyMax\":555778399050,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1173,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-642610.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":4595,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"clarkinc\",\"httpPortOpen\":true,\"ip\":\"95.0.5.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"ecorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":19.615999999999996,\"minDifficulty\":19,\"moneyAvailable\":0,\"moneyMax\":558967671500,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1045,\"serverGrowth\":54}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-511108.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110000000000000000000000010110111111001010001001101110101001011\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnitek\",\"httpPortOpen\":true,\"ip\":\"81.8.0.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[365787604866,424,530,954]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":575722.6085002425,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":373313.74569376826,\"onlineMoneyMade\":365787604866,\"onlineRunningTime\":9206.209999998433,\"pid\":68,\"ramUsage\":2.4,\"server\":\"omnitek\",\"threads\":106,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///43ef1da3-9010-4dc0-bcfc-d04b31abf22f\",\"moduleSequenceNumber\":146}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omnitek\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"fulcrumtech\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":58.39800000000001,\"minDifficulty\":32,\"moneyAvailable\":392925129350,\"moneyMax\":392925129350,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1071,\"serverGrowth\":97}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-392756.cct\",\"type\":\"Array Jumping Game\",\"data\":[6,3,10,5,1,6,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"4sigma\",\"httpPortOpen\":true,\"ip\":\"58.7.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":41.754000000000005,\"minDifficulty\":20,\"moneyAvailable\":523989745650,\"moneyMax\":523989745650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":989,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"kuai-gong\",\"httpPortOpen\":true,\"ip\":\"14.3.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":61.098,\"minDifficulty\":33,\"moneyAvailable\":574579411575,\"moneyMax\":574579411575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1057,\"serverGrowth\":94}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-220016.cct\",\"type\":\"Array Jumping Game II\",\"data\":[7,2,5,4,4,4,1,1,2,3,0,2,2,3,5,1,3,1,2,4,1,0,3],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":true,\"ip\":\"96.4.3.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":2047.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[167792545100,3412,9383,5118]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":8591100.449985882,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":3776606.8742260123,\"onlineMoneyMade\":167792545100,\"onlineRunningTime\":9146.009999998214,\"pid\":69,\"ramUsage\":2.4,\"server\":\"fulcrumtech\",\"threads\":853,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///27d81c74-40a0-450c-b22e-0e4a4a286d73\",\"moduleSequenceNumber\":147}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"fulcrumtech\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":30,\"minDifficulty\":30,\"moneyAvailable\":41948136275,\"moneyMax\":41948136275,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1199,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":true,\"ip\":\"90.0.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":33,\"minDifficulty\":33,\"moneyAvailable\":2009710.0531058265,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1168,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"stormtech\",\"httpPortOpen\":true,\"ip\":\"12.9.1.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":29,\"minDifficulty\":29,\"moneyAvailable\":28268192175,\"moneyMax\":28268192175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":884,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"defcomm\",\"httpPortOpen\":true,\"ip\":\"22.5.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":77.856,\"minDifficulty\":30,\"moneyAvailable\":21200529575,\"moneyMax\":21200529575,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1026,\"serverGrowth\":49}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-206605-Daedalus.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"1010000010000010110010011110001001111001110010010010101101000111\",\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"7.3.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":55.6,\"minDifficulty\":25,\"moneyAvailable\":17887054300,\"moneyMax\":17887054300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":936,\"serverGrowth\":53}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"40.2.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[2240358770,78,91,182]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":117870.76249419211,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":61792.50499893254,\"onlineMoneyMade\":2240358770,\"onlineRunningTime\":9206.209999998433,\"pid\":70,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///453ff0cf-7386-4c01-8e91-3c6034c04120\",\"moduleSequenceNumber\":148}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"4sigma\",\".\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":55.57,\"minDifficulty\":29,\"moneyAvailable\":16549144825,\"moneyMax\":16549144825,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":803,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"46.1.5.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[20700440656,212,424,689]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":451481.56420907937,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":244022.46959634972,\"onlineMoneyMade\":20700440656,\"onlineRunningTime\":9206.209999998433,\"pid\":71,\"ramUsage\":2.4,\"server\":\"vitalife\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///712f3c1f-9272-4f47-b5b0-f4e927697c34\",\"moduleSequenceNumber\":149}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":27.19,\"minDifficulty\":27,\"moneyAvailable\":0,\"moneyMax\":19009691800,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":853,\"serverGrowth\":60}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-661401.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[177,142,52,43,70,145,140,120,81,38,131,151,123,84,12,2,36,64,19,159,39,47,70,81,52,155,15,178,71,127,185,10,65,173,69,96,146,82,172,172,64,167,130,106,93],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"icarus\",\"httpPortOpen\":true,\"ip\":\"65.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":55.288000000000004,\"minDifficulty\":31,\"moneyAvailable\":23239833025,\"moneyMax\":23239833025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":859,\"serverGrowth\":85}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-610921.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[10,[[1,7],[6,8],[2,6],[1,8],[0,6],[3,6],[7,9]]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"66.8.7.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[15735895570,318,477,742]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":432946.20734643517,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":273594.1102227345,\"onlineMoneyMade\":15735895570,\"onlineRunningTime\":9296.20999999876,\"pid\":72,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///b8ab724b-d0ad-47bd-aae6-616ce8d3320e\",\"moduleSequenceNumber\":150}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"nova-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":51.184,\"minDifficulty\":29,\"moneyAvailable\":28562207275,\"moneyMax\":28562207275,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":807,\"serverGrowth\":89}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-132769-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[35,42,148,60,6,30,136,148,144,102,98,23,1,196,73,26,84,59,170,159,108,138,190,147,111,62,68,183,92,160,148,110,98],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"10.3.7.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[5315886186,104,234,364]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":211851.89067070832,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":120595.05007856188,\"onlineMoneyMade\":5315886186,\"onlineRunningTime\":9206.209999998433,\"pid\":73,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///a477e4c1-2740-459c-8234-987114827fb5\",\"moduleSequenceNumber\":151}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":151,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":49.312,\"minDifficulty\":26,\"moneyAvailable\":19240798375,\"moneyMax\":19240798375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":850,\"serverGrowth\":74}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"34.0.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[945506292,30,48,84]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":46893.17371373132,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":26066.317245207276,\"onlineMoneyMade\":945506292,\"onlineRunningTime\":9206.209999998433,\"pid\":74,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///526b9a6a-29ff-48fc-944c-0a8097416e65\",\"moduleSequenceNumber\":152}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":152,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":14732610375,\"moneyMax\":14732610375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":865,\"serverGrowth\":79}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":true,\"ip\":\"94.1.6.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":26.631999999999998,\"minDifficulty\":26,\"moneyAvailable\":0,\"moneyMax\":20466258375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":908,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"52.4.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":40.646,\"minDifficulty\":21,\"moneyAvailable\":19270174725,\"moneyMax\":19270174725,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":869,\"serverGrowth\":72}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"92.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":55.084,\"minDifficulty\":27,\"moneyAvailable\":27671959125,\"moneyMax\":27671959125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":913,\"serverGrowth\":64}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"25.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[2483690682,24,42,66]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":47200.948855684626,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":25146.32957772936,\"onlineMoneyMade\":2483690682,\"onlineRunningTime\":9206.209999998433,\"pid\":75,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///4c6c8447-0ebb-49bc-943a-aa068b3fa523\",\"moduleSequenceNumber\":153}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":153,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\",\"defcomm\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":56.396,\"minDifficulty\":29,\"moneyAvailable\":24023356025,\"moneyMax\":24023356025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":909,\"serverGrowth\":70}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"32.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":39.078,\"minDifficulty\":20,\"moneyAvailable\":25318053725,\"moneyMax\":25318053725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":794,\"serverGrowth\":72}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"17.8.2.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":20443850175,\"moneyMax\":20443850175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":808,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-718523.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"4ELeU5SBaAR4BaA2WBaA2WBa2WBz33333JHIFFFFFFFFGP4c7xJAs7xJAs71GxJAs7iAs7iAs7iFZiFZiFZi\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"55.0.8.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[1338807102,42,60,90]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":53269.00735676534,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":29867.655176800006,\"onlineMoneyMade\":1338807102,\"onlineRunningTime\":9206.209999998433,\"pid\":76,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ff41c6c6-b111-4c3b-8834-afd789aed489\",\"moduleSequenceNumber\":154}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":154,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":45.916,\"minDifficulty\":25,\"moneyAvailable\":20069889550,\"moneyMax\":20069889550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"67.7.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":52.74,\"minDifficulty\":25,\"moneyAvailable\":6899677502.244248,\"moneyMax\":34127138875,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":854,\"serverGrowth\":52}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-115058.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[32,1,10,148,74,23,165,141]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"17.5.1.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[5268398733,91,104,169]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":103988.30773881407,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":59854.56801419895,\"onlineMoneyMade\":5268398733,\"onlineRunningTime\":9296.20999999876,\"pid\":77,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///9bb0f55e-1cd8-4171-a6e0-33016dfc04e4\",\"moduleSequenceNumber\":155}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":155,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":49.846000000000004,\"minDifficulty\":27,\"moneyAvailable\":38590012625,\"moneyMax\":38590012625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":846,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-397283-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[98,61,158,11,12,187,97,96,197,107,52,115,89,47,75,57,37,179,5,28,85],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-323987-Daedalus.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"4523331171\",\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"23.0.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"applied-energetics\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":44.86,\"minDifficulty\":24,\"moneyAvailable\":29278864675,\"moneyMax\":29278864675,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":79}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-615747.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[22,12,44],[7,40,14],[7,14,33]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-315159.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,14],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"40.8.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":57.702000000000005,\"minDifficulty\":30,\"moneyAvailable\":33981973175,\"moneyMax\":33981973175,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":824,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-923394.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":998498977,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"97.7.5.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[7379195980,156,234,416]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":207682.97326732497,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":126741.07880157397,\"onlineMoneyMade\":7379195980,\"onlineRunningTime\":9296.20999999876,\"pid\":78,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e0954ba3-2006-41c8-8fe3-7b9e95816d4e\",\"moduleSequenceNumber\":156}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":156,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":47.872,\"minDifficulty\":25,\"moneyAvailable\":25652247050,\"moneyMax\":25652247050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":790,\"serverGrowth\":74}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-293055-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[72,117,80,61,82,58,117,77,18,115,84,199,61,145,200],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"23.0.1.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[1337010114,30,60,102]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":64390.29826137814,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":32608.451769494593,\"onlineMoneyMade\":1337010114,\"onlineRunningTime\":9296.20999999876,\"pid\":79,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1de3abc1-64aa-4001-8c0e-77c3a18eb682\",\"moduleSequenceNumber\":157}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":157,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":53.668,\"minDifficulty\":26,\"moneyAvailable\":19431338050,\"moneyMax\":19431338050,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":676,\"serverGrowth\":61}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"1.3.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[2557964766,132,174,240]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":117235.9021749254,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":54381.49323313836,\"onlineMoneyMade\":2557964766,\"onlineRunningTime\":9446.209999999306,\"pid\":80,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///783ee50e-4233-434e-930a-3dafdefb72db\",\"moduleSequenceNumber\":158}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":158,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":15,\"minDifficulty\":15,\"moneyAvailable\":15148982875,\"moneyMax\":15148982875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":515,\"serverGrowth\":53}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-954828.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"191228276\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"2.5.7.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[6150668472,234,221,325]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":200600.6884590093,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":100994.20171868546,\"onlineMoneyMade\":6150668472,\"onlineRunningTime\":9296.20999999876,\"pid\":81,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3cf27c2a-97cd-48fa-a030-ac4cd6e10ef4\",\"moduleSequenceNumber\":159}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":159,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":46.432,\"minDifficulty\":22,\"moneyAvailable\":18599402625,\"moneyMax\":18599402625,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":553,\"serverGrowth\":59}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"17.0.4.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[3213939027,117,195,364]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":214879.18743765567,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":110012.5299012134,\"onlineMoneyMade\":3213939027,\"onlineRunningTime\":9296.20999999876,\"pid\":82,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///a67220d9-6451-4f45-9f6a-23ab12c331bc\",\"moduleSequenceNumber\":160}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":160,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":25,\"minDifficulty\":25,\"moneyAvailable\":9629670500,\"moneyMax\":9629670500,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":429,\"serverGrowth\":33}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"13.9.7.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[8200143199,954,3074,1802]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1591673.4447780629,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":630485.4371716969,\"onlineMoneyMade\":8200143199,\"onlineRunningTime\":9446.209999999306,\"pid\":83,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///70415568-0b40-41f5-b358-e3cdd4ff5846\",\"moduleSequenceNumber\":161}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":161,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":37.488,\"minDifficulty\":16,\"moneyAvailable\":5372578600,\"moneyMax\":5372578600,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":425,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"93.5.7.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[1419991308,42,54,108]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":55079.40727637683,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":30909.03010595902,\"onlineMoneyMade\":1419991308,\"onlineRunningTime\":9206.209999998433,\"pid\":84,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///41a48301-4684-4d10-a9cf-a96129c894d3\",\"moduleSequenceNumber\":162}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":162,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":24.591999999999995,\"minDifficulty\":24,\"moneyAvailable\":0,\"moneyMax\":20786854150,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":755,\"serverGrowth\":82}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-932654.cct\",\"type\":\"Total Ways to Sum\",\"data\":74,\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-490380.cct\",\"type\":\"Total Ways to Sum\",\"data\":41,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"17.3.8.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[1453942398,126,204,246]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":137084.9465007668,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.15000000001,\"onlineExpGained\":60585.02118536785,\"onlineMoneyMade\":1453942398,\"onlineRunningTime\":9446.209999999306,\"pid\":85,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6d1f41c5-5f39-457b-82e1-4fe0c49c6a8f\",\"moduleSequenceNumber\":163}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":163,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":39.756,\"minDifficulty\":16,\"moneyAvailable\":8430643175,\"moneyMax\":8430643175,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":430,\"serverGrowth\":42}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-332967.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((())a()))(a(())a\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"78.5.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"johnson-ortho\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":46.13,\"minDifficulty\":24,\"moneyAvailable\":13395379550,\"moneyMax\":13395379550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":607,\"serverGrowth\":70}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318182-Daedalus.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"4590915\",-65],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"64.8.0.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[9034743874,182,520,910]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":530760.5720230921,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.151,\"onlineExpGained\":248346.62459360404,\"onlineMoneyMade\":9034743874,\"onlineRunningTime\":9446.209999999306,\"pid\":86,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///fa49d6c0-7b29-4558-8c06-98bc0ae997d4\",\"moduleSequenceNumber\":164}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":164,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.403999999999996,\"minDifficulty\":22,\"moneyAvailable\":0,\"moneyMax\":12896441300,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":405,\"serverGrowth\":29}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"29.5.9.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[4544669792,1118,2522,1534]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1227717.7996154923,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.151,\"onlineExpGained\":486588.29205252836,\"onlineMoneyMade\":4544669792,\"onlineRunningTime\":9446.209999999306,\"pid\":87,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///9d7cb544-1070-4a72-bde1-3dfacd3a286c\",\"moduleSequenceNumber\":165}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":165,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":30.602000000000004,\"minDifficulty\":14,\"moneyAvailable\":4064964225,\"moneyMax\":4064964225,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":291,\"serverGrowth\":52}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"73.3.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":42.39,\"minDifficulty\":21,\"moneyAvailable\":6124131875,\"moneyMax\":6124131875,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":324,\"serverGrowth\":60}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"84.7.4.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[1099704960,126,144,204]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":127461.40514948539,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.151,\"onlineExpGained\":65360.651612032554,\"onlineMoneyMade\":1099704960,\"onlineRunningTime\":9446.209999999306,\"pid\":88,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///0c7c74b6-f602-4e90-a0b7-63f2e21c5d67\",\"moduleSequenceNumber\":166}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":166,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\",\"zb-institute\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":45.099999999999994,\"minDifficulty\":23,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":399,\"serverGrowth\":64}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"40.7.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"syscore\",\"catalyst\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":18.46,\"minDifficulty\":18,\"moneyAvailable\":0,\"moneyMax\":1754812425,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":251,\"serverGrowth\":50}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"81.5.2.8\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1611592,3917,4188,426]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":331742.3152104614,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.151,\"onlineExpGained\":133239.02410339165,\"onlineMoneyMade\":1611592,\"onlineRunningTime\":9536.009999999633,\"pid\":89,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7aee9bb0-f3c3-4519-93e0-781466526b39\",\"moduleSequenceNumber\":167}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":167,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":4.785999999999999,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"71.4.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[11207262,3438,15576,13122]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3155120.87423789,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.151,\"onlineExpGained\":1259872.000185089,\"onlineMoneyMade\":11207262,\"onlineRunningTime\":9536.009999999633,\"pid\":90,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ef4ac645-d91b-4c42-ab06-8b83b5b87cf9\",\"moduleSequenceNumber\":168}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":168,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":86.348,\"minDifficulty\":3,\"moneyAvailable\":1777014.872910806,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"38.7.0.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[41768616,3696,11598,10008]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2533552.9122216734,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":962856.5372611573,\"onlineMoneyMade\":41768616,\"onlineRunningTime\":9446.209999999306,\"pid\":91,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///58912611-81fe-4cc0-b4e6-f56ce2d918d0\",\"moduleSequenceNumber\":169}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":169,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.168,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"28.9.2.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[653545692,7134,11922,7098]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2987365.273200978,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":1139203.4788691984,\"onlineMoneyMade\":653545692,\"onlineRunningTime\":9446.209999999306,\"pid\":92,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///054e7922-cd02-45c9-a2ee-573744422b4b\",\"moduleSequenceNumber\":170}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":170,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"95.5.3.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[169768170,3315,6162,4940]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2244971.473976926,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":894357.9184545215,\"onlineMoneyMade\":169768170,\"onlineRunningTime\":9446.209999999306,\"pid\":93,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///df061f0d-c56c-4a67-a8cb-05de423548cc\",\"moduleSequenceNumber\":171}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":171,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":18.478,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"65.9.6.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[39582282,4278,6792,5736]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2199654.436745361,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":871879.9790327519,\"onlineMoneyMade\":39582282,\"onlineRunningTime\":9446.209999999306,\"pid\":94,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///90dcfc3d-bbca-4275-99a1-f206e2c9eb2c\",\"moduleSequenceNumber\":172}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":172,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":21.558,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"85.4.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[95308967,3965,6721,6435]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":2599085.8603772307,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":1058840.320033775,\"onlineMoneyMade\":95308967,\"onlineRunningTime\":9446.209999999306,\"pid\":95,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///08b5152b-1b32-42c5-b62e-127a84d48e5a\",\"moduleSequenceNumber\":173}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":173,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":23.36,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"10.3.4.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[2253464798,2626,3744,4368]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1818363.7904858484,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":756902.8166087838,\"onlineMoneyMade\":2253464798,\"onlineRunningTime\":9446.209999999306,\"pid\":96,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7dd63321-7ee9-47ae-8bb8-b5900e0ab244\",\"moduleSequenceNumber\":174}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":174,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"the-hub\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":28.57,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-707786.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":38,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-92931-Daedalus.cct\",\"type\":\"Array Jumping Game II\",\"data\":[2,3,3,0,3,2,3,5,1,3,2,2,0,2,1],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-410856-Daedalus.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[84,121,162,196,147,46,99,8,47,145,189,66,49,125,151,62,80,134,120,64,17,139,140,86,36,182,21,83,47,35,184,101,70,18,124,167,68,158,62,11,133,109,21],\"reward\":{\"name\":\"Daedalus\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"91.6.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[61783926,3012,5052,4806]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1428012.7393623886,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":567804.8885215215,\"onlineMoneyMade\":61783926,\"onlineRunningTime\":9446.209999999306,\"pid\":97,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///a2eda6b0-1a16-44d9-9c15-5d34633f751a\",\"moduleSequenceNumber\":175}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":175,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":22.869999999999997,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"72.0.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[29310846,3084,5082,4830]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1398460.4626107865,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":569961.1096171731,\"onlineMoneyMade\":29310846,\"onlineRunningTime\":9446.209999999306,\"pid\":98,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///24d2b196-34f1-41f5-8517-b759fb541baa\",\"moduleSequenceNumber\":176}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":176,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.267999999999999,\"minDifficulty\":5,\"moneyAvailable\":0,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"79.0.5.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[290492657,2691,4290,4082]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1426988.377471307,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":580342.9148925244,\"onlineMoneyMade\":290492657,\"onlineRunningTime\":9446.209999999306,\"pid\":99,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1b432e24-2f1c-4397-9cfc-9307ed0704c2\",\"moduleSequenceNumber\":177}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":177,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"12.0.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[316244019,3237,5707,5603]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1599094.801854961,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":649901.0102374352,\"onlineMoneyMade\":316244019,\"onlineRunningTime\":9446.209999999306,\"pid\":100,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3bc4d82f-8ec1-4ac8-8c93-2aacfbeb7f4c\",\"moduleSequenceNumber\":178}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":178,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":18.728,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"63.3.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[640084250,1040,1560,1781]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":705462.4415820405,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":301508.3888069564,\"onlineMoneyMade\":640084250,\"onlineRunningTime\":9446.209999999306,\"pid\":101,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///8862bbb5-5d03-4979-be88-c1e5a0188d08\",\"moduleSequenceNumber\":179}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":179,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"max-hardware\",\"netlink\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":26.973999999999997,\"minDifficulty\":10,\"moneyAvailable\":1584580650,\"moneyMax\":1584580650,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":189,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"16.2.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":37.424,\"minDifficulty\":14,\"moneyAvailable\":1132054650,\"moneyMax\":1132054650,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":263,\"serverGrowth\":32}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"82.2.2.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[484275831,1586,2535,2886]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1251210.349264602,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":501371.9827646314,\"onlineMoneyMade\":484275831,\"onlineRunningTime\":9446.209999999306,\"pid\":102,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///325b10f8-5717-4faf-a906-c6eef55fa3bc\",\"moduleSequenceNumber\":180}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":180,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.425999999999998,\"minDifficulty\":10,\"moneyAvailable\":0,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-54598.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[173,101,169,3,87,174,194,135,138,73,181,129,24,6,23,54],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"38.5.5.2\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[17856207561.789944,1908,5830,3074]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3112656.8536087694,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":1147199.0661319587,\"onlineMoneyMade\":17856207561.789944,\"onlineRunningTime\":9446.209999999306,\"pid\":103,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":106,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///4f5f7a5c-6cd0-4b51-82e6-8a095bc6be06\",\"moduleSequenceNumber\":181}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":181,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":41.3,\"minDifficulty\":15,\"moneyAvailable\":6250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":475,\"serverGrowth\":34}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-290070.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[2,4],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":true,\"ip\":\"54.8.1.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[5075816122,65,91,169]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":87175.25426040267,\"offlineMoneyMade\":0,\"offlineRunningTime\":67627.152,\"onlineExpGained\":44717.89592272662,\"onlineMoneyMade\":5075816122,\"onlineRunningTime\":9206.209999998433,\"pid\":104,\"ramUsage\":2.4,\"server\":\"powerhouse-fitness\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///85a092d8-9d24-4979-a0ab-a2eac04d3ead\",\"moduleSequenceNumber\":182}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"powerhouse-fitness\",\"moduleSequenceNumber\":182,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\".\",\"fulcrumassets\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":61,\"hackDifficulty\":20.44,\"minDifficulty\":20,\"moneyAvailable\":0,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1065,\"serverGrowth\":53}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-506846-CyberSec.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"359953695334\",-70],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"49.7.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":17.532,\"minDifficulty\":17,\"moneyAvailable\":0,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":738,\"serverGrowth\":56}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"27.2.0.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":122.39999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,17,51,102]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28464.78046395031,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":322,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aab94816-3878-43a1-9d6c-992d8d290449\",\"moduleSequenceNumber\":183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,34,68,119]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40384.690120873216,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":323,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aab94816-3878-43a1-9d6c-992d8d290449\",\"moduleSequenceNumber\":183}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,34,68,119]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38303.005063096236,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":324,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aab94816-3878-43a1-9d6c-992d8d290449\",\"moduleSequenceNumber\":183}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///aab94816-3878-43a1-9d6c-992d8d290449\",\"moduleSequenceNumber\":183}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":183,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":521,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-411783.cct\",\"type\":\"Total Ways to Sum\",\"data\":51,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"27.8.6.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":14.399999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[78912804,87,84,84]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26577.42150491726,\"onlineMoneyMade\":78912804,\"onlineRunningTime\":3457.009999999047,\"pid\":320,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6b0605f3-b9e7-4e28-9c37-41fb94dcad9f\",\"moduleSequenceNumber\":184}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[585612402,48,48,48]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13148.157081038375,\"onlineMoneyMade\":585612402,\"onlineRunningTime\":3457.009999999047,\"pid\":321,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":3,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6b0605f3-b9e7-4e28-9c37-41fb94dcad9f\",\"moduleSequenceNumber\":184}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6b0605f3-b9e7-4e28-9c37-41fb94dcad9f\",\"moduleSequenceNumber\":184}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":184,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":359,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-97809.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":6459368,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"21.5.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":14.399999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,294,342,330]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61917.086662236885,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":319,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":6,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///5ad9fc97-73b9-421d-93f3-1d86d1f490cc\",\"moduleSequenceNumber\":185}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///5ad9fc97-73b9-421d-93f3-1d86d1f490cc\",\"moduleSequenceNumber\":185}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":185,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":219,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-783557.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[24,34],[1,5],[23,28],[16,20]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"50.6.7.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":14.399999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,4,10,14]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5111.042597099466,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":325,\"ramUsage\":2.4,\"server\":\".\",\"threads\":2,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///080bec3b-9973-42b2-9cd6-cca6e0d7bf49\",\"moduleSequenceNumber\":186}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,2,4,10]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2933.525490626881,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":326,\"ramUsage\":2.4,\"server\":\".\",\"threads\":2,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///080bec3b-9973-42b2-9cd6-cca6e0d7bf49\",\"moduleSequenceNumber\":186}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,2,8,14]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3402.0377286943326,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":327,\"ramUsage\":2.4,\"server\":\".\",\"threads\":2,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///080bec3b-9973-42b2-9cd6-cca6e0d7bf49\",\"moduleSequenceNumber\":186}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///080bec3b-9973-42b2-9cd6-cca6e0d7bf49\",\"moduleSequenceNumber\":186}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":186,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"helios\",\"b-and-a\",\"powerhouse-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":544,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-523689.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[75,108,169,76,169,130,24,143,4,65,116,148,200,149,90,86,22,74,183,12,178,14,69,98,162,195,33,26,7,137,173,105,146,29,44,161,37,100,91,195,131,103,180,58,34],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"84.5.6.0\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":4.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,315,331,333]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39544.03009370429,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":317,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///af55ddbd-3d31-47ea-a168-c74043aa20c9\",\"moduleSequenceNumber\":187}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,199,206,209]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":34640.623602112275,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":318,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///af55ddbd-3d31-47ea-a168-c74043aa20c9\",\"moduleSequenceNumber\":187}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///af55ddbd-3d31-47ea-a168-c74043aa20c9\",\"moduleSequenceNumber\":187}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":187,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":55,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"The-Cave\",\"httpPortOpen\":true,\"ip\":\"49.3.0.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"97.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"65.9.2.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-0\",\"httpPortOpen\":true,\"ip\":\"9.9.6.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048572,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1654893155.373138,11928200,12295755,1352325]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":506174209.2468004,\"onlineMoneyMade\":1654893155.373138,\"onlineRunningTime\":3457.009999999047,\"pid\":328,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[11818507354.272408,2309355,7073700,6685340]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":663118379.353647,\"onlineMoneyMade\":11818507354.272408,\"onlineRunningTime\":3457.009999999047,\"pid\":329,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[20125000000,2427250,4882240,4861435]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":518384301.0092129,\"onlineMoneyMade\":20125000000,\"onlineRunningTime\":3457.009999999047,\"pid\":330,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[28591786464,4147130,4327440,4161000]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":635611520.0764403,\"onlineMoneyMade\":28591786464,\"onlineRunningTime\":3457.009999999047,\"pid\":331,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[12443750000,2871090,2919635,2919635]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":479062414.92837137,\"onlineMoneyMade\":12443750000,\"onlineRunningTime\":3457.009999999047,\"pid\":332,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[5475000000,2226135,2302420,2302420]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":295006450.503091,\"onlineMoneyMade\":5475000000,\"onlineRunningTime\":3457.009999999047,\"pid\":333,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[11200000000,2302420,2364835,2371770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":313836649.4713746,\"onlineMoneyMade\":11200000000,\"onlineRunningTime\":3457.009999999047,\"pid\":334,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[14125000000,1414740,1442480,1442480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":285203670.4519587,\"onlineMoneyMade\":14125000000,\"onlineRunningTime\":3457.009999999047,\"pid\":335,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[13125000000,1151210,1192820,1185885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":225888543.7018684,\"onlineMoneyMade\":13125000000,\"onlineRunningTime\":3457.009999999047,\"pid\":336,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[21000000000,1192820,1234430,1234430]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":170579449.47738293,\"onlineMoneyMade\":21000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":337,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[23000000000,575605,582540,582540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131885236.69550005,\"onlineMoneyMade\":23000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":338,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[57600000000,901550,922355,922355]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":164155028.65291068,\"onlineMoneyMade\":57600000000,\"onlineRunningTime\":3457.009999999047,\"pid\":339,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[18000000000,443840,464645,457710]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":95110965.76920725,\"onlineMoneyMade\":18000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":340,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[55460322750,374490,388360,381425]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":86829370.41903947,\"onlineMoneyMade\":55460322750,\"onlineRunningTime\":3457.009999999047,\"pid\":341,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[50810647521,201115,194180,194180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":81597528.86255783,\"onlineMoneyMade\":50810647521,\"onlineRunningTime\":3457.009999999047,\"pid\":342,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[22641093000,208050,208050,201115]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":61386448.63660104,\"onlineMoneyMade\":22641093000,\"onlineRunningTime\":3457.009999999047,\"pid\":343,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[124376038759,214985,214985,208050]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70653860.28569709,\"onlineMoneyMade\":124376038759,\"onlineRunningTime\":3457.009999999047,\"pid\":344,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[122482637500,138700,138700,131765]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":63609150.55403356,\"onlineMoneyMade\":122482637500,\"onlineRunningTime\":3457.009999999047,\"pid\":345,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[102574998768,104025,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":51336291.46176478,\"onlineMoneyMade\":102574998768,\"onlineRunningTime\":3457.009999999047,\"pid\":346,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[85756473830,55480,97090,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":40086170.627185024,\"onlineMoneyMade\":85756473830,\"onlineRunningTime\":3457.009999999047,\"pid\":347,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[92605149826,124830,124830,117895]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":44616494.96720129,\"onlineMoneyMade\":92605149826,\"onlineRunningTime\":3457.009999999047,\"pid\":348,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[56170580631,48545,90155,83220]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39229581.18392199,\"onlineMoneyMade\":56170580631,\"onlineRunningTime\":3457.009999999047,\"pid\":349,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[142593748279,117895,117895,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42829472.16315246,\"onlineMoneyMade\":142593748279,\"onlineRunningTime\":3457.009999999047,\"pid\":350,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[87500000000,104025,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35769993.647984535,\"onlineMoneyMade\":87500000000,\"onlineRunningTime\":3457.009999999047,\"pid\":351,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[240518663926,110960,110960,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":39698490.06019093,\"onlineMoneyMade\":240518663926,\"onlineRunningTime\":3457.009999999047,\"pid\":352,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[201516869610,76285,76285,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35917681.48302995,\"onlineMoneyMade\":201516869610,\"onlineRunningTime\":3457.009999999047,\"pid\":353,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[133953795500,69350,69350,62415]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":35548461.89541653,\"onlineMoneyMade\":133953795500,\"onlineRunningTime\":3457.009999999047,\"pid\":354,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[136019366350,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27292711.916381285,\"onlineMoneyMade\":136019366350,\"onlineRunningTime\":3457.009999999047,\"pid\":355,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[123750000000,76285,69350,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27469937.318435702,\"onlineMoneyMade\":123750000000,\"onlineRunningTime\":3457.009999999047,\"pid\":356,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[166294833200,55480,48545,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27853925.689553633,\"onlineMoneyMade\":166294833200,\"onlineRunningTime\":3457.009999999047,\"pid\":357,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[140489226850,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26362278.555595573,\"onlineMoneyMade\":140489226850,\"onlineRunningTime\":3457.009999999047,\"pid\":358,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[179565729350,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26052134.10200031,\"onlineMoneyMade\":179565729350,\"onlineRunningTime\":3457.009999999047,\"pid\":359,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[227862483525,62415,62415,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26879185.978254296,\"onlineMoneyMade\":227862483525,\"onlineRunningTime\":3457.009999999047,\"pid\":360,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[99294868950,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25520457.89583705,\"onlineMoneyMade\":99294868950,\"onlineRunningTime\":3457.009999999047,\"pid\":361,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[171373243650,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25520457.89583705,\"onlineMoneyMade\":171373243650,\"onlineRunningTime\":3457.009999999047,\"pid\":362,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[122663101050,41610,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24693406.01958307,\"onlineMoneyMade\":122663101050,\"onlineRunningTime\":3457.009999999047,\"pid\":363,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[169909865875,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22153175.256802995,\"onlineMoneyMade\":169909865875,\"onlineRunningTime\":3457.009999999047,\"pid\":364,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[204952052725,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25121700.741214607,\"onlineMoneyMade\":204952052725,\"onlineRunningTime\":3457.009999999047,\"pid\":365,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[231540075750,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24457105.4835105,\"onlineMoneyMade\":231540075750,\"onlineRunningTime\":3457.009999999047,\"pid\":366,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[115444790250,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23393753.07118396,\"onlineMoneyMade\":115444790250,\"onlineRunningTime\":3457.009999999047,\"pid\":367,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[114058150800,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23098377.401093252,\"onlineMoneyMade\":114058150800,\"onlineRunningTime\":3457.009999999047,\"pid\":368,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[204762833250,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22596238.76193906,\"onlineMoneyMade\":204762833250,\"onlineRunningTime\":3457.009999999047,\"pid\":369,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[116199165125,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22596238.761939052,\"onlineMoneyMade\":116199165125,\"onlineRunningTime\":3457.009999999047,\"pid\":370,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[88395662250,41610,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":23851585.359824564,\"onlineMoneyMade\":88395662250,\"onlineRunningTime\":3457.009999999047,\"pid\":371,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[134891223075,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22330400.658857428,\"onlineMoneyMade\":134891223075,\"onlineRunningTime\":3457.009999999047,\"pid\":372,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[141340960875,34675,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22921151.999038834,\"onlineMoneyMade\":141340960875,\"onlineRunningTime\":3457.009999999047,\"pid\":373,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[122797550250,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21843030.80320775,\"onlineMoneyMade\":122797550250,\"onlineRunningTime\":3457.009999999047,\"pid\":374,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[120116780125,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21267048.246530876,\"onlineMoneyMade\":120116780125,\"onlineRunningTime\":3457.009999999047,\"pid\":375,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[138359795625,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20380921.236258753,\"onlineMoneyMade\":138359795625,\"onlineRunningTime\":3457.009999999047,\"pid\":376,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[89435271500,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18830198.968282547,\"onlineMoneyMade\":89435271500,\"onlineRunningTime\":3457.009999999047,\"pid\":377,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[1496232709300,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18963118.01982336,\"onlineMoneyMade\":1496232709300,\"onlineRunningTime\":3457.009999999047,\"pid\":378,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[3143938473900,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18608667.21571452,\"onlineMoneyMade\":3143938473900,\"onlineRunningTime\":3457.009999999047,\"pid\":379,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[84802118300,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17722540.205442395,\"onlineMoneyMade\":84802118300,\"onlineRunningTime\":3457.009999999047,\"pid\":380,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[3353806029000,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17072713.731242843,\"onlineMoneyMade\":3353806029000,\"onlineRunningTime\":3457.009999999047,\"pid\":381,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[2298317646300,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19317568.823932216,\"onlineMoneyMade\":2298317646300,\"onlineRunningTime\":3457.009999999047,\"pid\":382,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[135000000000,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17825921.689974144,\"onlineMoneyMade\":135000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":383,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[1571700517400,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18608667.215714518,\"onlineMoneyMade\":1571700517400,\"onlineRunningTime\":3457.009999999047,\"pid\":384,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[2866442277400,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16836413.19517028,\"onlineMoneyMade\":2866442277400,\"onlineRunningTime\":3457.009999999047,\"pid\":385,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9658784.411966108,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":386,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[1667335197150,20805,20805,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16097974.019943513,\"onlineMoneyMade\":1667335197150,\"onlineRunningTime\":3457.009999999047,\"pid\":387,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[125844408825,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16448732.628176231,\"onlineMoneyMade\":125844408825,\"onlineRunningTime\":3457.009999999047,\"pid\":388,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[4347858704550,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14488176.617949162,\"onlineMoneyMade\":4347858704550,\"onlineRunningTime\":3457.009999999047,\"pid\":389,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[2675493852900,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14488176.617949162,\"onlineMoneyMade\":2675493852900,\"onlineRunningTime\":3457.009999999047,\"pid\":390,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f1978da9-8c8b-4666-8f5c-8120be7cffc3\",\"moduleSequenceNumber\":188}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-0\",\"moduleSequenceNumber\":188,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-1\",\"httpPortOpen\":true,\"ip\":\"69.6.5.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048572,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[2449372730.373138,11928200,12295755,1352325]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":560272263.2239194,\"onlineMoneyMade\":2449372730.373138,\"onlineRunningTime\":3457.009999999047,\"pid\":391,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[8508292495.98479,1962605,7045960,6692275]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643918960.7977526,\"onlineMoneyMade\":8508292495.98479,\"onlineRunningTime\":3457.009999999047,\"pid\":392,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[19895000000,2399510,4875305,4861435]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":516907422.65875924,\"onlineMoneyMade\":19895000000,\"onlineRunningTime\":3457.009999999047,\"pid\":393,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[23545271126,4147130,4320505,4161000]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":611981466.4691889,\"onlineMoneyMade\":23545271126,\"onlineRunningTime\":3457.009999999047,\"pid\":394,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[9418750000,2857220,2919635,2919635]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":464219787.5063132,\"onlineMoneyMade\":9418750000,\"onlineRunningTime\":3457.009999999047,\"pid\":395,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[3525000000,2219200,2302420,2302420]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287714363.6477264,\"onlineMoneyMade\":3525000000,\"onlineRunningTime\":3457.009999999047,\"pid\":396,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[13800000000,2309355,2364835,2371770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":321128736.32673967,\"onlineMoneyMade\":13800000000,\"onlineRunningTime\":3457.009999999047,\"pid\":397,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[5750000000,1400870,1442480,1442480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":258970618.7520275,\"onlineMoneyMade\":5750000000,\"onlineRunningTime\":3457.009999999047,\"pid\":398,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[11437500000,1151210,1192820,1185885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":222399418.59892237,\"onlineMoneyMade\":11437500000,\"onlineRunningTime\":3457.009999999047,\"pid\":399,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[20000000000,1192820,1234430,1234430]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":169471790.71454278,\"onlineMoneyMade\":20000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":400,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[19000000000,568670,582540,582540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":128193040.81936622,\"onlineMoneyMade\":19000000000,\"onlineRunningTime\":3457.009999999047,\"pid\":401,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[21600000000,880745,922355,922355]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":143884873.29293534,\"onlineMoneyMade\":21600000000,\"onlineRunningTime\":3457.009999999047,\"pid\":402,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[22500000000,443840,464645,457710]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":96883219.78975148,\"onlineMoneyMade\":22500000000,\"onlineRunningTime\":3457.009999999047,\"pid\":403,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,367555,388360,381425]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":71565832.66710213,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":404,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,201115,194180,194180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60718161.183020905,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":405,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,201115,208050,201115]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":49900027.26594871,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":406,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,208050,214985,208050]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52606406.843154885,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":407,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[0,138700,138700,131765]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47437332.61656749,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":408,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,104025,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38210535.122109026,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":409,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[25792882600,34675,90155,83220]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31557198.153315872,\"onlineMoneyMade\":25792882600,\"onlineRunningTime\":3457.009999999047,\"pid\":410,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,124830,124830,117895]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33251916.06046132,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":411,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[28889011500,27740,83220,76285]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32952848.19449447,\"onlineMoneyMade\":28889011500,\"onlineRunningTime\":3457.009999999047,\"pid\":412,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,117895,117895,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31907956.761548605,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":413,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,104025,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27085948.94731777,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":414,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,110960,110960,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29773867.5451432,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":415,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,76285,76285,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26657654.225686286,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":416,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,69350,69350,62415]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26354894.163843285,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":417,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20469533.93728597,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":418,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,76285,69350,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20159389.483690724,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":419,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,55480,48545,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20587684.20532225,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":420,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19771708.916696675,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":421,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19539100.57650024,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":422,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,62415,62415,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19900935.77236136,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":423,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19140343.42187779,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":424,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19140343.42187779,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":425,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[0,41610,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18844967.751787085,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":426,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16614881.442602247,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":427,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,48545,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17645004.09204359,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":428,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18342829.112632878,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":429,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17545314.803387977,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":430,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16984101.03021563,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":431,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,6935,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14122649.22621191,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":432,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16947179.071454294,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":433,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,41610,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18202525.669339795,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":434,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16747800.494143069,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":435,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,34675,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17549006.99926411,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":436,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16061052.06118217,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":437,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15950286.184898159,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":438,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15285690.927194064,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":439,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,20805,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13494975.927269159,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":440,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,6935,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13037143.638628563,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":441,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13956500.41178589,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":442,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,6935,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12184246.391241647,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":443,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12553465.97885503,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":444,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14488176.617949162,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":445,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13107295.360275105,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":446,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13956500.411785888,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":447,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,20805,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12276551.288144996,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":448,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9658784.411966108,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":449,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":450,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13158986.102540981,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":451,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":452,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":453,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1014d63e-e148-4c53-9490-67c83a50b4bf\",\"moduleSequenceNumber\":189}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-1\",\"moduleSequenceNumber\":189,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-2\",\"httpPortOpen\":true,\"ip\":\"33.8.6.7\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048572,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1210058567.1194136,11921265,12295755,1352325]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":474089027.08319956,\"onlineMoneyMade\":1210058567.1194136,\"onlineRunningTime\":3457.009999999047,\"pid\":454,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[9165446566.818447,2101305,7108375,6643730]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":648866503.2717718,\"onlineMoneyMade\":9165446566.818447,\"onlineRunningTime\":3457.009999999047,\"pid\":455,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[20355000000,2482730,4930785,4792085]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":518975052.3493943,\"onlineMoneyMade\":20355000000,\"onlineRunningTime\":3457.009999999047,\"pid\":456,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[15932404614,4154065,4327440,4154065]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":578013264.4087584,\"onlineMoneyMade\":15932404614,\"onlineRunningTime\":3457.009999999047,\"pid\":457,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[7081250000,2850285,2919635,2919635]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452810902.2490594,\"onlineMoneyMade\":7081250000,\"onlineRunningTime\":3457.009999999047,\"pid\":458,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[15900000000,2267745,2302420,2302420]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":334051421.8932091,\"onlineMoneyMade\":15900000000,\"onlineRunningTime\":3457.009999999047,\"pid\":459,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[9200000000,2288550,2364835,2371770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":308113745.8633669,\"onlineMoneyMade\":9200000000,\"onlineRunningTime\":3457.009999999047,\"pid\":460,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[6125000000,1393935,1442480,1442480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":260004433.59734562,\"onlineMoneyMade\":6125000000,\"onlineRunningTime\":3457.009999999047,\"pid\":461,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[7500000000,1144275,1192820,1185885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":214128899.83638218,\"onlineMoneyMade\":7500000000,\"onlineRunningTime\":3457.009999999047,\"pid\":462,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[3500000000,1165080,1234430,1234430]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":150826201.5400675,\"onlineMoneyMade\":3500000000,\"onlineRunningTime\":3457.009999999047,\"pid\":463,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,554800,582540,582540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":111061251.95410532,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":464,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,866875,922355,922355]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":131700626.90169372,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":465,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[33750000000,443840,464645,457710]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":101313854.84111206,\"onlineMoneyMade\":33750000000,\"onlineRunningTime\":3457.009999999047,\"pid\":466,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[31691613000,374490,388360,381425]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":80349566.65642457,\"onlineMoneyMade\":31691613000,\"onlineRunningTime\":3457.009999999047,\"pid\":467,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,194180,194180,194180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60478168.45107221,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":468,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[11320546500,201115,208050,201115]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":55549086.95643349,\"onlineMoneyMade\":11320546500,\"onlineRunningTime\":3457.009999999047,\"pid\":469,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,208050,214985,208050]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":52606406.843154885,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":470,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[0,138700,138700,131765]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":47437332.61656749,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":471,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,104025,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38210535.122109026,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":472,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[90275089100,62415,90155,90155]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38096077.04994889,\"onlineMoneyMade\":90275089100,\"onlineRunningTime\":3457.009999999047,\"pid\":473,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,124830,124830,117895]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33251916.06046132,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":474,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[38518682000,41610,76285,76285]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":33266684.843965847,\"onlineMoneyMade\":38518682000,\"onlineRunningTime\":3457.009999999047,\"pid\":475,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,117895,117895,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31907956.761548605,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":476,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,97090,104025,97090]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26879185.978254277,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":477,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,110960,110960,110960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29773867.5451432,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":478,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,76285,76285,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26657654.225686286,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":479,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,69350,69350,62415]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26354894.163843285,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":480,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20469533.93728597,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":481,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,76285,69350,69350]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20159389.483690724,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":482,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,55480,48545,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20587684.20532225,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":483,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19771708.916696675,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":484,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19539100.57650024,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":485,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,62415,62415,55480]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19900935.77236136,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":486,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19140343.42187779,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":487,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19140343.42187779,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":488,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{\"applied-energetics\":[0,41610,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18844967.751787085,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":489,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16614881.442602247,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":490,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,48545,41610,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17645004.09204359,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":491,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":18342829.112632878,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":492,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17545314.803387977,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":493,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,34675,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16644419.009611314,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":494,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,6935,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14122649.22621191,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":495,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"icarus\"],\"dataMap\":{\"icarus\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16947179.071454294,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":496,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16947179.07145429,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":497,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,48545,48545,48545]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16747800.494143069,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":498,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"stormtech\"],\"dataMap\":{\"stormtech\":[0,34675,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17549006.99926411,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":499,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"taiyang-digital\"],\"dataMap\":{\"taiyang-digital\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16061052.06118217,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":500,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15950286.184898159,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":501,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{\"aerocorp\":[0,34675,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":15285690.927194064,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":502,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,20805,34675,34675]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13494975.927269159,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":503,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"blade\"],\"dataMap\":{\"blade\":[0,6935,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13037143.638628563,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":504,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"4sigma\"],\"dataMap\":{\"4sigma\":[0,41610,41610,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13956500.41178589,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":505,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"defcomm\"],\"dataMap\":{\"defcomm\":[0,6935,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12184246.391241647,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":506,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"clarkinc\"],\"dataMap\":{\"clarkinc\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12553465.97885503,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":507,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"kuai-gong\"],\"dataMap\":{\"kuai-gong\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14488176.617949162,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":508,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"powerhouse-fitness\"],\"dataMap\":{\"powerhouse-fitness\":[0,41610,34675,41610]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13107295.360275105,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":509,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnitek\"],\"dataMap\":{\"omnitek\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13956500.411785888,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":510,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"b-and-a\"],\"dataMap\":{\"b-and-a\":[0,20805,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12276551.288144996,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":511,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumassets\"],\"dataMap\":{\"fulcrumassets\":[0,0,13870,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8048987.0099717565,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":512,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nwo\"],\"dataMap\":{\"nwo\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":513,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"fulcrumtech\"],\"dataMap\":{\"fulcrumtech\":[0,27740,27740,27740]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13158986.102540981,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":514,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"megacorp\"],\"dataMap\":{\"megacorp\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":515,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"ecorp\"],\"dataMap\":{\"ecorp\":[0,20805,20805,20805]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10866132.463461872,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":516,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":6935,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///51c1a6fb-840a-40f4-8d1e-d1f557b6a600\",\"moduleSequenceNumber\":190}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-2\",\"moduleSequenceNumber\":190,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"farmServer-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"farmServer-0\",\"httpPortOpen\":true,\"ip\":\"16.4.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,998243876]},\"filename\":\"/scripts/executingScripts/expFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53146530963.85209,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":314,\"ramUsage\":1.75,\"server\":\"farmServer-0\",\"threads\":599186,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///008cef57-dff3-4179-8230-0d69bd0ed788\",\"moduleSequenceNumber\":191}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///008cef57-dff3-4179-8230-0d69bd0ed788\",\"moduleSequenceNumber\":191}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"farmServer-0\",\"moduleSequenceNumber\":191,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"farmServer-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"farmServer-1\",\"httpPortOpen\":true,\"ip\":\"7.7.6.4\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,998243876]},\"filename\":\"/scripts/executingScripts/expFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53146530963.85209,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":315,\"ramUsage\":1.75,\"server\":\"farmServer-1\",\"threads\":599186,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///cd654218-5ffb-474d-b914-3e8ba1ccbf67\",\"moduleSequenceNumber\":192}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///cd654218-5ffb-474d-b914-3e8ba1ccbf67\",\"moduleSequenceNumber\":192}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"farmServer-1\",\"moduleSequenceNumber\":192,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"farmServer-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"farmServer-2\",\"httpPortOpen\":true,\"ip\":\"72.3.1.3\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048575.5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,998243876]},\"filename\":\"/scripts/executingScripts/expFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":53146530963.85209,\"onlineMoneyMade\":0,\"onlineRunningTime\":3457.009999999047,\"pid\":316,\"ramUsage\":1.75,\"server\":\"farmServer-2\",\"threads\":599186,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///2150cf76-1c86-4307-9fd8-bb27d6ba12ce\",\"moduleSequenceNumber\":193}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"blob:file:///2150cf76-1c86-4307-9fd8-bb27d6ba12ce\",\"moduleSequenceNumber\":193}],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"farmServer-2\",\"moduleSequenceNumber\":193,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":86.8043,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7.9296,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1144,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.008,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Daedalus\",\"playerReputation\":1963791.2306121152}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":185.6736,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":1152596.4118674588}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":51.4915,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":179440.2118234473}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":151.6864,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":5.3574,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":62.3138,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":23.3601,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":23.3859,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":35.8291,\"isBanned\":false,\"isMember\":true,\"name\":\"Sector-12\",\"playerReputation\":200.43877420117892}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":111.1866,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":109044.50079540863}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":87.7731,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":121.2917,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":113359.94454132368}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"main\":\"run main.js\",\"sa\":\"scan-analyze\",\"find\":\"run scripts/informationFunctions/findRoute.js\",\"listServers\":\"run scripts/informationFunctions/listServerHackable.js\"}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"29","AllGangsSave":"","LastExportBonus":"1673978008337","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}