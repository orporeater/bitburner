{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"max\":10,\"current\":10},\"skills\":{\"hacking\":896,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":12639328507.972492,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3189712071194617,\"hacking_speed\":1.2948386638872904,\"hacking_money\":1.1963457660947496,\"hacking_grow\":1.1963457660947496,\"hacking\":1.6461393771030304,\"strength\":1.1963457660947496,\"defense\":1.1963457660947496,\"dexterity\":1.1963457660947496,\"agility\":1.1963457660947496,\"charisma\":1.1963457660947496,\"hacking_exp\":2.284254004234568,\"strength_exp\":1.513377394109858,\"defense_exp\":1.513377394109858,\"dexterity_exp\":1.513377394109858,\"agility_exp\":1.513377394109858,\"charisma_exp\":1.513377394109858,\"company_rep\":1.513377394109858,\"faction_rep\":1.513377394109858,\"crime_money\":1.1963457660947496,\"crime_success\":1.1963457660947496,\"hacknet_node_money\":3.0172961795065296,\"hacknet_node_purchase_cost\":0.6230767690324767,\"hacknet_node_ram_cost\":0.8144794366437604,\"hacknet_node_core_cost\":0.8144794366437604,\"hacknet_node_level_cost\":0.6923075211471963,\"work_money\":1.315980342704225,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"CRTX42-AA Gene Modification\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Neurotrainer II\"},{\"level\":1,\"name\":\"Social Negotiation Assistant (S.N.A)\"},{\"level\":1,\"name\":\"ADR-V1 Pheromone Gene\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":3,\"name\":\"NeuroFlux Governor\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"BitRunners Neurolink\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Artificial Bio-neural Network Implant\"},{\"level\":1,\"name\":\"Neural Accelerator\"},{\"level\":1,\"name\":\"DataJack\"},{\"level\":1,\"name\":\"Neuregen Gene Modification\"},{\"level\":1,\"name\":\"Embedded Netburner Module Core Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen V\"},{\"level\":1,\"name\":\"Nuoptimal Nootropic Injector Implant\"}],\"city\":\"Ishima\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Chongqing\",\"Ishima\",\"New Tokyo\",\"Netburners\",\"Tian Di Hui\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4494579321.539209,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4463935400.972747,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4438292190.747763,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4425604286.0942,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4417802339.692765,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4407347142.047701,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4397796343.55978,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4379086029.375913,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":27644.911337133708,\"onlineTimeSeconds\":165243.40000072925,\"ram\":64,\"totalMoneyGenerated\":4367306103.795685,\"name\":\"hacknet-node-8\"}}],\"has4SData\":false,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":false,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Storm Technologies\",\"money\":2551163213030.5957,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":4903811443821.802,\"hacknet\":39791749160.82319,\"hacknet_expenses\":-2967503510.116821,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2551162213030.5957,\"work\":0,\"servers\":-183054442980.70663,\"other\":-314899996.7905028,\"augmentations\":-2206104133550.5176}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5100988690299.019,\"hacknet\":45885749855.79161,\"hacknet_expenses\":-13236269339.27941,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":2569131742892.297,\"work\":1473800.4159995883,\"servers\":-332167886722.5115,\"other\":-939099996.7905033,\"augmentations\":-2231400915092.749}},\"playtimeSinceLastAug\":165262200,\"playtimeSinceLastBitnode\":333254600,\"purchasedServers\":[\"moneyServer-0\",\"moneyServer-1\",\"moneyServer-2\"],\"scriptProdSinceLastAug\":4673190663945.378,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":[{\"lvl\":1,\"n\":1}],\"exploits\":[\"N00dles\"],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1671137853951},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1671138393965},{\"ID\":\"WORKOUT\",\"unlockedOn\":1671146193966},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1671173871600},{\"ID\":\"TOR\",\"unlockedOn\":1671174291602},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1671174471602},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1671174531592},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1671233460823},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1672421371960},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1672422211962},{\"ID\":\"DRAIN_SERVER\",\"unlockedOn\":1672422391965},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1672423711959},{\"ID\":\"SCRIPT_32GB\",\"unlockedOn\":1672423891961},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1672583693989},{\"ID\":\"FORMULAS.EXE\",\"unlockedOn\":1672583753987},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1672584534004},{\"ID\":\"NITESEC\",\"unlockedOn\":1672584534007},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1672584833999},{\"ID\":\"TRAVEL\",\"unlockedOn\":1672584834002},{\"ID\":\"HOSPITALIZED\",\"unlockedOn\":1672692811006},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1672764989930},{\"ID\":\"DONATION\",\"unlockedOn\":1672764989951},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1672951832056},{\"ID\":\"FROZE\",\"unlockedOn\":1673104787388},{\"ID\":\"DAEDALUS\",\"unlockedOn\":1673208303290},{\"ID\":\"DISCOUNT\",\"unlockedOn\":1673212577733},{\"ID\":\"4S\",\"unlockedOn\":1673252912192},{\"ID\":\"SF1.1\",\"unlockedOn\":1673438719449},{\"ID\":\"GANG\",\"unlockedOn\":1673550134613},{\"ID\":\"N00DLES\",\"unlockedOn\":1673724680462}],\"terminalCommandHistory\":[\"buy HTTPWorm.exe\",\"buy -l\",\"buy DeepscanV2.exe\",\"home\",\"listServers +\",\"listServers\",\"listServers 1\",\"listServers\",\"run scripts/informationFunctions/costServer.js\",\"listServers\",\"connect darkweb\",\"buy -l\",\"buy SQLInject.exe\",\"home\",\"listServers\",\"hack\",\"scan\",\"connect n00dles\",\"hack\",\"grow\",\"analyze\",\"hack\",\"home\",\"listServers\",\"sa 10\",\"scan\",\"connect run4theh111z\",\"backdoor\",\"home\",\"listServers\",\"listServers 1\",\"run scripts/executingScripts/runRemoteOnTarget.js\",\"run scripts/executingScripts/runHomeServer.js\",\"listServers\",\"run scripts/executingScripts/upgradeServers.js\",\"listServers\",\"run scripts/purchaseServer.js\",\"listServers\",\"listServers 1\",\"listServers\",\"connect run4theh111z\",\"scan\",\"home\",\"listServers\",\"listServers 1\",\"listServers\",\"listServers 1\",\"listServers\",\"listServers 1\",\"listServers\"],\"lastUpdate\":1673888837168,\"lastSave\":1673888828374,\"totalPlaytime\":2752068400,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":2009,\"factionWorkType\":\"hacking\",\"factionName\":\"Tian Di Hui\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"a7ab312ea0b53\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":true,\"ip\":\"77.3.4.2\",\"isConnectedTo\":true,\"maxRam\":4096,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"b1t_flum3.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"ServerProfiler.exe\",\"AutoLink.exe\",\"relaySMTP.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"ramUsed\":3955.35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"main.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.147,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":74509.4099997209,\"pid\":1,\"ramUsage\":7.35,\"server\":\"home\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///4f912114-69ff-442d-8799-05fd3ac7592e\",\"moduleSequenceNumber\":1936},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///143fab5a-fdee-4ed5-a974-b54fb5377c5e\",\"moduleSequenceNumber\":1936},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///3b6d55d1-ffdb-4823-bf0f-54c0a6b3f391\",\"moduleSequenceNumber\":2214},{\"filename\":\"main.js\",\"url\":\"blob:file:///752cf0f4-48fb-4375-bba3-a085b88ff9b9\",\"moduleSequenceNumber\":3393}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[596610,4900,4935,1435]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":57647.14724136687,\"onlineMoneyMade\":596610,\"onlineRunningTime\":1581.0100000002217,\"pid\":1933,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,875,3360,2940]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":89342.88474062475,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1934,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[9687335,665,2135,2065]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":60201.51428160198,\"onlineMoneyMade\":9687335,\"onlineRunningTime\":1581.0100000002217,\"pid\":1935,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,1050,1855,1645]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":64458.7926819942,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1936,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,770,875,980]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":42093.09066303248,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1937,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[0,315,700,770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26533.037917937167,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1938,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[0,560,665,770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26982.750425020848,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1939,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,140,490,420]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":22665.510357017505,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1940,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,175,280,385]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16999.13276776313,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1941,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[0,0,70,385]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7795.016789450461,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1942,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,70,245,175]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11992.33352223148,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1943,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,140,315,245]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12232.180192676116,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1944,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,0,70,140]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5756.320090671111,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1945,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,0,210,105]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7986.894125806169,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1946,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,0,35,70]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3597.700056669444,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1947,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,0,105]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4029.424063469777,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1948,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,0,0,70]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2446.436038535222,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1949,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[492792195,35,35,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3561.723056102751,\"onlineMoneyMade\":492792195,\"onlineRunningTime\":1581.0100000002217,\"pid\":1950,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1702.9113601568706,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1951,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2062.6813658238148,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1952,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,0,70]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2830.1907112466297,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1953,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1954,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3022.0680476023335,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1955,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,0,70,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4389.194069136722,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1956,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,0,0,70]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2398.4667044462963,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1957,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2974.0987135134083,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1958,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3981.454729380852,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1959,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,35,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2734.252043068778,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1960,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1961,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4317.240068003333,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1962,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,0,70]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2494.405372624148,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1963,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1964,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3837.546727114074,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1965,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[358770790,35,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4317.240068003333,\"onlineMoneyMade\":358770790,\"onlineRunningTime\":1581.0100000002217,\"pid\":1966,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[293766620,70,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3939.4815620530417,\"onlineMoneyMade\":293766620,\"onlineRunningTime\":1581.0100000002217,\"pid\":1967,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1968,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4461.148070270111,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1969,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1970,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1971,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1972,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,0,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2134.6353669572036,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1973,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1974,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,0,35]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1798.8500283347223,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1975,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,35,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2422.4513714907594,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1976,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1977,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,70,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4173.332065736555,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1978,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1979,\"ramUsage\":2.4,\"server\":\"home\",\"threads\":35,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nexport async function main(ns) {\\n\\tconst files = ns.ls(\\\"home\\\", \\\".js\\\")\\n\\tfor (const file of files) {\\n\\t\\tif (file !== ns.getScriptName()) {\\n\\t\\t\\tns.tprintf(file)\\n\\t\\t\\tns.rm(file)\\n\\t\\t}\\n\\t}\\n}\",\"filename\":\"deleteFiles.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"deleteFiles.js\",\"url\":\"blob:file:///e1e93004-c85a-499a-b68b-9850b7a5718b\",\"moduleSequenceNumber\":23749}],\"dependents\":[],\"ramUsage\":2.8,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":58,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"rm\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { HacknetNode } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        let whileCounter = 0;\\n        let numberNodes = ns.hacknet.numNodes();\\n        const moneyAvailable = ns.getPlayer().money;\\n        while (numberNodes < HacknetNode.MAX_NUMBER &&\\n            whileCounter < HacknetNode.MAX_NUMBER) {\\n            const nodeCost = ns.hacknet.getPurchaseNodeCost();\\n            if (numberNodes < HacknetNode.MAX_NUMBER) {\\n                if (nodeCost < moneyAvailable) {\\n                    ns.hacknet.purchaseNode();\\n                }\\n            }\\n            numberNodes = ns.hacknet.numNodes();\\n            whileCounter++;\\n        }\\n        for (let node = 0; node < numberNodes; node++) {\\n            const nodeStats = ns.hacknet.getNodeStats(node);\\n            for (let lvl = 0; lvl < HacknetNode.MAX_LVL - nodeStats.level; lvl++) {\\n                const lvlCost = ns.hacknet.getLevelUpgradeCost(node, 1);\\n                if (lvlCost < moneyAvailable) {\\n                    ns.hacknet.upgradeLevel(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let ram = 0; ram < HacknetNode.MAX_RAM - nodeStats.ram; ram++) {\\n                const ramCost = ns.hacknet.getRamUpgradeCost(node, 1);\\n                if (ramCost < moneyAvailable) {\\n                    ns.hacknet.upgradeRam(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n            for (let cores = 0; cores < HacknetNode.MAX_CORES - nodeStats.cores; cores++) {\\n                const coresCost = ns.hacknet.getCoreUpgradeCost(node, 1);\\n                if (coresCost < moneyAvailable) {\\n                    ns.hacknet.upgradeCore(node, 1);\\n                }\\n                else {\\n                    break;\\n                }\\n            }\\n        }\\n        // await ns.sleep(5000);\\n        await ns.sleep(600000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFja05vZGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9oYWNrTm9kZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXRELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7UUFFckIsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUN4QyxNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBSyxDQUFDO1FBRTVDLE9BQ0MsV0FBVyxHQUFHLFdBQVcsQ0FBQyxVQUFVO1lBQ3BDLFlBQVksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUNwQztZQUNELE1BQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztZQUNsRCxJQUFJLFdBQVcsR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFO2dCQUN6QyxJQUFJLFFBQVEsR0FBRyxjQUFjLEVBQUU7b0JBQzlCLEVBQUUsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7aUJBQzFCO2FBQ0Q7WUFDRCxXQUFXLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVwQyxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsS0FBSyxJQUFJLElBQUksR0FBRyxDQUFDLEVBQUUsSUFBSSxHQUFHLFdBQVcsRUFBRSxJQUFJLEVBQUUsRUFBRTtZQUM5QyxNQUFNLFNBQVMsR0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUzRCxLQUFLLElBQUksR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsV0FBVyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUNyRSxNQUFNLE9BQU8sR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEQsSUFBSSxPQUFPLEdBQUcsY0FBYyxFQUFFO29CQUM3QixFQUFFLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ2pDO3FCQUFNO29CQUNOLE1BQU07aUJBQ047YUFDRDtZQUVELEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxXQUFXLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQ25FLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLE9BQU8sR0FBRyxjQUFjLEVBQUU7b0JBQzdCLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ04sTUFBTTtpQkFDTjthQUNEO1lBQ0QsS0FDQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQ2IsS0FBSyxHQUFHLFdBQVcsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLEtBQUssRUFDL0MsS0FBSyxFQUFFLEVBQ047Z0JBQ0QsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ3pELElBQUksU0FBUyxHQUFHLGNBQWMsRUFBRTtvQkFDL0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztxQkFBTTtvQkFDTixNQUFNO2lCQUNOO2FBQ0Q7U0FDRDtRQUNELHdCQUF3QjtRQUN4QixNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDdkI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///751e0a2b-6ae4-4abd-a167-44742e25603f\",\"moduleSequenceNumber\":57},{\"filename\":\"/scripts/executingScripts/hackNodes.js\",\"url\":\"blob:file:///4006eff2-2b2c-407c-b750-c8114f4133ec\",\"moduleSequenceNumber\":104}],\"dependents\":[],\"ramUsage\":6.1,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":59,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"ns\",\"name\":\"hacknet\",\"cost\":4},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackNodesActivated = await ns.prompt('Automated HackNodes?', {\\n        type: 'boolean',\\n    });\\n    const upgradeServerActivated = await ns.prompt('Upgrade for Servers Acktiv??', {\\n        type: 'boolean',\\n    });\\n    let startBit = true;\\n    while (true) {\\n        const serversHackable = servers.hackable;\\n        let countNewRootServers = 0;\\n        let countHasRamAndMoneyServers = 0;\\n        ns.print(`runnig`);\\n        for (const server of serversHackable) {\\n            let serverStats = ns.getServer(server);\\n            const portsNeeded = serverStats.numOpenPortsRequired;\\n            ns.fileExists('BruteSSH.exe', OwnServerList.HOME) &&\\n                !serverStats.sshPortOpen\\n                ? ns.brutessh(server)\\n                : null;\\n            ns.fileExists('relaySMTP.exe', OwnServerList.HOME) &&\\n                !serverStats.smtpPortOpen\\n                ? ns.relaysmtp(server)\\n                : null;\\n            ns.fileExists('FTPCrack.exe', OwnServerList.HOME) &&\\n                !serverStats.ftpPortOpen\\n                ? ns.ftpcrack(server)\\n                : null;\\n            ns.fileExists('HTTPworm.exe', OwnServerList.HOME) &&\\n                !serverStats.httpPortOpen\\n                ? ns.httpworm(server)\\n                : null;\\n            ns.fileExists('SQLInject.exe', OwnServerList.HOME) &&\\n                !serverStats.sqlPortOpen\\n                ? ns.sqlinject(server)\\n                : null;\\n            serverStats = ns.getServer(server);\\n            const portsOpen = serverStats.openPortCount;\\n            if (!ns.hasRootAccess(server) && portsOpen >= portsNeeded) {\\n                ns.nuke(server);\\n                countNewRootServers++;\\n                if (serverStats.maxRam > 0 && serverStats.moneyMax > 0) {\\n                    countHasRamAndMoneyServers++;\\n                }\\n            }\\n        }\\n        if (countNewRootServers > 0 || startBit) {\\n            ns.scriptKill(ScriptPath.HACK_NODES, OwnServerList.HOME);\\n            ns.scriptKill(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME);\\n            hackNodesActivated\\n                ? ns.exec(ScriptPath.HACK_NODES, OwnServerList.HOME)\\n                : null;\\n            if (countHasRamAndMoneyServers > 0 || startBit) {\\n                ns.exec(ScriptPath.RUN_REMOTE_ON_TARGET, OwnServerList.HOME);\\n            }\\n            ns.exec(ScriptPath.RUN_HOME_SERVER, OwnServerList.HOME);\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n            upgradeServerActivated\\n                ? ns.exec(ScriptPath.UPGRADE_SERVERS, OwnServerList.HOME)\\n                : null;\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n            startBit = false;\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9tYWluLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDLHNCQUFzQixFQUFFO1FBQ2xFLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxzQkFBc0IsR0FBRyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzdDLDhCQUE4QixFQUM5QjtRQUNDLElBQUksRUFBRSxTQUFTO0tBQ2YsQ0FDRCxDQUFDO0lBQ0YsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBRXBCLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxlQUFlLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUV6QyxJQUFJLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUM1QixJQUFJLDBCQUEwQixHQUFHLENBQUMsQ0FBQztRQUVuQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRW5CLEtBQUssTUFBTSxNQUFNLElBQUksZUFBZSxFQUFFO1lBQ3JDLElBQUksV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDL0MsTUFBTSxXQUFXLEdBQUcsV0FBVyxDQUFDLG9CQUFvQixDQUFDO1lBRXJELEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsY0FBYyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2pELENBQUMsV0FBVyxDQUFDLFlBQVk7Z0JBQ3hCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztnQkFDckIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLEVBQUUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ2xELENBQUMsV0FBVyxDQUFDLFdBQVc7Z0JBQ3ZCLENBQUMsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25DLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUM7WUFFNUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLElBQUksU0FBUyxJQUFJLFdBQVcsRUFBRTtnQkFDMUQsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDaEIsbUJBQW1CLEVBQUUsQ0FBQztnQkFDdEIsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxXQUFXLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRTtvQkFDdkQsMEJBQTBCLEVBQUUsQ0FBQztpQkFDN0I7YUFDRDtTQUNEO1FBQ0QsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLElBQUksUUFBUSxFQUFFO1lBQ3hDLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUU5RCxrQkFBa0I7Z0JBQ2pCLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQztnQkFDcEQsQ0FBQyxDQUFDLElBQUksQ0FBQztZQUVSLElBQUksMEJBQTBCLEdBQUcsQ0FBQyxJQUFJLFFBQVEsRUFBRTtnQkFDL0MsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsb0JBQW9CLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzdEO1lBRUQsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4RCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFMUQsc0JBQXNCO2dCQUNyQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxJQUFJLENBQUM7WUFFUixFQUFFLENBQUMsSUFBSSxDQUNOLFVBQVUsQ0FBQyxlQUFlLEVBQzFCLGFBQWEsQ0FBQyxJQUFJLEVBQ2xCLENBQUMsRUFDRCxhQUFhLENBQUMsdUJBQXVCLENBQ3JDLENBQUM7WUFDRixRQUFRLEdBQUcsS0FBSyxDQUFDO1NBQ2pCO1FBQ0QsTUFBTSxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3RCO0FBQ0YsQ0FBQyJ9\",\"filename\":\"main.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///304b287b-160f-462d-aa81-5c2307aa6501\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///bd9e1b91-051c-4068-8c4d-665b9ab86f41\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///7e1e2ae7-6df4-44af-b7af-896576bccb75\",\"moduleSequenceNumber\":62},{\"filename\":\"main.js\",\"url\":\"blob:file:///f292447d-27c5-44d3-8674-d8beb144853b\",\"moduleSequenceNumber\":115}],\"dependents\":[],\"ramUsage\":7.35,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":115,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"brutessh\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"relaysmtp\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"ftpcrack\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"httpworm\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"sqlinject\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"nuke\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export class DataBase {\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9kYXRhQmFzZS9kYXRhYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sUUFBUTtDQUFHIn0=\",\"filename\":\"/scripts/dataBase/database.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":61,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList } from '/scripts/enums/enums.js';\\nexport class ServersList {\\n    servers;\\n    serversTest;\\n    ns;\\n    constructor(ns) {\\n        this.ns = ns;\\n        this.servers = this.getAllServers();\\n        this.serversTest = this.getAllServersTest();\\n    }\\n    get value() {\\n        return this.servers;\\n    }\\n    get hackable() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get ownedServer() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            if (this.ns.getServer(server).purchasedByPlayer) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList.filter((name) => name !== OwnServerList.HOME);\\n    }\\n    get hackableWithRoot() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndRamAndNoMoney() {\\n        let serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax === 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        serverList = serverList.filter((server) => !server.includes(OwnServerList.MONEY_SERVER) &&\\n            !server.includes(OwnServerList.FARM_SERVER) &&\\n            !server.includes(OwnServerList.HOME));\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoney() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hackableWithRootAndMoneyAndRam() {\\n        const serverList = [];\\n        const player = this.ns.getPlayer();\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.requiredHackingSkill <= player.skills.hacking &&\\n                serverStats.hasAdminRights &&\\n                serverStats.moneyMax > 0 &&\\n                serverStats.maxRam > 0) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get documentsLit() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'lit');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get documentsCct() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server, 'cct');\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get allFiles() {\\n        const serverDocuments = { '': [] };\\n        for (const server of this.servers) {\\n            const files = this.ns.ls(server);\\n            if (files.length && server !== 'home') {\\n                serverDocuments[server] = files;\\n            }\\n        }\\n        return serverDocuments;\\n    }\\n    get hasNoBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (!serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    get hasBackdoor() {\\n        const serverList = [];\\n        for (const server of this.servers) {\\n            const serverStats = this.ns.getServer(server);\\n            if (serverStats.backdoorInstalled) {\\n                serverList.push(server);\\n            }\\n        }\\n        return serverList;\\n    }\\n    getAllServers(rootHost = 'home') {\\n        this.ns.disableLog('ALL');\\n        let pendingScan = [rootHost];\\n        const list = new Set(pendingScan);\\n        while (pendingScan.length) {\\n            const hostname = pendingScan.shift();\\n            list.add(hostname);\\n            pendingScan.push(...this.ns.scan(hostname));\\n            pendingScan = pendingScan.filter((host) => !list.has(host));\\n        }\\n        const finalList = [...list].sort((a, b) => this.ns.getServerRequiredHackingLevel(a) -\\n            this.ns.getServerRequiredHackingLevel(b));\\n        return [...finalList];\\n    }\\n    getAllServersTest() {\\n        const servers = this.getAllServers();\\n        const list = [];\\n        for (const server of servers) {\\n            list.push({ name: server, ...this.ns.getServer(server) });\\n        }\\n        return [...list];\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyc2xpc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9jbGFzc2VzL3NlcnZlcnNsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUt4RCxNQUFNLE9BQU8sV0FBVztJQUNmLE9BQU8sQ0FBVztJQUNuQixXQUFXLENBQWE7SUFDdkIsRUFBRSxDQUFDO0lBRVgsWUFBbUIsRUFBTTtRQUN4QixJQUFJLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQVcsS0FBSztRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUNyQixDQUFDO0lBRUQsSUFBVyxRQUFRO1FBQ2xCLE1BQU0sVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRTtnQkFDOUQsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsV0FBVztRQUNyQixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ2hELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRSxDQUFDO0lBRUQsSUFBVyxnQkFBZ0I7UUFDMUIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRXRELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWMsRUFDekI7Z0JBQ0QsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVELElBQVcsZ0NBQWdDO1FBQzFDLElBQUksVUFBVSxHQUFhLEVBQUUsQ0FBQztRQUM5QixNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTNDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUNDLFdBQVcsQ0FBQyxvQkFBb0IsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU87Z0JBQ3pELFdBQVcsQ0FBQyxjQUFjO2dCQUMxQixXQUFXLENBQUMsUUFBUSxLQUFLLENBQUM7Z0JBQzFCLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUNyQjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FDN0IsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNWLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1lBQzVDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDO1lBQzNDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQ3JDLENBQUM7UUFDRixPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyx3QkFBd0I7UUFDbEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFDM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxFQUN2QjtnQkFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0Q7UUFDRCxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsSUFBVyw4QkFBOEI7UUFDeEMsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sTUFBTSxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7UUFFM0MsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQ0MsV0FBVyxDQUFDLG9CQUFvQixJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTztnQkFDekQsV0FBVyxDQUFDLGNBQWM7Z0JBQzFCLFdBQVcsQ0FBQyxRQUFRLEdBQUcsQ0FBQztnQkFDeEIsV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQ3JCO2dCQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFbEQsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDdEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFeEMsSUFBSSxLQUFLLENBQUMsTUFBTSxJQUFJLE1BQU0sS0FBSyxNQUFNLEVBQUU7Z0JBQ3RDLGVBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQUM7YUFDaEM7U0FDRDtRQUNELE9BQU8sZUFBZSxDQUFDO0lBQ3hCLENBQUM7SUFFRCxJQUFXLFFBQVE7UUFDbEIsTUFBTSxlQUFlLEdBQTZCLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDO1FBRTdELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVqQyxJQUFJLEtBQUssQ0FBQyxNQUFNLElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQzthQUNoQztTQUNEO1FBQ0QsT0FBTyxlQUFlLENBQUM7SUFDeEIsQ0FBQztJQUVELElBQVcsYUFBYTtRQUN2QixNQUFNLFVBQVUsR0FBYSxFQUFFLENBQUM7UUFDaEMsS0FBSyxNQUFNLE1BQU0sSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2xDLE1BQU0sV0FBVyxHQUFXLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ3RELElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLEVBQUU7Z0JBQ25DLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDeEI7U0FDRDtRQUNELE9BQU8sVUFBVSxDQUFDO0lBQ25CLENBQUM7SUFFRCxJQUFXLFdBQVc7UUFDckIsTUFBTSxVQUFVLEdBQWEsRUFBRSxDQUFDO1FBQ2hDLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNsQyxNQUFNLFdBQVcsR0FBVyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRTtnQkFDbEMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN4QjtTQUNEO1FBQ0QsT0FBTyxVQUFVLENBQUM7SUFDbkIsQ0FBQztJQUVPLGFBQWEsQ0FBQyxRQUFRLEdBQUcsTUFBTTtRQUN0QyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQixJQUFJLFdBQVcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sV0FBVyxDQUFDLE1BQU0sRUFBRTtZQUMxQixNQUFNLFFBQVEsR0FBVyxXQUFXLENBQUMsS0FBSyxFQUFHLENBQUM7WUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuQixXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUM1QyxXQUFXLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDNUQ7UUFDRCxNQUFNLFNBQVMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMvQixDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUNSLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLElBQUksQ0FBQyxFQUFFLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLENBQ3pDLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBQ08saUJBQWlCO1FBQ3hCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNyQyxNQUFNLElBQUksR0FBZSxFQUFFLENBQUM7UUFDNUIsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNsQixDQUFDO0NBQ0QifQ==\",\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":62,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export var OwnServerList;\\n(function (OwnServerList) {\\n    OwnServerList[\\\"HOME\\\"] = \\\"home\\\";\\n    OwnServerList[\\\"FARM_SERVER\\\"] = \\\"farmServer\\\";\\n    OwnServerList[\\\"MONEY_SERVER\\\"] = \\\"moneyServer\\\";\\n    OwnServerList[\\\"TARGET_EXP_FARM_SERVERS\\\"] = \\\"joesguns\\\";\\n})(OwnServerList || (OwnServerList = {}));\\nexport var HacknetNode;\\n(function (HacknetNode) {\\n    HacknetNode[HacknetNode[\\\"MAX_NUMBER\\\"] = 9] = \\\"MAX_NUMBER\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_RAM\\\"] = 64] = \\\"MAX_RAM\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_LVL\\\"] = 200] = \\\"MAX_LVL\\\";\\n    HacknetNode[HacknetNode[\\\"MAX_CORES\\\"] = 16] = \\\"MAX_CORES\\\";\\n})(HacknetNode || (HacknetNode = {}));\\nexport var ScriptPath;\\n(function (ScriptPath) {\\n    ScriptPath[\\\"EXP_FARM\\\"] = \\\"/scripts/executingScripts/expFarm.js\\\";\\n    ScriptPath[\\\"HACK_NODES\\\"] = \\\"/scripts/executingScripts/hackNodes.js\\\";\\n    ScriptPath[\\\"MONEY_FARM\\\"] = \\\"/scripts/executingScripts/moneyFarm.js\\\";\\n    ScriptPath[\\\"RUN_EXP_SERVERS\\\"] = \\\"/scripts/executingScripts/runExpFarmServers.js\\\";\\n    ScriptPath[\\\"RUN_HOME_SERVER\\\"] = \\\"/scripts/executingScripts/runHomeServer.js\\\";\\n    ScriptPath[\\\"RUN_MONEY_SERVERS\\\"] = \\\"/scripts/executingScripts/runMoneyServers.js\\\";\\n    ScriptPath[\\\"RUN_REMOTE_ON_TARGET\\\"] = \\\"/scripts/executingScripts/runRemoteOnTarget.js\\\";\\n    ScriptPath[\\\"UPGRADE_SERVERS\\\"] = \\\"/scripts/executingScripts/upgradeServers.js\\\";\\n})(ScriptPath || (ScriptPath = {}));\\nexport var ToastVariant;\\n(function (ToastVariant) {\\n    ToastVariant[\\\"SUCCESS\\\"] = \\\"success\\\";\\n    ToastVariant[\\\"WARNING\\\"] = \\\"warning\\\";\\n    ToastVariant[\\\"ERROR\\\"] = \\\"error\\\";\\n    ToastVariant[\\\"INFO\\\"] = \\\"info\\\";\\n})(ToastVariant || (ToastVariant = {}));\\nexport var CrimeType;\\n(function (CrimeType) {\\n    CrimeType[\\\"shoplift\\\"] = \\\"Shoplift\\\";\\n    CrimeType[\\\"robStore\\\"] = \\\"Rob Store\\\";\\n    CrimeType[\\\"mug\\\"] = \\\"Mug\\\";\\n    CrimeType[\\\"larceny\\\"] = \\\"Larceny\\\";\\n    CrimeType[\\\"dealDrugs\\\"] = \\\"Deal Drugs\\\";\\n    CrimeType[\\\"bondForgery\\\"] = \\\"Bond Forgery\\\";\\n    CrimeType[\\\"traffickArms\\\"] = \\\"Traffick Arms\\\";\\n    CrimeType[\\\"homicide\\\"] = \\\"Homicide\\\";\\n    CrimeType[\\\"grandTheftAuto\\\"] = \\\"Grand Theft Auto\\\";\\n    CrimeType[\\\"kidnap\\\"] = \\\"Kidnap\\\";\\n    CrimeType[\\\"assassination\\\"] = \\\"Assassination\\\";\\n    CrimeType[\\\"heist\\\"] = \\\"Heist\\\";\\n})(CrimeType || (CrimeType = {}));\\nexport var FactionWorkType;\\n(function (FactionWorkType) {\\n    FactionWorkType[\\\"hacking\\\"] = \\\"hacking\\\";\\n    FactionWorkType[\\\"field\\\"] = \\\"field\\\";\\n    FactionWorkType[\\\"security\\\"] = \\\"security\\\";\\n})(FactionWorkType || (FactionWorkType = {}));\\nexport var UniversityClassType;\\n(function (UniversityClassType) {\\n    UniversityClassType[\\\"computerScience\\\"] = \\\"Computer Science\\\";\\n    UniversityClassType[\\\"dataStructures\\\"] = \\\"Data Structures\\\";\\n    UniversityClassType[\\\"networks\\\"] = \\\"Networks\\\";\\n    UniversityClassType[\\\"algorithms\\\"] = \\\"Algorithms\\\";\\n    UniversityClassType[\\\"management\\\"] = \\\"Management\\\";\\n    UniversityClassType[\\\"leadership\\\"] = \\\"Leadership\\\";\\n})(UniversityClassType || (UniversityClassType = {}));\\nexport var GymType;\\n(function (GymType) {\\n    GymType[\\\"strength\\\"] = \\\"str\\\";\\n    GymType[\\\"defense\\\"] = \\\"def\\\";\\n    GymType[\\\"dexterity\\\"] = \\\"dex\\\";\\n    GymType[\\\"agility\\\"] = \\\"agi\\\";\\n})(GymType || (GymType = {}));\\nexport var JobName;\\n(function (JobName) {\\n    JobName[\\\"software0\\\"] = \\\"Software Engineering Intern\\\";\\n    JobName[\\\"software1\\\"] = \\\"Junior Software Engineer\\\";\\n    JobName[\\\"software2\\\"] = \\\"Senior Software Engineer\\\";\\n    JobName[\\\"software3\\\"] = \\\"Lead Software Developer\\\";\\n    JobName[\\\"software4\\\"] = \\\"Head of Software\\\";\\n    JobName[\\\"software5\\\"] = \\\"Head of Engineering\\\";\\n    JobName[\\\"software6\\\"] = \\\"Vice President of Technology\\\";\\n    JobName[\\\"software7\\\"] = \\\"Chief Technology Officer\\\";\\n    JobName[\\\"IT0\\\"] = \\\"IT Intern\\\";\\n    JobName[\\\"IT1\\\"] = \\\"IT Analyst\\\";\\n    JobName[\\\"IT2\\\"] = \\\"IT Manager\\\";\\n    JobName[\\\"IT3\\\"] = \\\"Systems Administrator\\\";\\n    JobName[\\\"securityEng\\\"] = \\\"Security Engineer\\\";\\n    JobName[\\\"networkEng0\\\"] = \\\"Network Engineer\\\";\\n    JobName[\\\"networkEng1\\\"] = \\\"Network Administrator\\\";\\n    JobName[\\\"business0\\\"] = \\\"Business Intern\\\";\\n    JobName[\\\"business1\\\"] = \\\"Business Analyst\\\";\\n    JobName[\\\"business2\\\"] = \\\"Business Manager\\\";\\n    JobName[\\\"business3\\\"] = \\\"Operations Manager\\\";\\n    JobName[\\\"business4\\\"] = \\\"Chief Financial Officer\\\";\\n    JobName[\\\"business5\\\"] = \\\"Chief Executive Officer\\\";\\n    JobName[\\\"security0\\\"] = \\\"Police Officer\\\";\\n    JobName[\\\"security1\\\"] = \\\"Police Chief\\\";\\n    JobName[\\\"security2\\\"] = \\\"Security Guard\\\";\\n    JobName[\\\"security3\\\"] = \\\"Security Officer\\\";\\n    JobName[\\\"security4\\\"] = \\\"Security Supervisor\\\";\\n    JobName[\\\"security5\\\"] = \\\"Head of Security\\\";\\n    JobName[\\\"agent0\\\"] = \\\"Field Agent\\\";\\n    JobName[\\\"agent1\\\"] = \\\"Secret Agent\\\";\\n    JobName[\\\"agent2\\\"] = \\\"Special Operative\\\";\\n    JobName[\\\"waiter\\\"] = \\\"Waiter\\\";\\n    JobName[\\\"employee\\\"] = \\\"Employee\\\";\\n    JobName[\\\"softwareConsult0\\\"] = \\\"Software Consultant\\\";\\n    JobName[\\\"softwareConsult1\\\"] = \\\"Senior Software Consultant\\\";\\n    JobName[\\\"businessConsult0\\\"] = \\\"Business Consultant\\\";\\n    JobName[\\\"businessConsult1\\\"] = \\\"Senior Business Consultant\\\";\\n    JobName[\\\"waiterPT\\\"] = \\\"Part-time Waiter\\\";\\n    JobName[\\\"employeePT\\\"] = \\\"Part-time Employee\\\";\\n})(JobName || (JobName = {}));\\nexport var CityName;\\n(function (CityName) {\\n    CityName[\\\"Aevum\\\"] = \\\"Aevum\\\";\\n    CityName[\\\"Chongqing\\\"] = \\\"Chongqing\\\";\\n    CityName[\\\"Sector12\\\"] = \\\"Sector-12\\\";\\n    CityName[\\\"NewTokyo\\\"] = \\\"New Tokyo\\\";\\n    CityName[\\\"Ishima\\\"] = \\\"Ishima\\\";\\n    CityName[\\\"Volhaven\\\"] = \\\"Volhaven\\\";\\n})(CityName || (CityName = {}));\\nexport var LocationName;\\n(function (LocationName) {\\n    LocationName[\\\"AevumAeroCorp\\\"] = \\\"AeroCorp\\\";\\n    LocationName[\\\"AevumBachmanAndAssociates\\\"] = \\\"Bachman & Associates\\\";\\n    LocationName[\\\"AevumClarkeIncorporated\\\"] = \\\"Clarke Incorporated\\\";\\n    LocationName[\\\"AevumCrushFitnessGym\\\"] = \\\"Crush Fitness Gym\\\";\\n    LocationName[\\\"AevumECorp\\\"] = \\\"ECorp\\\";\\n    LocationName[\\\"AevumFulcrumTechnologies\\\"] = \\\"Fulcrum Technologies\\\";\\n    LocationName[\\\"AevumGalacticCybersystems\\\"] = \\\"Galactic Cybersystems\\\";\\n    LocationName[\\\"AevumNetLinkTechnologies\\\"] = \\\"NetLink Technologies\\\";\\n    LocationName[\\\"AevumPolice\\\"] = \\\"Aevum Police Headquarters\\\";\\n    LocationName[\\\"AevumRhoConstruction\\\"] = \\\"Rho Construction\\\";\\n    LocationName[\\\"AevumSnapFitnessGym\\\"] = \\\"Snap Fitness Gym\\\";\\n    LocationName[\\\"AevumSummitUniversity\\\"] = \\\"Summit University\\\";\\n    LocationName[\\\"AevumWatchdogSecurity\\\"] = \\\"Watchdog Security\\\";\\n    LocationName[\\\"AevumCasino\\\"] = \\\"Iker Molina Casino\\\";\\n    LocationName[\\\"ChongqingKuaiGongInternational\\\"] = \\\"KuaiGong International\\\";\\n    LocationName[\\\"ChongqingSolarisSpaceSystems\\\"] = \\\"Solaris Space Systems\\\";\\n    LocationName[\\\"ChongqingChurchOfTheMachineGod\\\"] = \\\"Church of the Machine God\\\";\\n    LocationName[\\\"Sector12AlphaEnterprises\\\"] = \\\"Alpha Enterprises\\\";\\n    LocationName[\\\"Sector12BladeIndustries\\\"] = \\\"Blade Industries\\\";\\n    LocationName[\\\"Sector12CIA\\\"] = \\\"Central Intelligence Agency\\\";\\n    LocationName[\\\"Sector12CarmichaelSecurity\\\"] = \\\"Carmichael Security\\\";\\n    LocationName[\\\"Sector12CityHall\\\"] = \\\"Sector-12 City Hall\\\";\\n    LocationName[\\\"Sector12DeltaOne\\\"] = \\\"DeltaOne\\\";\\n    LocationName[\\\"Sector12FoodNStuff\\\"] = \\\"FoodNStuff\\\";\\n    LocationName[\\\"Sector12FourSigma\\\"] = \\\"Four Sigma\\\";\\n    LocationName[\\\"Sector12IcarusMicrosystems\\\"] = \\\"Icarus Microsystems\\\";\\n    LocationName[\\\"Sector12IronGym\\\"] = \\\"Iron Gym\\\";\\n    LocationName[\\\"Sector12JoesGuns\\\"] = \\\"Joe's Guns\\\";\\n    LocationName[\\\"Sector12MegaCorp\\\"] = \\\"MegaCorp\\\";\\n    LocationName[\\\"Sector12NSA\\\"] = \\\"National Security Agency\\\";\\n    LocationName[\\\"Sector12PowerhouseGym\\\"] = \\\"Powerhouse Gym\\\";\\n    LocationName[\\\"Sector12RothmanUniversity\\\"] = \\\"Rothman University\\\";\\n    LocationName[\\\"Sector12UniversalEnergy\\\"] = \\\"Universal Energy\\\";\\n    LocationName[\\\"NewTokyoDefComm\\\"] = \\\"DefComm\\\";\\n    LocationName[\\\"NewTokyoGlobalPharmaceuticals\\\"] = \\\"Global Pharmaceuticals\\\";\\n    LocationName[\\\"NewTokyoNoodleBar\\\"] = \\\"Noodle Bar\\\";\\n    LocationName[\\\"NewTokyoVitaLife\\\"] = \\\"VitaLife\\\";\\n    LocationName[\\\"NewTokyoArcade\\\"] = \\\"Arcade\\\";\\n    LocationName[\\\"IshimaNovaMedical\\\"] = \\\"Nova Medical\\\";\\n    LocationName[\\\"IshimaOmegaSoftware\\\"] = \\\"Omega Software\\\";\\n    LocationName[\\\"IshimaStormTechnologies\\\"] = \\\"Storm Technologies\\\";\\n    LocationName[\\\"IshimaGlitch\\\"] = \\\"0x6C1\\\";\\n    LocationName[\\\"VolhavenCompuTek\\\"] = \\\"CompuTek\\\";\\n    LocationName[\\\"VolhavenHeliosLabs\\\"] = \\\"Helios Labs\\\";\\n    LocationName[\\\"VolhavenLexoCorp\\\"] = \\\"LexoCorp\\\";\\n    LocationName[\\\"VolhavenMilleniumFitnessGym\\\"] = \\\"Millenium Fitness Gym\\\";\\n    LocationName[\\\"VolhavenNWO\\\"] = \\\"NWO\\\";\\n    LocationName[\\\"VolhavenOmniTekIncorporated\\\"] = \\\"OmniTek Incorporated\\\";\\n    LocationName[\\\"VolhavenOmniaCybersystems\\\"] = \\\"Omnia Cybersystems\\\";\\n    LocationName[\\\"VolhavenSysCoreSecurities\\\"] = \\\"SysCore Securities\\\";\\n    LocationName[\\\"VolhavenZBInstituteOfTechnology\\\"] = \\\"ZB Institute of Technology\\\";\\n    LocationName[\\\"Hospital\\\"] = \\\"Hospital\\\";\\n    LocationName[\\\"Slums\\\"] = \\\"The Slums\\\";\\n    LocationName[\\\"TravelAgency\\\"] = \\\"Travel Agency\\\";\\n    LocationName[\\\"WorldStockExchange\\\"] = \\\"World Stock Exchange\\\";\\n    LocationName[\\\"Void\\\"] = \\\"The Void\\\";\\n})(LocationName || (LocationName = {}));\\nexport const NSEnums = {\\n    CityName: CityName,\\n    CrimeType: CrimeType,\\n    FactionWorkType: FactionWorkType,\\n    GymType: GymType,\\n    JobName: JobName,\\n    LocationName: LocationName,\\n    ToastVariant: ToastVariant,\\n    UniversityClassType: UniversityClassType,\\n};\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW51bXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9lbnVtcy9lbnVtcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxhQUtYO0FBTEQsV0FBWSxhQUFhO0lBQ3hCLDhCQUFhLENBQUE7SUFDYiwyQ0FBMEIsQ0FBQTtJQUMxQiw2Q0FBNEIsQ0FBQTtJQUM1QixxREFBb0MsQ0FBQTtBQUNyQyxDQUFDLEVBTFcsYUFBYSxLQUFiLGFBQWEsUUFLeEI7QUFFRCxNQUFNLENBQU4sSUFBWSxXQUtYO0FBTEQsV0FBWSxXQUFXO0lBQ3RCLHlEQUFjLENBQUE7SUFDZCxvREFBWSxDQUFBO0lBQ1oscURBQWEsQ0FBQTtJQUNiLHdEQUFjLENBQUE7QUFDZixDQUFDLEVBTFcsV0FBVyxLQUFYLFdBQVcsUUFLdEI7QUFFRCxNQUFNLENBQU4sSUFBWSxVQVNYO0FBVEQsV0FBWSxVQUFVO0lBQ3JCLCtEQUFpRCxDQUFBO0lBQ2pELG1FQUFxRCxDQUFBO0lBQ3JELG1FQUFxRCxDQUFBO0lBQ3JELGdGQUFrRSxDQUFBO0lBQ2xFLDRFQUE4RCxDQUFBO0lBQzlELGdGQUFrRSxDQUFBO0lBQ2xFLHFGQUF1RSxDQUFBO0lBQ3ZFLDZFQUErRCxDQUFBO0FBQ2hFLENBQUMsRUFUVyxVQUFVLEtBQVYsVUFBVSxRQVNyQjtBQUVELE1BQU0sQ0FBTixJQUFZLFlBS1g7QUFMRCxXQUFZLFlBQVk7SUFDdkIsbUNBQW1CLENBQUE7SUFDbkIsbUNBQW1CLENBQUE7SUFDbkIsK0JBQWUsQ0FBQTtJQUNmLDZCQUFhLENBQUE7QUFDZCxDQUFDLEVBTFcsWUFBWSxLQUFaLFlBQVksUUFLdkI7QUFFRCxNQUFNLENBQU4sSUFBWSxTQWFYO0FBYkQsV0FBWSxTQUFTO0lBQ3BCLGtDQUFxQixDQUFBO0lBQ3JCLG1DQUFzQixDQUFBO0lBQ3RCLHdCQUFXLENBQUE7SUFDWCxnQ0FBbUIsQ0FBQTtJQUNuQixxQ0FBd0IsQ0FBQTtJQUN4Qix5Q0FBNEIsQ0FBQTtJQUM1QiwyQ0FBOEIsQ0FBQTtJQUM5QixrQ0FBcUIsQ0FBQTtJQUNyQixnREFBbUMsQ0FBQTtJQUNuQyw4QkFBaUIsQ0FBQTtJQUNqQiw0Q0FBK0IsQ0FBQTtJQUMvQiw0QkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFiVyxTQUFTLEtBQVQsU0FBUyxRQWFwQjtBQUVELE1BQU0sQ0FBTixJQUFZLGVBSVg7QUFKRCxXQUFZLGVBQWU7SUFDMUIsc0NBQW1CLENBQUE7SUFDbkIsa0NBQWUsQ0FBQTtJQUNmLHdDQUFxQixDQUFBO0FBQ3RCLENBQUMsRUFKVyxlQUFlLEtBQWYsZUFBZSxRQUkxQjtBQUVELE1BQU0sQ0FBTixJQUFZLG1CQU9YO0FBUEQsV0FBWSxtQkFBbUI7SUFDOUIsMkRBQW9DLENBQUE7SUFDcEMseURBQWtDLENBQUE7SUFDbEMsNENBQXFCLENBQUE7SUFDckIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7SUFDekIsZ0RBQXlCLENBQUE7QUFDMUIsQ0FBQyxFQVBXLG1CQUFtQixLQUFuQixtQkFBbUIsUUFPOUI7QUFFRCxNQUFNLENBQU4sSUFBWSxPQUtYO0FBTEQsV0FBWSxPQUFPO0lBQ2xCLDJCQUFnQixDQUFBO0lBQ2hCLDBCQUFlLENBQUE7SUFDZiw0QkFBaUIsQ0FBQTtJQUNqQiwwQkFBZSxDQUFBO0FBQ2hCLENBQUMsRUFMVyxPQUFPLEtBQVAsT0FBTyxRQUtsQjtBQUVELE1BQU0sQ0FBTixJQUFZLE9BdUNYO0FBdkNELFdBQVksT0FBTztJQUNsQixvREFBeUMsQ0FBQTtJQUN6QyxpREFBc0MsQ0FBQTtJQUN0QyxpREFBc0MsQ0FBQTtJQUN0QyxnREFBcUMsQ0FBQTtJQUNyQyx5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyxxREFBMEMsQ0FBQTtJQUMxQyxpREFBc0MsQ0FBQTtJQUN0Qyw0QkFBaUIsQ0FBQTtJQUNqQiw2QkFBa0IsQ0FBQTtJQUNsQiw2QkFBa0IsQ0FBQTtJQUNsQix3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtJQUNqQywyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyx3Q0FBNkIsQ0FBQTtJQUM3Qix5Q0FBOEIsQ0FBQTtJQUM5Qix5Q0FBOEIsQ0FBQTtJQUM5QiwyQ0FBZ0MsQ0FBQTtJQUNoQyxnREFBcUMsQ0FBQTtJQUNyQyxnREFBcUMsQ0FBQTtJQUNyQyx1Q0FBNEIsQ0FBQTtJQUM1QixxQ0FBMEIsQ0FBQTtJQUMxQix1Q0FBNEIsQ0FBQTtJQUM1Qix5Q0FBOEIsQ0FBQTtJQUM5Qiw0Q0FBaUMsQ0FBQTtJQUNqQyx5Q0FBOEIsQ0FBQTtJQUM5QixpQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBdUIsQ0FBQTtJQUN2Qix1Q0FBNEIsQ0FBQTtJQUM1Qiw0QkFBaUIsQ0FBQTtJQUNqQixnQ0FBcUIsQ0FBQTtJQUNyQixtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyxtREFBd0MsQ0FBQTtJQUN4QywwREFBK0MsQ0FBQTtJQUMvQyx3Q0FBNkIsQ0FBQTtJQUM3Qiw0Q0FBaUMsQ0FBQTtBQUNsQyxDQUFDLEVBdkNXLE9BQU8sS0FBUCxPQUFPLFFBdUNsQjtBQTJCRCxNQUFNLENBQU4sSUFBWSxRQU9YO0FBUEQsV0FBWSxRQUFRO0lBQ25CLDJCQUFlLENBQUE7SUFDZixtQ0FBdUIsQ0FBQTtJQUN2QixrQ0FBc0IsQ0FBQTtJQUN0QixrQ0FBc0IsQ0FBQTtJQUN0Qiw2QkFBaUIsQ0FBQTtJQUNqQixpQ0FBcUIsQ0FBQTtBQUN0QixDQUFDLEVBUFcsUUFBUSxLQUFSLFFBQVEsUUFPbkI7QUFFRCxNQUFNLENBQU4sSUFBWSxZQWdFWDtBQWhFRCxXQUFZLFlBQVk7SUFDdkIsMENBQTBCLENBQUE7SUFDMUIsa0VBQWtELENBQUE7SUFDbEQsK0RBQStDLENBQUE7SUFDL0MsMERBQTBDLENBQUE7SUFDMUMsb0NBQW9CLENBQUE7SUFDcEIsaUVBQWlELENBQUE7SUFDakQsbUVBQW1ELENBQUE7SUFDbkQsaUVBQWlELENBQUE7SUFDakQseURBQXlDLENBQUE7SUFDekMseURBQXlDLENBQUE7SUFDekMsd0RBQXdDLENBQUE7SUFDeEMsMkRBQTJDLENBQUE7SUFDM0MsMkRBQTJDLENBQUE7SUFDM0Msa0RBQWtDLENBQUE7SUFFbEMseUVBQXlELENBQUE7SUFDekQsc0VBQXNELENBQUE7SUFDdEQsNEVBQTRELENBQUE7SUFFNUQsOERBQThDLENBQUE7SUFDOUMsNERBQTRDLENBQUE7SUFDNUMsMkRBQTJDLENBQUE7SUFDM0Msa0VBQWtELENBQUE7SUFDbEQsd0RBQXdDLENBQUE7SUFDeEMsNkNBQTZCLENBQUE7SUFDN0IsaURBQWlDLENBQUE7SUFDakMsZ0RBQWdDLENBQUE7SUFDaEMsa0VBQWtELENBQUE7SUFDbEQsNENBQTRCLENBQUE7SUFDNUIsK0NBQStCLENBQUE7SUFDL0IsNkNBQTZCLENBQUE7SUFDN0Isd0RBQXdDLENBQUE7SUFDeEMsd0RBQXdDLENBQUE7SUFDeEMsZ0VBQWdELENBQUE7SUFDaEQsNERBQTRDLENBQUE7SUFFNUMsMkNBQTJCLENBQUE7SUFDM0Isd0VBQXdELENBQUE7SUFDeEQsZ0RBQWdDLENBQUE7SUFDaEMsNkNBQTZCLENBQUE7SUFDN0IseUNBQXlCLENBQUE7SUFFekIsa0RBQWtDLENBQUE7SUFDbEMsc0RBQXNDLENBQUE7SUFDdEMsOERBQThDLENBQUE7SUFDOUMsc0NBQXNCLENBQUE7SUFFdEIsNkNBQTZCLENBQUE7SUFDN0Isa0RBQWtDLENBQUE7SUFDbEMsNkNBQTZCLENBQUE7SUFDN0IscUVBQXFELENBQUE7SUFDckQsbUNBQW1CLENBQUE7SUFDbkIsb0VBQW9ELENBQUE7SUFDcEQsZ0VBQWdELENBQUE7SUFDaEQsZ0VBQWdELENBQUE7SUFDaEQsOEVBQThELENBQUE7SUFFOUQscUNBQXFCLENBQUE7SUFDckIsbUNBQW1CLENBQUE7SUFDbkIsOENBQThCLENBQUE7SUFDOUIsMkRBQTJDLENBQUE7SUFFM0MsaUNBQWlCLENBQUE7QUFDbEIsQ0FBQyxFQWhFVyxZQUFZLEtBQVosWUFBWSxRQWdFdkI7QUFFRCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDdEIsUUFBUSxFQUFFLFFBQVE7SUFDbEIsU0FBUyxFQUFFLFNBQVM7SUFDcEIsZUFBZSxFQUFFLGVBQWU7SUFDaEMsT0FBTyxFQUFFLE9BQU87SUFDaEIsT0FBTyxFQUFFLE9BQU87SUFDaEIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsWUFBWSxFQUFFLFlBQVk7SUFDMUIsbUJBQW1CLEVBQUUsbUJBQW1CO0NBQy9CLENBQUMifQ==\",\"filename\":\"/scripts/enums/enums.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":63,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e3e6b890-e466-4f07-8af0-67b1a36ce460\",\"moduleSequenceNumber\":116}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":116,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    while (true) {\\n        await ns.weaken(target);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwRmFybS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvZXhwRmFybS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFDNUMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/expFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":65,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const target = ns.args[0];\\n    const farmServers = [];\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n        farmServers.push(OwnServerList.FARM_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    const scriptName = ScriptPath.EXP_FARM;\\n    for (const farmServer of farmServers) {\\n        if (farmServer) {\\n            const threadsMax = Math.floor(ns.getServerMaxRam(farmServer) / ns.getScriptRam(scriptName));\\n            ns.scp(scriptName, farmServer);\\n            if (ns.scriptRunning(scriptName, farmServer)) {\\n                ns.scriptKill(scriptName, farmServer);\\n            }\\n            ns.exec(scriptName, farmServer, threadsMax, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuRXhwRmFybVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1bkV4cEZhcm1TZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sV0FBVyxHQUFhLEVBQUUsQ0FBQztJQUNqQyxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUN6RTtRQUNELFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUUsWUFBWSxFQUFFLENBQUM7S0FDZjtJQUNELE1BQU0sVUFBVSxHQUFXLFVBQVUsQ0FBQyxRQUFRLENBQUM7SUFFL0MsS0FBSyxNQUFNLFVBQVUsSUFBSSxXQUFXLEVBQUU7UUFDckMsSUFBSSxVQUFVLEVBQUU7WUFDZixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUM1QixFQUFFLENBQUMsZUFBZSxDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQzVELENBQUM7WUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUUvQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxFQUFFO2dCQUM3QyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQzthQUN0QztZQUNELEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUM7U0FDcEQ7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///d123fe11-9a66-46c7-a1a5-95927c2b6202\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/executingScripts/runExpFarmServers.js\",\"url\":\"blob:file:///95dff6df-3b39-466d-ac6d-37f171e633a5\",\"moduleSequenceNumber\":211}],\"dependents\":[],\"ramUsage\":5.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":211,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    const serverMaxRam = ns.getServerMaxRam(OwnServerList.HOME) - 64;\\n    const threadsPerTarget = serversHackable.length !== 0\\n        ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n        : 0;\\n    if (threadsPerTarget > 0) {\\n        if (ns.scriptRunning(ScriptPath.MONEY_FARM, OwnServerList.HOME)) {\\n            ns.scriptKill(ScriptPath.MONEY_FARM, OwnServerList.HOME);\\n        }\\n        for (const target of serversHackable) {\\n            ns.exec(ScriptPath.MONEY_FARM, OwnServerList.HOME, threadsPerTarget, target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuSG9tZVNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2V4ZWN1dGluZ1NjcmlwdHMvcnVuSG9tZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDOUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVwRSxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLE1BQU0sT0FBTyxHQUFnQixJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNqRCxNQUFNLGVBQWUsR0FBYSxPQUFPLENBQUMsd0JBQXdCLENBQUM7SUFDbkUsTUFBTSxTQUFTLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDekQsTUFBTSxZQUFZLEdBQUcsRUFBRSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2pFLE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztRQUMzQixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLEdBQUcsZUFBZSxDQUFDLE1BQU0sR0FBRyxTQUFTLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVOLElBQUksZ0JBQWdCLEdBQUcsQ0FBQyxFQUFFO1FBQ3pCLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNoRSxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pEO1FBQ0QsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7WUFDckMsRUFBRSxDQUFDLElBQUksQ0FDTixVQUFVLENBQUMsVUFBVSxFQUNyQixhQUFhLENBQUMsSUFBSSxFQUNsQixnQkFBZ0IsRUFDaEIsTUFBTSxDQUNOLENBQUM7U0FDRjtLQUNEO0FBQ0YsQ0FBQyJ9\",\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///3a126153-70b9-43f8-a500-4709b0737f86\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///451cccad-04ee-4f0b-a612-d6a873de3d9d\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///14e73aee-218c-4462-8e1c-0942dd4d5ecf\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/executingScripts/runHomeServer.js\",\"url\":\"blob:file:///8d8cda40-a83e-4aa8-a170-4f5b99a41ba0\",\"moduleSequenceNumber\":209}],\"dependents\":[],\"ramUsage\":8.05,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":209,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackableWithRootAndMoney;\\n    const moneyServers = [];\\n    const scriptRam = ns.getScriptRam(ScriptPath.MONEY_FARM);\\n    let serverNumber = 0;\\n    while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n        moneyServers.push(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString());\\n        serverNumber++;\\n    }\\n    for (const moneyServer of moneyServers) {\\n        if (moneyServer) {\\n            const serverMaxRam = ns.getServerMaxRam(moneyServer);\\n            const threadsPerTarget = serversHackable.length !== 0\\n                ? Math.floor(serverMaxRam / serversHackable.length / scriptRam)\\n                : 0;\\n            ns.scp(ScriptPath.MONEY_FARM, moneyServer);\\n            if (threadsPerTarget !== 0) {\\n                if (ns.scriptRunning(ScriptPath.MONEY_FARM, moneyServer)) {\\n                    ns.scriptKill(ScriptPath.MONEY_FARM, moneyServer);\\n                }\\n                for (const target of serversHackable) {\\n                    ns.exec(ScriptPath.MONEY_FARM, moneyServer, threadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuTW9uZXlTZXJ2ZXJzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9ydW5Nb25leVNlcnZlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQzlELE9BQU8sRUFBRSxhQUFhLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFcEUsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBZ0IsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDakQsTUFBTSxlQUFlLEdBQWEsT0FBTyxDQUFDLHdCQUF3QixDQUFDO0lBQ25FLE1BQU0sWUFBWSxHQUFhLEVBQUUsQ0FBQztJQUNsQyxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN6RCxJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsT0FDQyxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUMxRTtRQUNELFlBQVksQ0FBQyxJQUFJLENBQ2hCLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FDMUQsQ0FBQztRQUNGLFlBQVksRUFBRSxDQUFDO0tBQ2Y7SUFFRCxLQUFLLE1BQU0sV0FBVyxJQUFJLFlBQVksRUFBRTtRQUN2QyxJQUFJLFdBQVcsRUFBRTtZQUNoQixNQUFNLFlBQVksR0FBRyxFQUFFLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sZ0JBQWdCLEdBQ3JCLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxHQUFHLGVBQWUsQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO2dCQUMvRCxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRU4sRUFBRSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1lBQzNDLElBQUksZ0JBQWdCLEtBQUssQ0FBQyxFQUFFO2dCQUMzQixJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsRUFBRTtvQkFDekQsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxLQUFLLE1BQU0sTUFBTSxJQUFJLGVBQWUsRUFBRTtvQkFDckMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDdEU7YUFDRDtTQUNEO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///87e6d216-26d9-4adb-9b99-9cbc7daa9738\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///ca889bce-97e3-4bc4-8e69-a36d193c3746\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///88e8d6ca-3cd9-4a6b-ba4a-d4c420e65d74\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/executingScripts/runMoneyServers.js\",\"url\":\"blob:file:///11e0d791-ecd0-47e3-8a24-97634f8babcf\",\"moduleSequenceNumber\":210}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":210,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export const DATATYPE = {\\n    GB: Intl.NumberFormat('de-de', {\\n        style: 'unit',\\n        unit: 'gigabyte',\\n    }),\\n};\\nexport const MONEY = Intl.NumberFormat('en-us', {\\n    style: 'currency',\\n    currency: 'USD',\\n    maximumFractionDigits: 4,\\n    notation: 'compact',\\n});\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2Zvcm1hdHMvZm9ybWF0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUc7SUFDdkIsRUFBRSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFO1FBQzlCLEtBQUssRUFBRSxNQUFNO1FBQ2IsSUFBSSxFQUFFLFVBQVU7S0FDaEIsQ0FBQztDQUNGLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7SUFDL0MsS0FBSyxFQUFFLFVBQVU7SUFDakIsUUFBUSxFQUFFLEtBQUs7SUFDZixxQkFBcUIsRUFBRSxDQUFDO0lBQ3hCLFFBQVEsRUFBRSxTQUFTO0NBQ25CLENBQUMsQ0FBQyJ9\",\"filename\":\"/scripts/formats/formats.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":1.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":69,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const scriptName = ScriptPath.MONEY_FARM;\\n    const ramScriptNeeded = ns.getScriptRam(scriptName);\\n    const hackableServersWithMoney = servers.hackableWithRootAndMoneyAndRam;\\n    for (const server of hackableServersWithMoney) {\\n        const serverStats = ns.getServer(server);\\n        ns.scp(scriptName, server);\\n        if (ns.fileExists(scriptName, server)) {\\n            if (!ns.scriptRunning(scriptName, server)) {\\n                const maxNumberOfScripts = Math.floor(serverStats.maxRam / ramScriptNeeded);\\n                if (maxNumberOfScripts > 0) {\\n                    ns.exec(scriptName, server, maxNumberOfScripts, server);\\n                }\\n            }\\n        }\\n    }\\n    const hackableServersWitRam = servers.hackableWithRootAndRamAndNoMoney;\\n    for (const server of hackableServersWitRam) {\\n        ns.scriptKill(ScriptPath.MONEY_FARM, server);\\n        const serverStats = ns.getServer(server);\\n        let targets = ns.scan(server);\\n        targets = targets.filter((target) => target !== OwnServerList.HOME && ns.hasRootAccess(target));\\n        ns.scp(scriptName, server);\\n        const maxNumberTreadsPerTarget = Math.floor(serverStats.maxRam / ramScriptNeeded / targets.length);\\n        if (ns.fileExists(scriptName, server)) {\\n            for (const target of targets) {\\n                if (maxNumberTreadsPerTarget > 0) {\\n                    ns.exec(scriptName, server, maxNumberTreadsPerTarget, target);\\n                }\\n            }\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVuUmVtb3RlT25UYXJnZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3J1blJlbW90ZU9uVGFyZ2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQWdCLElBQUksV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sVUFBVSxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUM7SUFDekMsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUVwRCxNQUFNLHdCQUF3QixHQUM3QixPQUFPLENBQUMsOEJBQThCLENBQUM7SUFDeEMsS0FBSyxNQUFNLE1BQU0sSUFBSSx3QkFBd0IsRUFBRTtRQUM5QyxNQUFNLFdBQVcsR0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRWpELEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBRTNCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO2dCQUMxQyxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ3BDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxDQUNwQyxDQUFDO2dCQUVGLElBQUksa0JBQWtCLEdBQUcsQ0FBQyxFQUFFO29CQUMzQixFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxDQUFDLENBQUM7aUJBQ3hEO2FBQ0Q7U0FDRDtLQUNEO0lBRUQsTUFBTSxxQkFBcUIsR0FDMUIsT0FBTyxDQUFDLGdDQUFnQyxDQUFDO0lBQzFDLEtBQUssTUFBTSxNQUFNLElBQUkscUJBQXFCLEVBQUU7UUFDM0MsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sV0FBVyxHQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDakQsSUFBSSxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixPQUFPLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FDdkIsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLE1BQU0sS0FBSyxhQUFhLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQ3JFLENBQUM7UUFFRixFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUUzQixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxLQUFLLENBQzFDLFdBQVcsQ0FBQyxNQUFNLEdBQUcsZUFBZSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQ3JELENBQUM7UUFFRixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsVUFBVSxFQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ3RDLEtBQUssTUFBTSxNQUFNLElBQUksT0FBTyxFQUFFO2dCQUM3QixJQUFJLHdCQUF3QixHQUFHLENBQUMsRUFBRTtvQkFDakMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLHdCQUF3QixFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUM5RDthQUNEO1NBQ0Q7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///e14427e6-a59a-4b92-aa95-ed4f2eb54442\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///99a708ff-8f3e-44ef-83c7-b4ffe2d28ae0\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///73eeb646-2a8f-47b7-924b-12e7007483ad\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/executingScripts/runRemoteOnTarget.js\",\"url\":\"blob:file:///6fd1404c-5557-4650-8398-ffa7c0897d16\",\"moduleSequenceNumber\":208}],\"dependents\":[],\"ramUsage\":8.75,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":208,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getScriptRam\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"scp\",\"cost\":0.6},{\"type\":\"fn\",\"name\":\"fileExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"scriptRunning\",\"cost\":1},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"scriptKill\",\"cost\":1},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"hasRootAccess\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const startServer = ns.getHostname();\\n    const target = ns.args[0];\\n    const path = (target, serverName, serverList, ignore, isFound) => {\\n        ignore.push(serverName);\\n        const scanResults = ns.scan(serverName);\\n        for (const server of scanResults) {\\n            if (ignore.includes(server)) {\\n                continue;\\n            }\\n            if (server === target) {\\n                serverList.push(server);\\n                return [serverList, true];\\n            }\\n            serverList.push(server);\\n            [serverList, isFound] = path(target, server, serverList, ignore, isFound);\\n            if (isFound) {\\n                return [serverList, isFound];\\n            }\\n            serverList.pop();\\n        }\\n        return [serverList, false];\\n    };\\n    if (target === undefined) {\\n        ns.alert('Please provide target server');\\n        return;\\n    }\\n    const [results, isFound] = path(target, startServer, [], [], false);\\n    if (!isFound) {\\n        ns.alert('Server not found!');\\n    }\\n    else {\\n        ns.tprintf(results.join(' --> '));\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZFJvdXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvZmluZFJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxXQUFXLEdBQVcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFXLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFXLENBQUM7SUFFNUMsTUFBTSxJQUFJLEdBQUcsQ0FDWixNQUFjLEVBQ2QsVUFBa0IsRUFDbEIsVUFBb0IsRUFDcEIsTUFBZ0IsRUFDaEIsT0FBZ0IsRUFDTSxFQUFFO1FBQ3hCLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDeEIsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxLQUFLLE1BQU0sTUFBTSxJQUFJLFdBQVcsRUFBRTtZQUNqQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQzVCLFNBQVM7YUFDVDtZQUNELElBQUksTUFBTSxLQUFLLE1BQU0sRUFBRTtnQkFDdEIsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDeEIsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUMxQjtZQUNELFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEIsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztZQUMxRSxJQUFJLE9BQU8sRUFBRTtnQkFDWixPQUFPLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2FBQzdCO1lBQ0QsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFFRixJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7UUFDekIsRUFBRSxDQUFDLEtBQUssQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3pDLE9BQU87S0FDUDtJQUVELE1BQU0sQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxXQUFXLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVwRSxJQUFJLENBQUMsT0FBTyxFQUFFO1FBQ2IsRUFBRSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQzlCO1NBQU07UUFDTixFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztLQUNsQztBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/informationFunctions/findRoute.js\",\"url\":\"blob:file:///83c52e38-f255-4d91-b55f-1f076272738d\",\"moduleSequenceNumber\":13403}],\"dependents\":[],\"ramUsage\":1.85,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":71,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getHostname\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    ns.tprintf(`Maximum GB :${DATATYPE.GB.format(ns.getPurchasedServerMaxRam())}`);\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const price = ns.getPurchasedServerCost(ram);\\n        ns.tprintf(`${i} -- Server ram: ${DATATYPE.GB.format(ram)} -- Price: ${MONEY.format(price)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29zdFNlcnZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2Nvc3RTZXJ2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUU5RCxNQUFNLENBQUMsS0FBSyxVQUFVLElBQUksQ0FBQyxFQUFNO0lBQ2hDLEVBQUUsQ0FBQyxPQUFPLENBQ1QsZUFBZSxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxFQUFFLENBQ2xFLENBQUM7SUFFRixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzdCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzNCLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QyxFQUFFLENBQUMsT0FBTyxDQUNULEdBQUcsQ0FBQyxtQkFBbUIsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsS0FBSyxDQUFDLE1BQU0sQ0FDdkUsS0FBSyxDQUNMLEVBQUUsQ0FDSCxDQUFDO0tBQ0Y7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///0ec338fb-a5b1-4488-bc8e-c139a2dda846\",\"moduleSequenceNumber\":13248},{\"filename\":\"/scripts/informationFunctions/costServer.js\",\"url\":\"blob:file:///338a4f54-9603-49cb-8a3a-a2a54e722e61\",\"moduleSequenceNumber\":15790}],\"dependents\":[],\"ramUsage\":1.9,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":72,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPurchasedServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns);\\n    const hackableSevers = servers.hackable;\\n    const player = ns.getPlayer();\\n    const serverEXPList = [];\\n    for (const server of hackableSevers) {\\n        const serverStats = ns.getServer(server);\\n        const serverWeakenTime = Math.round(ns.formulas.hacking.weakenTime(serverStats, player) / 1000);\\n        const serverHackinExp = ns.formulas.hacking.hackExp(serverStats, player);\\n        const expPerSecond = parseFloat((serverHackinExp / serverWeakenTime).toFixed(5));\\n        serverEXPList.push({\\n            server: server,\\n            exp: serverHackinExp,\\n            weakenTime: serverWeakenTime,\\n            expPerSecond: expPerSecond,\\n        });\\n    }\\n    serverEXPList.sort((a, b) => b.expPerSecond - a.expPerSecond);\\n    for (const entry of serverEXPList) {\\n        ns.print(entry);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0QmVzdFNlcnZlclRvRmFybUV4cC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2luZm9ybWF0aW9uRnVuY3Rpb25zL2dldEJlc3RTZXJ2ZXJUb0Zhcm1FeHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDcEMsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUN4QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDOUIsTUFBTSxhQUFhLEdBS2IsRUFBRSxDQUFDO0lBRVQsS0FBSyxNQUFNLE1BQU0sSUFBSSxjQUFjLEVBQUU7UUFDcEMsTUFBTSxXQUFXLEdBQUcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6QyxNQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQ2xDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUMxRCxDQUFDO1FBQ0YsTUFBTSxlQUFlLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN6RSxNQUFNLFlBQVksR0FBRyxVQUFVLENBQzlCLENBQUMsZUFBZSxHQUFHLGdCQUFnQixDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUMvQyxDQUFDO1FBRUYsYUFBYSxDQUFDLElBQUksQ0FBQztZQUNsQixNQUFNLEVBQUUsTUFBTTtZQUNkLEdBQUcsRUFBRSxlQUFlO1lBQ3BCLFVBQVUsRUFBRSxnQkFBZ0I7WUFDNUIsWUFBWSxFQUFFLFlBQVk7U0FDMUIsQ0FBQyxDQUFDO0tBQ0g7SUFDRCxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUQsS0FBSyxNQUFNLEtBQUssSUFBSSxhQUFhLEVBQUU7UUFDbEMsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNoQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/getBestServerToFarmExp.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":73,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nimport { MONEY, DATATYPE } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const ramList = {};\\n    let newServerName = '';\\n    let serverNumber = 0;\\n    const serverType = (await ns.prompt('What kind of a server you want to purchase?', {\\n        type: 'select',\\n        choices: [OwnServerList.FARM_SERVER, OwnServerList.MONEY_SERVER],\\n    }));\\n    if (serverType === OwnServerList.FARM_SERVER) {\\n        while (ns.serverExists(OwnServerList.FARM_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.FARM_SERVER + '-' + serverNumber.toString();\\n    }\\n    if (serverType === OwnServerList.MONEY_SERVER) {\\n        while (ns.serverExists(OwnServerList.MONEY_SERVER + '-' + serverNumber.toString())) {\\n            serverNumber++;\\n        }\\n        newServerName = OwnServerList.MONEY_SERVER + '-' + serverNumber.toString();\\n    }\\n    for (let i = 1; i <= 20; i++) {\\n        const ram = Math.pow(2, i);\\n        const cost = ns.getPurchasedServerCost(ram);\\n        ramList[DATATYPE.GB.format(ram) + ' - ' + MONEY.format(cost)] = Math.pow(2, i);\\n    }\\n    const serverRam = (await ns.prompt('How much ram do you want to choose', {\\n        type: 'select',\\n        choices: [...Object.keys(ramList)],\\n    }));\\n    const buy = (await ns.prompt(`Do you want to buy a ${newServerName} with ${DATATYPE.GB.format(ramList[serverRam])}. It will cost ${MONEY.format(ns.getPurchasedServerCost(ramList[serverRam]))}!`));\\n    if (buy) {\\n        ns.purchaseServer(newServerName, ramList[serverRam]);\\n        if (serverType === OwnServerList.MONEY_SERVER) {\\n            ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n        }\\n        if (serverType === OwnServerList.FARM_SERVER) {\\n            ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVyY2hhc2VTZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9wdXJjaGFzZVNlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBMkIsRUFBRSxDQUFDO0lBQzNDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztJQUN2QixJQUFJLFlBQVksR0FBRyxDQUFDLENBQUM7SUFFckIsTUFBTSxVQUFVLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQzFDLDZDQUE2QyxFQUM3QztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsYUFBYSxDQUFDLFdBQVcsRUFBRSxhQUFhLENBQUMsWUFBWSxDQUFDO0tBQ2hFLENBQ0QsQ0FBVyxDQUFDO0lBRWIsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFdBQVcsRUFBRTtRQUM3QyxPQUNDLEVBQUUsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQ3pFO1lBQ0QsWUFBWSxFQUFFLENBQUM7U0FDZjtRQUNELGFBQWEsR0FBRyxhQUFhLENBQUMsV0FBVyxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7S0FDMUU7SUFFRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsWUFBWSxFQUFFO1FBQzlDLE9BQ0MsRUFBRSxDQUFDLFlBQVksQ0FDZCxhQUFhLENBQUMsWUFBWSxHQUFHLEdBQUcsR0FBRyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQzFELEVBQ0E7WUFDRCxZQUFZLEVBQUUsQ0FBQztTQUNmO1FBQ0QsYUFBYSxHQUFHLGFBQWEsQ0FBQyxZQUFZLEdBQUcsR0FBRyxHQUFHLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztLQUMzRTtJQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDN0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDM0IsTUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLHNCQUFzQixDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQ3ZFLENBQUMsRUFDRCxDQUFDLENBQ0QsQ0FBQztLQUNGO0lBRUQsTUFBTSxTQUFTLEdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3pDLG9DQUFvQyxFQUNwQztRQUNDLElBQUksRUFBRSxRQUFRO1FBQ2QsT0FBTyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0tBQ2xDLENBQ0QsQ0FBVyxDQUFDO0lBRWIsTUFBTSxHQUFHLEdBQVksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQ3BDLHdCQUF3QixhQUFhLFNBQVMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxNQUFNLENBQy9ELE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FDbEIsa0JBQWtCLEtBQUssQ0FBQyxNQUFNLENBQzlCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FDN0MsR0FBRyxDQUNKLENBQVksQ0FBQztJQUVkLElBQUksR0FBRyxFQUFFO1FBQ1IsRUFBRSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDckQsSUFBSSxVQUFVLEtBQUssYUFBYSxDQUFDLFlBQVksRUFBRTtZQUM5QyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDMUQ7UUFDRCxJQUFJLFVBQVUsS0FBSyxhQUFhLENBQUMsV0FBVyxFQUFFO1lBQzdDLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztTQUNGO0tBQ0Q7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///9e340fe1-b4e1-4b91-8c22-6f0e8bfb67bd\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///0f17df24-27ba-401e-a176-2f3e09a75f1a\",\"moduleSequenceNumber\":57},{\"filename\":\"/scripts/purchaseServer.js\",\"url\":\"blob:file:///86cf0957-251f-4dc2-bc44-2307197810ae\",\"moduleSequenceNumber\":6311}],\"dependents\":[],\"ramUsage\":5.5,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":74,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"serverExists\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getPurchasedServerCost\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"purchaseServer\",\"cost\":2.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nexport async function main(ns) {\\n    const servers = new ServersList(ns).serversTest;\\n    for (const server of servers) {\\n        ns.tprintf(JSON.stringify(server));\\n        ns.tprintf('\\\\n');\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdDEuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy90ZXN0MS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFFOUQsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7SUFDaEQsS0FBSyxNQUFNLE1BQU0sSUFBSSxPQUFPLEVBQUU7UUFDN0IsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDbkMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUNqQjtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/test1.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":75,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { DATATYPE, MONEY } from '/scripts/formats/formats.js';\\nexport async function main(ns) {\\n    const divideSymbol = '_';\\n    const func = ns.args[0] ? ns.args[0] : 0;\\n    const servers = new ServersList(ns);\\n    const serversHackable = servers.hackable;\\n    let count = 1;\\n    switch (func) {\\n        case 0:\\n            for (const server of serversHackable) {\\n                printing(server);\\n                count++;\\n            }\\n            break;\\n        case 1:\\n            for (const server of servers.value) {\\n                printing(server);\\n                count++;\\n            }\\n    }\\n    function dash(minLength, length) {\\n        const diff = minLength - length;\\n        let dashString = '';\\n        for (let i = 0; i < diff; i++) {\\n            dashString = dashString + ' ';\\n        }\\n        dashString = dashString + divideSymbol;\\n        return dashString;\\n    }\\n    function printing(server) {\\n        const serverStats = ns.getServer(server);\\n        const rootAccess = serverStats.hasAdminRights ? 'YES' : 'NO ';\\n        const backdoor = serverStats.backdoorInstalled ? 'YES' : 'NO ';\\n        const dashNumber = dash(2, count.toString().length);\\n        const dashLvl = dash(4, serverStats.requiredHackingSkill.toString().length);\\n        const dashName = dash(20, server.length);\\n        const dashRam = dash(8, serverStats.maxRam.toString().length);\\n        ns.tprintf(`${count} ${dashNumber} Name: ${server} ${dashName} Lvl: ${serverStats.requiredHackingSkill} ${dashLvl} root: ${rootAccess} ${divideSymbol} backD: ${backdoor} ${divideSymbol} Ports: ${serverStats.openPortCount}/${serverStats.numOpenPortsRequired} ${divideSymbol} ${DATATYPE.GB.format(serverStats.maxRam)} ${dashRam} ${MONEY.format(serverStats.moneyMax)}`);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdFNlcnZlckhhY2thYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvaW5mb3JtYXRpb25GdW5jdGlvbnMvbGlzdFNlcnZlckhhY2thYmxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRTlELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsTUFBTSxZQUFZLEdBQUcsR0FBRyxDQUFDO0lBQ3pCLE1BQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6QyxNQUFNLE9BQU8sR0FBRyxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNwQyxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ3pDLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQztJQUVkLFFBQVEsSUFBSSxFQUFFO1FBQ2IsS0FBSyxDQUFDO1lBQ0wsS0FBSyxNQUFNLE1BQU0sSUFBSSxlQUFlLEVBQUU7Z0JBQ3JDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtZQUNELE1BQU07UUFDUCxLQUFLLENBQUM7WUFDTCxLQUFLLE1BQU0sTUFBTSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEVBQUU7Z0JBQ25DLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDakIsS0FBSyxFQUFFLENBQUM7YUFDUjtLQUNGO0lBRUQsU0FBUyxJQUFJLENBQUMsU0FBaUIsRUFBRSxNQUFjO1FBQzlDLE1BQU0sSUFBSSxHQUFHLFNBQVMsR0FBRyxNQUFNLENBQUM7UUFDaEMsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDOUIsVUFBVSxHQUFHLFVBQVUsR0FBRyxHQUFHLENBQUM7U0FDOUI7UUFDRCxVQUFVLEdBQUcsVUFBVSxHQUFHLFlBQVksQ0FBQztRQUN2QyxPQUFPLFVBQVUsQ0FBQztJQUNuQixDQUFDO0lBRUQsU0FBUyxRQUFRLENBQUMsTUFBYztRQUMvQixNQUFNLFdBQVcsR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pDLE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQzlELE1BQU0sUUFBUSxHQUFHLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDL0QsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDcEQsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlELEVBQUUsQ0FBQyxPQUFPLENBQ1QsR0FBRyxLQUFLLElBQUksVUFBVSxVQUFVLE1BQU0sSUFBSSxRQUFRLFNBQ2pELFdBQVcsQ0FBQyxvQkFDYixJQUFJLE9BQU8sVUFBVSxVQUFVLElBQUksWUFBWSxXQUFXLFFBQVEsSUFBSSxZQUFZLFdBQ2pGLFdBQVcsQ0FBQyxhQUNiLElBQ0MsV0FBVyxDQUFDLG9CQUNiLElBQUksWUFBWSxJQUFJLFFBQVEsQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUNyQyxXQUFXLENBQUMsTUFBTSxDQUNsQixJQUFJLE9BQU8sSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUNwRCxDQUFDO0lBQ0gsQ0FBQztBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/formats/formats.js\",\"url\":\"blob:file:///3e1f9a2b-fe41-4529-aca5-aaa8be0aa9b5\",\"moduleSequenceNumber\":69},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///b65a2c44-aa23-42ea-8aef-d8e0ddbd9ef5\",\"moduleSequenceNumber\":63},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///23dbd0d0-d83f-424e-b53f-bf781ba33f9f\",\"moduleSequenceNumber\":62},{\"filename\":\"/scripts/informationFunctions/listServerHackable.js\",\"url\":\"blob:file:///17608ef6-b987-4144-8233-733304717341\",\"moduleSequenceNumber\":215}],\"dependents\":[],\"ramUsage\":4.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":215,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { NSEnums } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    ns.tprint('in Gang: ', ns.gang.inGang());\\n    ns.tprint('create Gang: ', ns.gang.createGang(NSEnums.LocationName.Sector12FoodNStuff));\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zY3JpcHRzL2dhbmdzL3Rlc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRWxELE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0lBQ3pDLEVBQUUsQ0FBQyxNQUFNLENBQ1IsZUFBZSxFQUNmLEVBQUUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FDM0QsQ0FBQztBQUNILENBQUMifQ==\",\"filename\":\"/scripts/gangs/test.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":3.6,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":77,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"gang.inGang\",\"cost\":1},{\"type\":\"fn\",\"name\":\"gang.createGang\",\"cost\":1}]}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import { ServersList } from '/scripts/classes/serverslist.js';\\nimport { OwnServerList, ScriptPath } from '/scripts/enums/enums.js';\\nexport async function main(ns) {\\n    while (true) {\\n        const ownServers = new ServersList(ns).ownedServer;\\n        const player = ns.getPlayer();\\n        for (const server of ownServers) {\\n            const actRam = ns.getServerMaxRam(server);\\n            let exponent = Math.log(actRam) / Math.log(2);\\n            if (exponent < 20) {\\n                exponent++;\\n                let cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                for (let i = exponent; i <= 20; i++) {\\n                    if (ns.getPurchasedServerUpgradeCost(server, 2 ** i) > player.money) {\\n                        exponent = i - 1;\\n                        break;\\n                    }\\n                    exponent = 20;\\n                }\\n                cost = ns.getPurchasedServerUpgradeCost(server, 2 ** exponent);\\n                if (cost < player.money) {\\n                    ns.upgradePurchasedServer(server, 2 ** exponent);\\n                    if (server.includes(OwnServerList.MONEY_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_MONEY_SERVERS, OwnServerList.HOME);\\n                    }\\n                    if (server.includes(OwnServerList.FARM_SERVER)) {\\n                        ns.exec(ScriptPath.RUN_EXP_SERVERS, OwnServerList.HOME, 1, OwnServerList.TARGET_EXP_FARM_SERVERS);\\n                    }\\n                }\\n            }\\n        }\\n        await ns.sleep(30000);\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXBncmFkZVNlcnZlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc2NyaXB0cy9leGVjdXRpbmdTY3JpcHRzL3VwZ3JhZGVTZXJ2ZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUM5RCxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRXBFLE1BQU0sQ0FBQyxLQUFLLFVBQVUsSUFBSSxDQUFDLEVBQU07SUFDaEMsT0FBTyxJQUFJLEVBQUU7UUFDWixNQUFNLFVBQVUsR0FBYSxJQUFJLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDN0QsTUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRTlCLEtBQUssTUFBTSxNQUFNLElBQUksVUFBVSxFQUFFO1lBQ2hDLE1BQU0sTUFBTSxHQUFHLEVBQUUsQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUMsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzlDLElBQUksUUFBUSxHQUFHLEVBQUUsRUFBRTtnQkFDbEIsUUFBUSxFQUFFLENBQUM7Z0JBQ1gsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRW5FLEtBQUssSUFBSSxDQUFDLEdBQUcsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLElBQUksRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRTt3QkFDcEUsUUFBUSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7d0JBQ2pCLE1BQU07cUJBQ047b0JBQ0QsUUFBUSxHQUFHLEVBQUUsQ0FBQztpQkFDZDtnQkFFRCxJQUFJLEdBQUcsRUFBRSxDQUFDLDZCQUE2QixDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksUUFBUSxDQUFDLENBQUM7Z0JBRS9ELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUU7b0JBQ3hCLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxDQUFDO29CQUNqRCxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxFQUFFO3dCQUNoRCxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQzFEO29CQUNELElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEVBQUU7d0JBQy9DLEVBQUUsQ0FBQyxJQUFJLENBQ04sVUFBVSxDQUFDLGVBQWUsRUFDMUIsYUFBYSxDQUFDLElBQUksRUFDbEIsQ0FBQyxFQUNELGFBQWEsQ0FBQyx1QkFBdUIsQ0FDckMsQ0FBQztxQkFDRjtpQkFDRDthQUNEO1NBQ0Q7UUFDRCxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdEI7QUFDRixDQUFDIn0=\",\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"\",\"module\":null,\"dependencies\":[{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///9a73fa42-357b-4e4d-a1c4-0c7055339fff\",\"moduleSequenceNumber\":58},{\"filename\":\"/scripts/enums/enums.js\",\"url\":\"blob:file:///531509e2-6d7a-4fae-a0e4-6867d30a6537\",\"moduleSequenceNumber\":58},{\"filename\":\"/scripts/classes/serverslist.js\",\"url\":\"blob:file:///06e0faf0-34fa-4c5b-80f6-9446219e0aea\",\"moduleSequenceNumber\":57},{\"filename\":\"/scripts/executingScripts/upgradeServers.js\",\"url\":\"blob:file:///c04acb92-eba1-4d62-a889-e0e643e77a80\",\"moduleSequenceNumber\":107}],\"dependents\":[],\"ramUsage\":6.3,\"queueCompile\":false,\"server\":\"home\",\"moduleSequenceNumber\":78,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getPlayer\",\"cost\":0.5},{\"type\":\"fn\",\"name\":\"getServerMaxRam\",\"cost\":0.05},{\"type\":\"fn\",\"name\":\"getPurchasedServerUpgradeCost\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"upgradePurchasedServer\",\"cost\":0.25},{\"type\":\"fn\",\"name\":\"exec\",\"cost\":1.3},{\"type\":\"fn\",\"name\":\"getServer\",\"cost\":2},{\"type\":\"fn\",\"name\":\"ls\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"scan\",\"cost\":0.2},{\"type\":\"fn\",\"name\":\"getServerRequiredHackingLevel\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"moneyServer-0\",\"moneyServer-1\",\"moneyServer-2\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-362352.cct\",\"type\":\"Total Ways to Sum\",\"data\":59,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"52.3.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58831545613,\"moneyMax\":1470788640325,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"74.7.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":50013990298,\"moneyMax\":1250349757450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1318,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-819127.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[126,[1,5,9,17,18,23,25,26,27,30,31,32]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"33.5.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":27410645540,\"moneyMax\":685266138500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1019,\"serverGrowth\":73}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"98.1.3.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":34343375995,\"moneyMax\":858584399875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":991,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557582.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"TABLEMODEMLINUXMOUSESHIFT\",\"SCANNER\"],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-519546.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,14],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"49.2.1.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"ecorp\",\"megacorp\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":36397047596,\"moneyMax\":909926189900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1235,\"serverGrowth\":86}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"44.8.3.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":15232185569,\"moneyMax\":380804639225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1186,\"serverGrowth\":75}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-91846.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,1,0,0,0,0],[0,0,0,0,0,0,0,1,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"40.1.7.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":20558926755,\"moneyMax\":513973168875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1087,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-648042.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"8225418956\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-784636-Ishima.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[20,7,10,29,26,37,32,3,26,9],[11,22,34,50,18,2,10,3,44,7],[33,34,50,49,38,9,1,13,32,27]],\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"1.9.2.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":20760298928,\"moneyMax\":519007473200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1117,\"serverGrowth\":75}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-952775.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[38,140,106,192,119,161,125,32,121,189,127,70,28,172,198,195,167,147,183,75,61,11,26],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"77.3.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":25458934751,\"moneyMax\":636473368775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1296,\"serverGrowth\":93}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"22.6.5.0\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":1621951480,\"moneyMax\":40548787000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":950,\"serverGrowth\":92}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-739815.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[94,195,185,101,18,39,118,140,54],\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-940823.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[6,6],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"29.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1522,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-221033.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":12391713,\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"20.2.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1142548819,\"moneyMax\":28563720475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":84}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"84.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":828786751,\"moneyMax\":20719668775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1021,\"serverGrowth\":61}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-466119-TianDiHui.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[7,12],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-430312-TianDiHui.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"DEBUG ENTER QUEUE FLASH VIRUS\",2],\"reward\":{\"name\":\"Tian Di Hui\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-974736.cct\",\"type\":\"Array Jumping Game\",\"data\":[5,2,3,10,1,6,0],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"infocomm\",\"httpPortOpen\":true,\"ip\":\"20.9.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":68.092,\"minDifficulty\":26,\"moneyAvailable\":5591452386.327721,\"moneyMax\":15738409650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":883,\"serverGrowth\":46}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-280371.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"49784619412\",-46],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"helios\",\"httpPortOpen\":true,\"ip\":\"87.6.5.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":254.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{\"helios\":[0,0,106,318]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28184.039605847796,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1549,\"ramUsage\":2.4,\"server\":\"helios\",\"threads\":106,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///16a723f3-8e7d-44d7-9d60-73f83461496e\",\"moduleSequenceNumber\":19531}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"helios\",\"moduleSequenceNumber\":19531,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"microdyne\",\"omnitek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":78.76950000000001,\"minDifficulty\":29,\"moneyAvailable\":3736977371,\"moneyMax\":17080091425,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":879,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-895857-NiteSec.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[9,[34,18,173,80,102,169,69,156,83,115,161,63,85,151,27,197,5,27,156,82,37,140,10,130,53,63,35,135,176,192,42,47,161,172]],\"reward\":{\"name\":\"NiteSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"vitalife\",\"httpPortOpen\":true,\"ip\":\"31.4.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,26,143]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10886.297733381107,\"onlineMoneyMade\":0,\"onlineRunningTime\":47084.21000001478,\"pid\":336,\"ramUsage\":2.4,\"server\":\"vitalife\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e761fae0-b1f8-4455-91c5-696b6b1d5a69\",\"moduleSequenceNumber\":682}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"vitalife\",\"moduleSequenceNumber\":682,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"run4theh111z\",\"4sigma\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":61.000000000000014,\"minDifficulty\":28,\"moneyAvailable\":18715177550,\"moneyMax\":18715177550,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":61}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-456678.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,3,3,1,4,2,7,2,7,2,2,2],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"75.2.5.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":920891192,\"moneyMax\":23022279800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":903,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-216440.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"976PZnNfp72597vJ5Qt0x209Lv5ZwMrur03O33349d47JtZz7z08y1lZKJZ5671p8223D682yI\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"univ-energy\",\"httpPortOpen\":true,\"ip\":\"88.4.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{\"univ-energy\":[0,0,18,60]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4810.638932918,\"onlineMoneyMade\":0,\"onlineRunningTime\":47594.010000014314,\"pid\":178,\"ramUsage\":2.4,\"server\":\"univ-energy\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///002883d7-823e-44da-bab8-5c0eb6011a47\",\"moduleSequenceNumber\":214}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"univ-energy\",\"moduleSequenceNumber\":214,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":97.78750000000001,\"minDifficulty\":27,\"moneyAvailable\":28350671025,\"moneyMax\":28350671025,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":823,\"serverGrowth\":85}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-685619.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9cH00DiM6p09ZSZU32OHR05ilctd562cq489oc5jIVe0201R925FE2R6572W044\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-899490.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[19,27],[2,4],[6,11],[19,24],[8,14],[23,33],[22,31],[25,32],[6,16],[5,6],[15,20],[23,30],[20,30],[18,24],[21,23],[16,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"titan-labs\",\"httpPortOpen\":true,\"ip\":\"68.6.5.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{\"titan-labs\":[0,0,106,477]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37173.15017601186,\"onlineMoneyMade\":0,\"onlineRunningTime\":46364.010000013215,\"pid\":502,\"ramUsage\":2.4,\"server\":\"titan-labs\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///c39f1e33-c8ad-481a-97d7-2a505b449fb9\",\"moduleSequenceNumber\":1394}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"titan-labs\",\"moduleSequenceNumber\":1394,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"infocomm\",\"stormtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":9922548177.847723,\"moneyMax\":20148662650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":830,\"serverGrowth\":63}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-286190.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[32,19,32,102,13,15,167,35,143,49,108,9,93,194,186,85,110,90,54,140,199,165,103,140,103,73,191,152,94,122,90,145,100,19,118,179,131,157,141,186,198,78,55,62,131,27,132,19,180],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"microdyne\",\"httpPortOpen\":true,\"ip\":\"58.5.8.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{\"microdyne\":[0,0,65,117]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10601.222833652631,\"onlineMoneyMade\":0,\"onlineRunningTime\":45373.61000000961,\"pid\":672,\"ramUsage\":2.4,\"server\":\"microdyne\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///3ff1cdd6-b4ad-4a05-9c19-749ec5f37ab3\",\"moduleSequenceNumber\":2417}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"microdyne\",\"moduleSequenceNumber\":2417,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":91.88550000000001,\"minDifficulty\":25,\"moneyAvailable\":12912327300,\"moneyMax\":12912327300,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":834,\"serverGrowth\":78}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"89.4.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":893391301,\"moneyMax\":22334782525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":914,\"serverGrowth\":73}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-68573.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())(a(((a)\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":true,\"ip\":\"9.6.6.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22,\"minDifficulty\":22,\"moneyAvailable\":0,\"moneyMax\":18812431025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":842,\"serverGrowth\":79}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-163907-Chongqing.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,0,0,1],[1,0,0,0,0,1,0,0,0],[0,1,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,0,0],[0,1,0,1,0,1,0,0,0],[1,0,0,1,1,1,0,0,0],[1,0,1,0,0,0,0,1,0],[0,1,1,0,0,0,0,0,0],[0,1,0,1,1,0,0,0,0],[0,0,1,0,1,0,0,0,0],[0,0,0,0,0,0,0,0,1],[1,1,1,0,1,0,0,0,0]],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aerocorp\",\"httpPortOpen\":true,\"ip\":\"89.9.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1068151735,\"moneyMax\":26703793375,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":894,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-358570.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(a)()()())(((((\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omnia\",\"httpPortOpen\":true,\"ip\":\"70.7.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,52,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":14846.166262421935,\"onlineMoneyMade\":0,\"onlineRunningTime\":32208.210000025214,\"pid\":1359,\"ramUsage\":2.4,\"server\":\"omnia\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///42ae5141-f284-4cde-aa8f-e6c6f4a7e6a1\",\"moduleSequenceNumber\":14010}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omnia\",\"moduleSequenceNumber\":14010,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":45.572,\"minDifficulty\":30,\"moneyAvailable\":23553724650,\"moneyMax\":23553724650,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":868,\"serverGrowth\":63}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"40.7.7.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":21,\"minDifficulty\":21,\"moneyAvailable\":0,\"moneyMax\":23237293525,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":813,\"serverGrowth\":71}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-318838.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":9124789,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"61.9.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"taiyang-digital\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":100,\"minDifficulty\":25,\"moneyAvailable\":19407834125,\"moneyMax\":19407834125,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":841,\"serverGrowth\":74}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-926341.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":3036160166,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-82477.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":849792743,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-345842.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[5,2],[4,2,5],[6,2,9,8],[4,8,4,9,4],[1,1,7,4,9,6],[7,9,5,1,3,1,4],[6,1,4,9,2,5,4,8],[6,5,9,9,5,1,5,6,6],[1,6,8,1,8,8,3,2,7,3],[7,7,9,5,7,9,4,8,6,2,9]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"solaris\",\"httpPortOpen\":true,\"ip\":\"88.6.9.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{\"solaris\":[0,6,42,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":531.1880267143737,\"offlineMoneyMade\":0,\"offlineRunningTime\":20902.781,\"onlineExpGained\":7410.234202437147,\"onlineMoneyMade\":0,\"onlineRunningTime\":52451.6100000188,\"pid\":36,\"ramUsage\":2.4,\"server\":\"solaris\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///0934e6f3-a301-48aa-8d7f-77616335b23f\",\"moduleSequenceNumber\":117}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"solaris\",\"moduleSequenceNumber\":117,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"omnia\",\"infocomm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":100,\"minDifficulty\":26,\"moneyAvailable\":19932485025,\"moneyMax\":19932485025,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":751,\"serverGrowth\":75}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-403094.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"534733204\",\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-274467.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[107,106,41,2,135,106,187,92,62,28,91,198,38,37,24,47,147,200,197,122,150,33,149,15,179,178,70],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"deltaone\",\"httpPortOpen\":true,\"ip\":\"75.1.2.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":100,\"minDifficulty\":28,\"moneyAvailable\":1823653559.7253566,\"moneyMax\":40773906325,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":827,\"serverGrowth\":60}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"63.0.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,13,104,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":1163.8389349359875,\"offlineMoneyMade\":0,\"offlineRunningTime\":20902.781,\"onlineExpGained\":16235.906398598247,\"onlineMoneyMade\":0,\"onlineRunningTime\":52451.6100000188,\"pid\":37,\"ramUsage\":2.4,\"server\":\"global-pharm\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2aff8134-6f7c-410d-8d81-b9ff69563fc1\",\"moduleSequenceNumber\":118}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"global-pharm\",\"moduleSequenceNumber\":118,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":100,\"minDifficulty\":27,\"moneyAvailable\":37828834325,\"moneyMax\":37828834325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":758,\"serverGrowth\":82}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nova-med\",\"httpPortOpen\":true,\"ip\":\"33.3.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":36.152,\"minDifficulty\":23,\"moneyAvailable\":28313845400,\"moneyMax\":28313845400,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":787,\"serverGrowth\":85}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-484012-NewTokyo.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"oJaQ6kSQ6kSQ6kSQa3SQ6k3a3SQ6tQ6B6tQ6B6tQ6B6tQ6B6t6B0JB0JBlrosPt\",\"reward\":{\"name\":\"New Tokyo\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zeus-med\",\"httpPortOpen\":true,\"ip\":\"55.0.5.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\",\"zb-def\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":26,\"minDifficulty\":26,\"moneyAvailable\":36499726925,\"moneyMax\":36499726925,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":836,\"serverGrowth\":74}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"unitalife\",\"httpPortOpen\":true,\"ip\":\"69.7.5.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,6,24,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":20902.781,\"onlineExpGained\":5674.086946518668,\"onlineMoneyMade\":0,\"onlineRunningTime\":49000.21000001462,\"pid\":38,\"ramUsage\":2.4,\"server\":\"unitalife\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///24a8b744-27a7-4219-8232-7895b3812a7e\",\"moduleSequenceNumber\":119}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"unitalife\",\"moduleSequenceNumber\":119,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":23,\"minDifficulty\":23,\"moneyAvailable\":0,\"moneyMax\":25672456700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":802,\"serverGrowth\":78}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-257563-Chongqing.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,4,0,0,7,3,9,2,0,0,10],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-900557.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2260061751\",24],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"33.5.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,0,130,468]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":3931.1892913393363,\"offlineMoneyMade\":0,\"offlineRunningTime\":20902.781,\"onlineExpGained\":31482.95923876337,\"onlineMoneyMade\":0,\"onlineRunningTime\":52451.6100000188,\"pid\":39,\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///7ed0dbb7-b3fa-4706-9c0c-a6beaaf6e8a7\",\"moduleSequenceNumber\":120}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":120,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":66,\"hackDifficulty\":49.564,\"minDifficulty\":22,\"moneyAvailable\":17646280775,\"moneyMax\":17646280775,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":744,\"serverGrowth\":65}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-236802.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"40gTc725bAfc6794OfOf387P16M2Hd7216737Z7Ce14473\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":true,\"ip\":\"92.9.7.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[196006836,48,102,180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":15196.046509000971,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16200000001,\"onlineExpGained\":10843.879752654924,\"onlineMoneyMade\":196006836,\"onlineRunningTime\":67366.80999979217,\"pid\":40,\"ramUsage\":2.4,\"server\":\"rho-construction\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///451d6570-89ab-4120-8112-a916265dbdd2\",\"moduleSequenceNumber\":121}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rho-construction\",\"moduleSequenceNumber\":121,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":100,\"minDifficulty\":13,\"moneyAvailable\":13725969250,\"moneyMax\":13725969250,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":516,\"serverGrowth\":48}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-963591.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[17],[40],[49],[29],[46]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"48.1.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[4303945719,583,1272,1272]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":145739.87254363188,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.163,\"onlineExpGained\":128351.35348231354,\"onlineMoneyMade\":4303945719,\"onlineRunningTime\":65656.60999981708,\"pid\":41,\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///95bc0d8c-852f-4009-884a-7755f628672e\",\"moduleSequenceNumber\":122}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":122,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"I.I.I.I\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":17,\"minDifficulty\":17,\"moneyAvailable\":17036706100,\"moneyMax\":17036706100,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":536,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"4.6.6.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[371848906,130,520,754]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":68016.20392441083,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.163,\"onlineExpGained\":79290.77283708077,\"onlineMoneyMade\":371848906,\"onlineRunningTime\":71207.60999973626,\"pid\":42,\"ramUsage\":2.4,\"server\":\"aevum-police\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///41fb6ce2-42fd-4a74-b590-72e2ca494dfa\",\"moduleSequenceNumber\":123}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"aevum-police\",\"moduleSequenceNumber\":123,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zb-institute\",\"galactic-cyber\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":98.912,\"minDifficulty\":25,\"moneyAvailable\":8052539175,\"moneyMax\":8052539175,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":401,\"serverGrowth\":43}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-687560-Netburners.cct\",\"type\":\"Array Jumping Game\",\"data\":[3,0,8,2,10,3,0,10,1,8,7,5,0,9,7,9,10,0,0],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":true,\"ip\":\"83.5.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,598,884]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":85095.03024483203,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.163,\"onlineExpGained\":60175.682928690425,\"onlineMoneyMade\":0,\"onlineRunningTime\":71297.60999973495,\"pid\":43,\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///fbc6837e-9fb9-4a97-83cf-ee2245a35b95\",\"moduleSequenceNumber\":124}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":124,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"computek\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":96.840625,\"minDifficulty\":16,\"moneyAvailable\":198327864.2560843,\"moneyMax\":4633039000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":403,\"serverGrowth\":35}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-723459.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0],[1,0],[0,1],[0,0],[0,0],[0,0]],\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-589852-Netburners.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"name\":\"Netburners\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-667751.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHEMAILINBOXQUEUETABLE\",\"JOYSTICK\"],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"80.8.1.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,6,48,78]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":477.4724064060222,\"offlineMoneyMade\":0,\"offlineRunningTime\":20902.782,\"onlineExpGained\":7236.516685415115,\"onlineMoneyMade\":0,\"onlineRunningTime\":51881.6100000251,\"pid\":44,\"ramUsage\":2.4,\"server\":\"zb-institute\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///5964de3a-154a-4a9a-b36d-29227bdcb163\",\"moduleSequenceNumber\":125}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zb-institute\",\"moduleSequenceNumber\":125,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"avmnite-02h\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":63.94599999999999,\"minDifficulty\":23,\"moneyAvailable\":283761634.3315243,\"moneyMax\":21574781525,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":771,\"serverGrowth\":81}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":true,\"ip\":\"10.8.0.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[165899916,39,208,377]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":31116.243314695344,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.163,\"onlineExpGained\":26095.473488966913,\"onlineMoneyMade\":165899916,\"onlineRunningTime\":69917.40999975504,\"pid\":45,\"ramUsage\":2.4,\"server\":\"summit-uni\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///4dae57f0-1655-43a0-a97c-b53d496c1ee2\",\"moduleSequenceNumber\":126}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"summit-uni\",\"moduleSequenceNumber\":126,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":19.008,\"minDifficulty\":18,\"moneyAvailable\":0,\"moneyMax\":7877556550,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":461,\"serverGrowth\":51}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-682398-Ishima.cct\",\"type\":\"Total Ways to Sum\",\"data\":63,\"reward\":{\"name\":\"Ishima\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"39.9.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":99.29,\"minDifficulty\":24,\"moneyAvailable\":5275369307.119668,\"moneyMax\":13851868550,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":562,\"serverGrowth\":61}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":true,\"ip\":\"14.3.6.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{\"catalyst\":[822033392,265,1325,1537]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":167446.06793692664,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.163,\"onlineExpGained\":145685.92604108414,\"onlineMoneyMade\":822033392,\"onlineRunningTime\":71177.6099997367,\"pid\":46,\"ramUsage\":2.4,\"server\":\"catalyst\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///c184bcc0-cbac-4022-b01c-c52b0bb9aa06\",\"moduleSequenceNumber\":127}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"catalyst\",\"moduleSequenceNumber\":127,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":100,\"minDifficulty\":20,\"moneyAvailable\":493232285.37135774,\"moneyMax\":13289294200,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":408,\"serverGrowth\":41}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":true,\"ip\":\"2.5.6.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":7.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[99412770,39,159,183]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":14942.291565646154,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":12580.204660096131,\"onlineMoneyMade\":99412770,\"onlineRunningTime\":73668.40999973314,\"pid\":47,\"ramUsage\":2.4,\"server\":\"the-hub\",\"threads\":3,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///9e456af7-502c-4215-a952-5d90fa12c6ab\",\"moduleSequenceNumber\":128}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"the-hub\",\"moduleSequenceNumber\":128,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":41,\"hackDifficulty\":14,\"minDifficulty\":14,\"moneyAvailable\":397125873.2189816,\"moneyMax\":4345517300,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":290,\"serverGrowth\":47}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-661837.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[44,18,48,14],[11,40,41,44],[44,19,9,20],[47,2,27,34],[34,42,49,2],[42,49,14,8],[10,33,1,33],[12,41,19,8],[19,47,10,37],[42,36,23,47],[1,26,8,19]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":true,\"ip\":\"30.9.3.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56.976,\"minDifficulty\":19,\"moneyAvailable\":162138068.92866835,\"moneyMax\":5606967125,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":339,\"serverGrowth\":58}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":true,\"ip\":\"72.9.8.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":127.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[3601186601,530,1431,1908]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":209134.534045814,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":184363.76510356317,\"onlineMoneyMade\":3601186601,\"onlineRunningTime\":71987.8099997351,\"pid\":48,\"ramUsage\":2.4,\"server\":\"netlink\",\"threads\":53,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///ef8e3cdb-dfc4-4254-8dd4-a1693ee7be38\",\"moduleSequenceNumber\":129}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"netlink\",\"moduleSequenceNumber\":129,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":88.746,\"minDifficulty\":20,\"moneyAvailable\":6875000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":377,\"serverGrowth\":68}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":true,\"ip\":\"3.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":23.328,\"minDifficulty\":15,\"moneyAvailable\":2108371950,\"moneyMax\":2108371950,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":268,\"serverGrowth\":47}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":true,\"ip\":\"54.4.6.3\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1927021,4055,4130,1141]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":55856.100952465466,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":49288.903071671404,\"onlineMoneyMade\":1927021,\"onlineRunningTime\":74508.60999972091,\"pid\":49,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///35d3d016-09b1-4ead-8197-25adc6fe6609\",\"moduleSequenceNumber\":130}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"n00dles\",\"moduleSequenceNumber\":130,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":5.652,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-163079.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[2,2,7,5,-6,2,-3,-7,1,3,8,-4,-7,-6,10,-10,-3,-2,5,-1,0,-5,-8,5,-8,-1,8,5],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":true,\"ip\":\"4.2.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[7797762,2574,18600,14190]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":510792.5078420361,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":458831.86291906005,\"onlineMoneyMade\":7797762,\"onlineRunningTime\":74508.60999972091,\"pid\":50,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2e92fa02-6695-45d0-b539-83cd7402ccf7\",\"moduleSequenceNumber\":131}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":131,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":100,\"minDifficulty\":3,\"moneyAvailable\":150928.68119143136,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":true,\"ip\":\"21.5.1.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[13331040,2292,13428,9960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":441227.1315983872,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":328952.84736733884,\"onlineMoneyMade\":13331040,\"onlineRunningTime\":74358.80999972309,\"pid\":51,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///60f163c7-b65a-4fa6-bc2c-305db9baeb22\",\"moduleSequenceNumber\":132}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":132,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.4859999999999998,\"minDifficulty\":3,\"moneyAvailable\":0,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-847854.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"1603749234\",\"reward\":{\"name\":\"\",\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-99154.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"()()()\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":true,\"ip\":\"16.1.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[18200820,3450,10656,7236]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":454343.595210669,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":322649.8483582555,\"onlineMoneyMade\":18200820,\"onlineRunningTime\":74358.80999972309,\"pid\":52,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///301d5f81-4e63-4ff8-a260-e1e39d07ea28\",\"moduleSequenceNumber\":133}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"joesguns\",\"moduleSequenceNumber\":133,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":66.788,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-504500-Netburners.cct\",\"type\":\"Array Jumping Game II\",\"data\":[3,3,0,2,0,2,1,0,3,2,4,2,2,3,0,0,2,4,5,2,0,2,4,2,0],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":true,\"ip\":\"57.3.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[68736915,2158,5824,3861]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359311.75905120233,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":247052.11608409794,\"onlineMoneyMade\":68736915,\"onlineRunningTime\":74358.80999972309,\"pid\":53,\"ramUsage\":2.4,\"server\":\"zer0\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///346629e0-cf03-43c2-9817-42c5352ef5ca\",\"moduleSequenceNumber\":134}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"zer0\",\"moduleSequenceNumber\":134,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"sigma-cosmetics\",\"neo-net\",\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":36.732,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":true,\"ip\":\"90.4.1.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[9712998,2994,6600,5040]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":359991.0601775517,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":255284.12909148383,\"onlineMoneyMade\":9712998,\"onlineRunningTime\":74358.80999972309,\"pid\":54,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///98af0461-82db-4200-91e2-41ab349bbea8\",\"moduleSequenceNumber\":135}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"nectar-net\",\"moduleSequenceNumber\":135,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":42.814,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":true,\"ip\":\"72.3.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[29974035,2210,7397,4667]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":493240.6718101041,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":303702.18645261624,\"onlineMoneyMade\":29974035,\"onlineRunningTime\":74358.80999972309,\"pid\":55,\"ramUsage\":2.4,\"server\":\"neo-net\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///e42e7c20-57aa-44f8-aa80-f1541682c6a3\",\"moduleSequenceNumber\":136}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"neo-net\",\"moduleSequenceNumber\":136,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":44.468,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785815.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[113,148,183,12,31,17,30,142,47,198,12,78,113,138,179,88,8,1,45,173,49,52,21,109,137,33,148,66,30,102,150,18,5,81,195,55,99]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":true,\"ip\":\"84.9.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[312092248,1040,4628,3120]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":371108.12267620786,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.16399999999,\"onlineExpGained\":221059.77888834916,\"onlineMoneyMade\":312092248,\"onlineRunningTime\":74208.80999972527,\"pid\":56,\"ramUsage\":2.4,\"server\":\"silver-helix\",\"threads\":26,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///6ecdc3fd-304c-4ef2-8112-15bb91c1b60c\",\"moduleSequenceNumber\":137}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"silver-helix\",\"moduleSequenceNumber\":137,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"computek\",\"netlink\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":77.176,\"minDifficulty\":10,\"moneyAvailable\":1125000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-520326.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[2,4],[1,4],[1,5],[5,7],[3,6],[0,7],[0,3],[5,6],[2,3],[1,3]]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":true,\"ip\":\"24.5.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[12083130,1512,5526,3750]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":264856.4916438767,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.165,\"onlineExpGained\":166125.22492299834,\"onlineMoneyMade\":12083130,\"onlineRunningTime\":74358.80999972309,\"pid\":57,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///f026aa2c-d263-4acb-b22d-d1597eb41370\",\"moduleSequenceNumber\":138}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":138,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":70.98400000000001,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-130679.cct\",\"type\":\"Total Ways to Sum\",\"data\":60,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":true,\"ip\":\"7.8.9.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":14.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[24131388,2172,5370,3720]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":234523.20537740842,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.165,\"onlineExpGained\":166001.33095643995,\"onlineMoneyMade\":24131388,\"onlineRunningTime\":74358.80999972309,\"pid\":58,\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"threads\":6,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///40e45cb1-f887-490f-ab3b-e3138b7380db\",\"moduleSequenceNumber\":139}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":139,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":29.741999999999997,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":5,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-231222.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":79675530,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":true,\"ip\":\"66.6.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[160184336,1144,4498,3003]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":278077.8084997296,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.165,\"onlineExpGained\":161650.80433289587,\"onlineMoneyMade\":160184336,\"onlineRunningTime\":74208.80999972527,\"pid\":59,\"ramUsage\":2.4,\"server\":\"phantasy\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///b458de4d-d6a2-4b29-8e05-40d4456d78df\",\"moduleSequenceNumber\":140}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"phantasy\",\"moduleSequenceNumber\":140,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":39.476,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564831.cct\",\"type\":\"Shortest Path in a Grid\",\"data\":[[0,0,0,0,0,0,1,0,0,0,1],[0,0,0,0,0,0,0,0,0,0,1],[0,0,1,0,0,0,0,1,0,1,0],[0,0,1,0,1,1,1,0,0,0,0],[0,0,0,1,0,0,1,0,0,0,1],[0,0,0,1,0,0,0,0,0,0,0],[0,0,1,1,1,0,1,1,0,1,0],[0,0,0,1,0,0,1,0,0,1,0],[1,0,1,0,0,0,0,0,1,1,0],[1,0,1,0,0,0,1,0,0,0,0],[0,1,0,0,0,0,1,1,0,0,0],[0,1,0,0,0,1,0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":true,\"ip\":\"43.9.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[41096354,1664,6500,3757]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":310605.93578405346,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.165,\"onlineExpGained\":183306.26651754134,\"onlineMoneyMade\":41096354,\"onlineRunningTime\":74358.80999972309,\"pid\":60,\"ramUsage\":2.4,\"server\":\"max-hardware\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///b7936041-e721-4f9b-b7cc-370abb7b9614\",\"moduleSequenceNumber\":141}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"max-hardware\",\"moduleSequenceNumber\":141,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"harakiri-sushi\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":37.924,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-612045.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[129,52,112,143,98,138,125,41,185,104,21,7,91,42,135,123,6,88,184,28,121,71,151,59,124,12,90,133,128,77,93,180,60,41,166,71,113],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":true,\"ip\":\"82.0.3.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[272026144,429,1833,1313]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":137366.13251076383,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.166,\"onlineExpGained\":83704.49445440822,\"onlineMoneyMade\":272026144,\"onlineRunningTime\":74208.80999972527,\"pid\":61,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///928a9811-760a-489d-92da-1e8c560aec66\",\"moduleSequenceNumber\":142}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"omega-net\",\"moduleSequenceNumber\":142,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":27,\"hackDifficulty\":52.891999999999996,\"minDifficulty\":9,\"moneyAvailable\":1564481900,\"moneyMax\":1564481900,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":202,\"serverGrowth\":36}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-704012.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":897795922,\"reward\":{\"name\":\"\",\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-453081.cct\",\"type\":\"Total Ways to Sum\",\"data\":76,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":true,\"ip\":\"4.7.1.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":100,\"minDifficulty\":13,\"moneyAvailable\":677879066.8501586,\"moneyMax\":1086058550,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":259,\"serverGrowth\":31}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-903363.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[5,14],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":true,\"ip\":\"69.4.8.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[75437349,585,3497,2301]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":266575.7267362396,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.167,\"onlineExpGained\":163702.16084201974,\"onlineMoneyMade\":75437349,\"onlineRunningTime\":74358.80999972309,\"pid\":62,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///833412ad-0b15-41d2-804e-782a954efd24\",\"moduleSequenceNumber\":143}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"iron-gym\",\"moduleSequenceNumber\":143,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":100,\"minDifficulty\":10,\"moneyAvailable\":66061702.092435464,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"56.4.9.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[451805887,91,182,338]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":32613.347470716784,\"offlineMoneyMade\":0,\"offlineRunningTime\":90735.167,\"onlineExpGained\":24995.876626501205,\"onlineMoneyMade\":451805887,\"onlineRunningTime\":68567.00999977467,\"pid\":63,\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"threads\":13,\"dependencies\":[]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///a35f471e-e385-4273-b588-29bc6a46fd41\",\"moduleSequenceNumber\":144}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":144,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"rothman-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":100,\"minDifficulty\":17,\"moneyAvailable\":2522808340.6990466,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":496,\"serverGrowth\":44}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-633151-Chongqing.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[69,66,16,198,20,161,120,111,162,41,44,34,127,155,38,63,60,164,96,96,34,157,46,20,158,171,17,124,75,10,173,187,169,86,167,83,51,94,163,46,60,161,146,87,160,41,27,190]],\"reward\":{\"name\":\"Chongqing\",\"type\":0}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-255032.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0100000100101000\",\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"98.5.0.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1063,\"serverGrowth\":51}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-250299.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"787047\",23],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"4.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\",\"omnia\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":55.624625,\"minDifficulty\":14,\"moneyAvailable\":55888508.03346134,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":761,\"serverGrowth\":53}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-7569.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[2],[7,2],[7,8,5],[7,9,5,9],[2,2,7,4,8],[1,4,3,2,2,7],[7,9,4,3,3,1,6]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"72.7.2.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":127.19999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{\"vitalife\":[0,0,106,212]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20484.27620837391,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1558,\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"threads\":53,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///99624e18-e287-4ee3-97f0-ce02916ec9c6\",\"moduleSequenceNumber\":683}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///99624e18-e287-4ee3-97f0-ce02916ec9c6\",\"moduleSequenceNumber\":683}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":683,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"taiyang-digital\",\"fulcrumtech\",\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":530,\"serverGrowth\":1}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408015.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":8632081578728,\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":true,\"ip\":\"36.3.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":124.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,78,312,442]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26503.05708413157,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1556,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1d82edc6-7400-412c-bf07-c56b4ba3b6b7\",\"moduleSequenceNumber\":145}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[690237184,26,208,156]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":16846.144855829523,\"onlineMoneyMade\":690237184,\"onlineRunningTime\":26867.01000000828,\"pid\":1557,\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"threads\":26,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1d82edc6-7400-412c-bf07-c56b4ba3b6b7\",\"moduleSequenceNumber\":145}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///1d82edc6-7400-412c-bf07-c56b4ba3b6b7\",\"moduleSequenceNumber\":145}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":145,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"crush-fitness\",\"alpha-ent\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":355,\"serverGrowth\":1}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-573494.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[187,[2,6,11,14,17,19,20,23]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":true,\"ip\":\"87.1.1.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":122.39999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,561,680,986]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":37133.40415633818,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1553,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2198415c-4752-4df6-b932-b2631d2779cb\",\"moduleSequenceNumber\":146}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{\"zb-institute\":[0,0,85,68]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8387.780703549335,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1554,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2198415c-4752-4df6-b932-b2631d2779cb\",\"moduleSequenceNumber\":146}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,51,85]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7735.397759939939,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1555,\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"threads\":17,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2198415c-4752-4df6-b932-b2631d2779cb\",\"moduleSequenceNumber\":146}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2198415c-4752-4df6-b932-b2631d2779cb\",\"moduleSequenceNumber\":146}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":146,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"phantasy\",\"zb-institute\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":5,\"requiredHackingSkill\":219,\"serverGrowth\":1}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-620779.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[7,9],[4,4,3],[5,9,9,1],[8,4,5,3,9],[9,4,3,7,8,5],[6,1,7,2,5,1,7],[1,9,2,7,2,8,8,5]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"98.2.8.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":null,\"dependencies\":[],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\".\",\"moduleSequenceNumber\":110,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"stormtech\",\"blade\",\"nwo\",\"clarkinc\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":510,\"serverGrowth\":1}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":true,\"ip\":\"43.8.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":7.199999999999999,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,14,36,41]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2206.5893680905915,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1550,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2f4c84bf-b291-4e08-9570-5d151134fb47\",\"moduleSequenceNumber\":147}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,15,24,30]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1582.9880249345545,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1551,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2f4c84bf-b291-4e08-9570-5d151134fb47\",\"moduleSequenceNumber\":147}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,12,18,24]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1140.984875115167,\"onlineMoneyMade\":0,\"onlineRunningTime\":26867.01000000828,\"pid\":1552,\"ramUsage\":2.4,\"server\":\"CSEC\",\"threads\":1,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2f4c84bf-b291-4e08-9570-5d151134fb47\",\"moduleSequenceNumber\":147}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///2f4c84bf-b291-4e08-9570-5d151134fb47\",\"moduleSequenceNumber\":147}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"CSEC\",\"moduleSequenceNumber\":147,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"iron-gym\",\"silver-helix\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":5,\"requiredHackingSkill\":57,\"serverGrowth\":1}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828993.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,0,0],[0,0,0,0,0],[0,1,0,0,0],[0,0,0,0,0],[0,0,1,0,1],[0,1,0,0,0]],\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"83.4.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"45.1.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-498736.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"72QLi6Eh527i7n256T598M7zbQ6u4279hXEt6ILVn07uqYzEvJ8107944vLE2291Hc58Eu6b04IT1b\",\"reward\":{\"name\":\"\",\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"62.7.2.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-0\",\"httpPortOpen\":true,\"ip\":\"40.0.4.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048476,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[197452430,1310595,1310595,381095]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":21159951.690064583,\"onlineMoneyMade\":197452430,\"onlineRunningTime\":1581.0100000002217,\"pid\":1980,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[700000000,158015,864435,827255]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25064542.41432979,\"onlineMoneyMade\":700000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1981,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1004996796.8371531,176605,566995,557700]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17834998.414262623,\"onlineMoneyMade\":1004996796.8371531,\"onlineRunningTime\":1581.0100000002217,\"pid\":1982,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1062500000,223080,427570,427570]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17635947.09267494,\"onlineMoneyMade\":1062500000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1983,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[1168750000,241670,250965,250965]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":13997288.934050776,\"onlineMoneyMade\":1168750000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1984,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[525000000,102245,204490,204490]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8280534.97805053,\"onlineMoneyMade\":525000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1985,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[1500000000,185900,195195,195195]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9275791.585989295,\"onlineMoneyMade\":1500000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1986,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[1500000000,111540,120835,111540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8248686.766596484,\"onlineMoneyMade\":1500000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1987,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[1125000000,92950,92950,92950]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6019311.964813647,\"onlineMoneyMade\":1125000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1988,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[1250000000,74360,83655,83655]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3781975.1101673055,\"onlineMoneyMade\":1250000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1989,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[2000000000,37180,65065,55770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4331356.757749504,\"onlineMoneyMade\":2000000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1990,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[3000000000,65065,74360,65065]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3917330.008846976,\"onlineMoneyMade\":3000000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1991,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[3375000000,27885,37180,37180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2802642.607955561,\"onlineMoneyMade\":3375000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1992,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[4693445700,27885,37180,27885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2356767.6475989944,\"onlineMoneyMade\":4693445700,\"onlineRunningTime\":1581.0100000002217,\"pid\":1993,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[1086058550,9295,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1592410.5727020232,\"onlineMoneyMade\":1086058550,\"onlineRunningTime\":1581.0100000002217,\"pid\":1994,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[4216743900,18590,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2140199.809711519,\"onlineMoneyMade\":4216743900,\"onlineRunningTime\":1581.0100000002217,\"pid\":1995,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[8691034600,18590,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1949110.5409872762,\"onlineMoneyMade\":8691034600,\"onlineRunningTime\":1581.0100000002217,\"pid\":1996,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[10721142055,18590,18590,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2207081.053765004,\"onlineMoneyMade\":10721142055,\"onlineRunningTime\":1581.0100000002217,\"pid\":1997,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[6875000000,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1356733.8079421239,\"onlineMoneyMade\":6875000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":1998,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095578.474018992,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":1999,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[4633039000,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1127426.6854730323,\"onlineMoneyMade\":4633039000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2000,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2001,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[7877556550,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1304184.2590429569,\"onlineMoneyMade\":7877556550,\"onlineRunningTime\":1581.0100000002217,\"pid\":2002,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[6250000000,9295,18590,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1554192.7189571743,\"onlineMoneyMade\":6250000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2003,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":796205.2863510116,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2004,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":789835.6440602037,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2005,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":528680.3101370716,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2006,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[17646280775,9295,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":968185.6282028302,\"onlineMoneyMade\":17646280775,\"onlineRunningTime\":1581.0100000002217,\"pid\":2007,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2008,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":573267.8061727284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2009,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,9295,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":496832.09868303116,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2010,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2011,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":509571.38326464745,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2012,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":764357.0748969712,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2013,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":697475.8308434861,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2014,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2015,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592376.7330451526,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2016,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2017,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2018,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2019,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":566898.1638819203,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2020,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2021,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":477723.17181060696,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2022,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643333.8713716173,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2023,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2024,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[7332593125,9295,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1108317.758600608,\"onlineMoneyMade\":7332593125,\"onlineRunningTime\":1581.0100000002217,\"pid\":2025,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2026,\"ramUsage\":2.4,\"server\":\"moneyServer-0\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///bf5ef857-8fbe-43d5-89b9-02e21bf64e84\",\"moduleSequenceNumber\":148}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-0\",\"moduleSequenceNumber\":148,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-1\",\"httpPortOpen\":true,\"ip\":\"56.7.7.5\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048476,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[78454669.11495739,1319890,1310595,381095]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17656648.430120073,\"onlineMoneyMade\":78454669.11495739,\"onlineRunningTime\":1581.0100000002217,\"pid\":2027,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[850000000,185900,864435,827255]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":25446720.951778274,\"onlineMoneyMade\":850000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2028,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1017158441.8955115,195195,557700,557700]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17771301.991354544,\"onlineMoneyMade\":1017158441.8955115,\"onlineRunningTime\":1581.0100000002217,\"pid\":2029,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[1000000000,213785,427570,427570]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17476706.035404738,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2030,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,232375,250965,250965]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":11513128.440635625,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2031,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[600000000,102245,204490,204490]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8399965.771003183,\"onlineMoneyMade\":600000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2032,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[300000000,176605,195195,195195]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7802811.80623992,\"onlineMoneyMade\":300000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2033,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[0,55770,120835,111540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5907843.224724506,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2034,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[0,83655,92950,92950]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4960358.9339668015,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2035,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,83655,83655,83655]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3463492.995626901,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2036,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[0,9295,65065,55770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3375910.41412829,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2037,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[0,65065,74360,65065]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3200745.251131066,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2038,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,9295,37180,37180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2101981.9559666705,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2039,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,27885,37180,27885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1826494.9268892203,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2040,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,9295,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1353548.9867967197,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2041,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,9295,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1515974.865212326,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2042,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,9295,9295,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1055768.2097014412,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2043,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[0,9295,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":525495.4889916676,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2044,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1017550.3559565928,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2045,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095578.474018992,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2046,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":845570.0141047743,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2047,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2048,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":401287.4643209098,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2049,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,9295,18590,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1262781.584152704,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2050,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[13725969250,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":955446.3436212139,\"onlineMoneyMade\":13725969250,\"onlineRunningTime\":1581.0100000002217,\"pid\":2051,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":394917.82203010184,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2052,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":528680.3101370716,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2053,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1089208.8317281841,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2054,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2055,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":573267.8061727284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2056,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":496832.09868303116,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2057,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2058,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":509571.38326464745,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2059,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[25313685910,9295,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1019142.7665292949,\"onlineMoneyMade\":25313685910,\"onlineRunningTime\":1581.0100000002217,\"pid\":2060,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[22943526905,9295,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":929967.7744579815,\"onlineMoneyMade\":22943526905,\"onlineRunningTime\":1581.0100000002217,\"pid\":2061,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2062,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592376.7330451526,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2063,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2064,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2065,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2066,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":566898.1638819203,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2067,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2068,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":477723.17181060696,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2069,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643333.8713716173,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2070,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2071,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[2864644640,9295,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1108317.758600608,\"onlineMoneyMade\":2864644640,\"onlineRunningTime\":1581.0100000002217,\"pid\":2072,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2073,\"ramUsage\":2.4,\"server\":\"moneyServer-1\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///78a4ae37-dc91-4f87-b055-83405d35b5d2\",\"moduleSequenceNumber\":149}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-1\",\"moduleSequenceNumber\":149,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"moneyServer-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"moneyServer-2\",\"httpPortOpen\":true,\"ip\":\"92.9.0.8\",\"isConnectedTo\":false,\"maxRam\":1048576,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":1048476,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[80500000,1319890,1310595,381095]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17656648.43012007,\"onlineMoneyMade\":80500000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2074,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[400000000,120835,873730,817960]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24363881.762340903,\"onlineMoneyMade\":400000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2075,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[1008652355.3629786,195195,557700,548405]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17643909.145538382,\"onlineMoneyMade\":1008652355.3629786,\"onlineRunningTime\":1581.0100000002217,\"pid\":2076,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[812500000,213785,427570,427570]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17118413.65654678,\"onlineMoneyMade\":812500000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2077,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[687500000,241670,250965,250965]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12994070.2732485,\"onlineMoneyMade\":687500000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2078,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{\"hong-fang-tea\":[450000000,102245,204490,204490]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8161104.185097879,\"onlineMoneyMade\":450000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2079,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{\"harakiri-sushi\":[300000000,176605,195195,195195]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7802811.80623992,\"onlineMoneyMade\":300000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2080,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{\"neo-net\":[750000000,92950,120835,111540]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7133999.365705066,\"onlineMoneyMade\":750000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2081,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{\"zer0\":[750000000,83655,92950,92950]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5629171.374501652,\"onlineMoneyMade\":750000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2082,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{\"max-hardware\":[500000000,74360,83655,83655]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3423682.73130935,\"onlineMoneyMade\":500000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2083,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{\"iron-gym\":[1000000000,27885,65065,55770]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3885481.797392938,\"onlineMoneyMade\":1000000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2084,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{\"phantasy\":[1200000000,55770,74360,65065]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3439606.83703637,\"onlineMoneyMade\":1200000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2085,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{\"silver-helix\":[0,9295,37180,37180]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2101981.9559666705,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2086,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{\"omega-net\":[0,27885,37180,27885]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1826494.9268892203,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2087,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{\"crush-fitness\":[0,9295,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1353548.9867967197,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2088,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{\"johnson-ortho\":[0,0,18590,18590]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1515974.865212326,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2089,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{\"the-hub\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":730916.4528702286,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2090,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{\"computek\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":525495.4889916676,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2091,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{\"netlink\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1017550.3559565928,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2092,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{\"aevum-police\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1095578.474018992,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2093,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{\"rothman-uni\":[0,0,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":845570.0141047743,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2094,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2095,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{\"summit-uni\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":401287.4643209098,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2096,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{\"millenium-fitness\":[0,9295,18590,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1262781.584152704,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2097,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{\"rho-construction\":[0,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":716584.7577159104,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2098,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{\"alpha-ent\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":394917.82203010184,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2099,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{\"syscore\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":528680.3101370716,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2100,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{\"lexo-corp\":[0,9295,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":605116.0176267689,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2101,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"solaris\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2102,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{\"global-pharm\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":573267.8061727284,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2103,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{\"snap-fitness\":[11250000000,9295,9295,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":993664.1973660624,\"onlineMoneyMade\":11250000000,\"onlineRunningTime\":1581.0100000002217,\"pid\":2104,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2105,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nova-med\"],\"dataMap\":{\"nova-med\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":509571.38326464745,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2106,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"unitalife\"],\"dataMap\":{\"unitalife\":[0,9295,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":636964.2290808093,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2107,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{\"zb-def\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":581229.8590362384,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2108,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"univ-energy\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2109,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"deltaone\"],\"dataMap\":{\"deltaone\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":592376.7330451526,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2110,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"vitalife\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2111,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"titan-labs\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2112,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"microdyne\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2113,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zeus-med\"],\"dataMap\":{\"zeus-med\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":566898.1638819203,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2114,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2115,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"galactic-cyber\"],\"dataMap\":{\"galactic-cyber\":[0,0,0,9295]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":477723.17181060696,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2116,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omnia\"],\"dataMap\":{\"omnia\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":643333.8713716173,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2117,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"helios\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2118,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"infocomm\"],\"dataMap\":{\"infocomm\":[0,0,9295,0]},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":692698.5991253799,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2119,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aerocorp\"],\"dataMap\":{},\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1581.0100000002217,\"pid\":2120,\"ramUsage\":2.4,\"server\":\"moneyServer-2\",\"threads\":9295,\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}]}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"export async function main(ns) {\\n    const target = ns.args[0];\\n    const moneyTreshhold = ns.getServerMaxMoney(target) * 0.75;\\n    const securityThreshhold = ns.getServerMinSecurityLevel(target) + 5;\\n    while (true) {\\n        const moneyAvailable = ns.getServerMoneyAvailable(target);\\n        const securityLevel = ns.getServerSecurityLevel(target);\\n        if (securityLevel > securityThreshhold) {\\n            await ns.weaken(target);\\n        }\\n        else if (moneyAvailable < moneyTreshhold) {\\n            await ns.grow(target);\\n        }\\n        else {\\n            await ns.hack(target);\\n        }\\n    }\\n}\\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uZXlGYXJtLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NjcmlwdHMvZXhlY3V0aW5nU2NyaXB0cy9tb25leUZhcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLEtBQUssVUFBVSxJQUFJLENBQUMsRUFBTTtJQUNoQyxNQUFNLE1BQU0sR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBVyxDQUFDO0lBQzVDLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsTUFBTSxrQkFBa0IsR0FBRyxFQUFFLENBQUMseUJBQXlCLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRXBFLE9BQU8sSUFBSSxFQUFFO1FBQ1osTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFELE1BQU0sYUFBYSxHQUFHLEVBQUUsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV4RCxJQUFJLGFBQWEsR0FBRyxrQkFBa0IsRUFBRTtZQUN2QyxNQUFNLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDeEI7YUFBTSxJQUFJLGNBQWMsR0FBRyxjQUFjLEVBQUU7WUFDM0MsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ3RCO2FBQU07WUFDTixNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDdEI7S0FDRDtBQUNGLENBQUMifQ==\",\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"\",\"module\":{},\"dependencies\":[{\"filename\":\"/scripts/executingScripts/moneyFarm.js\",\"url\":\"blob:file:///afcb12e7-ca2e-47a3-ab42-39e2dcb2475d\",\"moduleSequenceNumber\":150}],\"dependents\":[],\"ramUsage\":2.4,\"queueCompile\":false,\"server\":\"moneyServer-2\",\"moduleSequenceNumber\":150,\"ramUsageEntries\":[{\"type\":\"misc\",\"name\":\"baseCost\",\"cost\":1.6},{\"type\":\"fn\",\"name\":\"getServerMaxMoney\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMinSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerMoneyAvailable\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"getServerSecurityLevel\",\"cost\":0.1},{\"type\":\"fn\",\"name\":\"weaken\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"grow\",\"cost\":0.15},{\"type\":\"fn\",\"name\":\"hack\",\"cost\":0.1}]}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":7.9262,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.1104,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0.004,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":1.8674,\"isBanned\":false,\"isMember\":true,\"name\":\"BitRunners\",\"playerReputation\":876370.3840235133}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"The Black Hand\"],\"favor\":6.8402,\"isBanned\":false,\"isMember\":true,\"name\":\"The Black Hand\",\"playerReputation\":23804.028337283402}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":94.6008,\"isBanned\":false,\"isMember\":true,\"name\":\"NiteSec\",\"playerReputation\":282947.6460894722}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.2999,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Neuregen Gene Modification\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Chongqing\",\"playerReputation\":60368.07997301414}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"INFRARET Enhancement\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"Ishima\",\"playerReputation\":14201.128466504402}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NutriGen Implant\"],\"favor\":1,\"isBanned\":false,\"isMember\":true,\"name\":\"New Tokyo\",\"playerReputation\":14221.349667949175}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"CashRoot Starter Kit\"],\"favor\":23.7332,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"HemoRecirculator\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"NeuroFlux Governor\",\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\"],\"favor\":56.4533,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":145101.7761990967}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":26.1733,\"isBanned\":false,\"isMember\":true,\"name\":\"Tian Di Hui\",\"playerReputation\":65691.10092556798}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"NeuroFlux Governor\",\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"Neurotrainer I\"],\"favor\":56.2689,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":144507.97855355497}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"SoA - phyzical WKS harmonizer\",\"SoA - Might of Ares\",\"SoA - Wisdom of Athena\",\"SoA - Chaos of Dionysus\",\"SoA - Beauty of Aphrodite\",\"SoA - Trickery of Hermes\",\"SoA - Flood of Poseidon\",\"SoA - Hunt of Artemis\",\"SoA - Knowledge of Apollo\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Shadows of Anarchy\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"main\":\"run main.js\",\"sa\":\"scan-analyze\",\"find\":\"run scripts/informationFunctions/findRoute.js\",\"listServers\":\"run scripts/informationFunctions/listServerHackable.js\"}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"de\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#E0E0BC\",\"primary\":\"#CCCCAE\",\"primarydark\":\"#B8B89C\",\"successlight\":\"#00F000\",\"success\":\"#00D200\",\"successdark\":\"#00B400\",\"errorlight\":\"#F00000\",\"error\":\"#C80000\",\"errordark\":\"#A00000\",\"secondarylight\":\"#B4AEAE\",\"secondary\":\"#969090\",\"secondarydark\":\"#787272\",\"warninglight\":\"#F0F000\",\"warning\":\"#C8C800\",\"warningdark\":\"#A0A000\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#1E1E1E\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#1E1E1E\",\"backgroundsecondary\":\"#252525\",\"button\":\"#333\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"base\":\"vs-dark\",\"inherit\":true,\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}}},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":14,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\"}","VersionSave":"29","AllGangsSave":"","LastExportBonus":"1673888837344","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"storedCycles\":0}}"}}